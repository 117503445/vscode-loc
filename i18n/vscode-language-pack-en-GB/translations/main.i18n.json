{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"vs/base/common/severity": {
			"sev.error": "Error",
			"sev.warning": "Warning",
			"sev.info": "Info"
		},
		"vs/base/browser/ui/inputbox/inputBox": {
			"alertErrorMessage": "Error: {0}",
			"alertWarningMessage": "Warning: {0}",
			"alertInfoMessage": "Info: {0}"
		},
		"vs/base/browser/ui/findinput/findInput": {
			"defaultLabel": "input"
		},
		"vs/base/parts/quickopen/browser/quickOpenModel": {
			"quickOpenAriaLabelEntry": "{0}, picker",
			"quickOpenAriaLabel": "picker"
		},
		"vs/base/browser/ui/aria/aria": {
			"repeated": "{0} (occurred again)",
			"repeatedNtimes": "{0} (occurred {1} times)"
		},
		"vs/base/browser/ui/actionbar/actionbar": {
			"titleLabel": "{0} ({1})"
		},
		"vs/base/node/processes": {
			"TaskRunner.UNC": "Can't execute a shell command on a UNC drive."
		},
		"vs/base/common/errorMessage": {
			"stackTrace.format": "{0}: {1}",
			"error.defaultMessage": "An unknown error occurred. Please consult the log for more details.",
			"nodeExceptionMessage": "A system error occurred ({0})",
			"error.moreErrors": "{0} ({1} errors in total)"
		},
		"vs/base/browser/ui/findinput/findInputCheckboxes": {
			"caseDescription": "Match Case",
			"wordsDescription": "Match Whole Word",
			"regexDescription": "Use Regular Expression"
		},
		"vs/base/browser/ui/toolbar/toolbar": {
			"moreActions": "More Actions..."
		},
		"vs/base/common/keybindingLabels": {
			"ctrlKey": "Ctrl",
			"shiftKey": "Shift",
			"altKey": "Alt",
			"windowsKey": "Windows",
			"superKey": "Super",
			"ctrlKey.long": "Control",
			"shiftKey.long": "Shift",
			"altKey.long": "Alt",
			"cmdKey.long": "Command",
			"windowsKey.long": "Windows",
			"superKey.long": "Super"
		},
		"vs/base/parts/quickopen/browser/quickOpenWidget": {
			"quickOpenAriaLabel": "Quick picker. Type to narrow down results.",
			"treeAriaLabel": "Quick Picker",
			"quickInput.visibleCount": "{0} Results"
		},
		"vs/base/browser/ui/list/listWidget": {
			"aria list": "{0}. Use the navigation keys to navigate."
		},
		"vs/base/parts/tree/browser/treeDefaults": {
			"collapse": "Collapse"
		},
		"vs/base/browser/ui/menu/menu": {
			"titleLabel": "{0} ({1})"
		},
		"vs/base/common/jsonErrorMessages": {
			"error.invalidSymbol": "Invalid symbol",
			"error.invalidNumberFormat": "Invalid number format",
			"error.propertyNameExpected": "Property name expected",
			"error.valueExpected": "Value expected",
			"error.colonExpected": "Colon expected",
			"error.commaExpected": "Comma expected",
			"error.closeBraceExpected": "Closing brace expected",
			"error.closeBracketExpected": "Closing bracket expected",
			"error.endOfFileExpected": "End of file expected"
		},
		"vs/editor/browser/controller/coreCommands": {
			"miSelectAll": "&&Select All",
			"miUndo": "&&Undo",
			"miRedo": "&&Redo"
		},
		"vs/editor/browser/widget/codeEditorWidget": {
			"cursors.maximum": "The number of cursors has been limited to {0}."
		},
		"vs/editor/browser/widget/diffEditorWidget": {
			"diff.tooLarge": "Cannot compare files because one file is too large."
		},
		"vs/editor/common/view/editorColorRegistry": {
			"lineHighlight": "Background colour for the highlight of line at the cursor position.",
			"lineHighlightBorderBox": "Background colour for the border around the line at the cursor position.",
			"rangeHighlight": "Background colour of highlighted ranges, like by quick open and find features. The colour must not be opaque to not hide underlying decorations.",
			"rangeHighlightBorder": "Background colour of the border around highlighted ranges.",
			"caret": "Colour of the editor cursor.",
			"editorCursorBackground": "The background colour of the editor cursor. Allows customising the colour of a character overlapped by a block cursor.",
			"editorWhitespaces": "Colour of whitespace characters in the editor.",
			"editorIndentGuides": "Colour of the editor indentation guides.",
			"editorActiveIndentGuide": "Colour of the active editor indentation guides.",
			"editorLineNumbers": "Colour of the editor line numbers.",
			"editorActiveLineNumber": "Colour of editor active line number.",
			"deprecatedEditorActiveLineNumber": "Id is deprecated. Use 'editorLineNumber.activeForeground' instead.",
			"editorRuler": "Colour of the editor rulers.",
			"editorCodeLensForeground": "Foreground colour of editor code lenses",
			"editorBracketMatchBackground": "Background colour behind matching brackets",
			"editorBracketMatchBorder": "Colour for matching brackets boxes",
			"editorOverviewRulerBorder": "Colour of the overview ruler border.",
			"editorGutter": "Background colour of the editor gutter. The gutter contains the glyph margins and the line numbers.",
			"errorForeground": "Foreground colour of error squigglies in the editor.",
			"errorBorder": "Border colour of error squigglies in the editor.",
			"warningForeground": "Foreground colour of warning squigglies in the editor.",
			"warningBorder": "Border colour of warning squigglies in the editor.",
			"infoForeground": "Foreground colour of info squigglies in the editor.",
			"infoBorder": "Border colour of info squigglies in the editor.",
			"hintForeground": "Foreground colour of hint squigglies in the editor.",
			"hintBorder": "Border colour of hint squigglies in the editor.",
			"unnecessaryCodeBorder": "Border of unnecessary code in the editor.",
			"unnecessaryCodeOpacity": "Opacity of unnecessary code in the editor.",
			"overviewRulerRangeHighlight": "Overview ruler marker colour for range highlights. The colour must not be opaque to not hide underlying decorations.",
			"overviewRuleError": "Overview ruler marker colour for errors.",
			"overviewRuleWarning": "Overview ruler marker colour for warnings.",
			"overviewRuleInfo": "Overview ruler marker colour for infos."
		},
		"vs/editor/common/modes/modesRegistry": {
			"plainText.alias": "Plain Text"
		},
		"vs/editor/common/config/editorOptions": {
			"accessibilityOffAriaLabel": "The editor is not accessible at this time. Press Alt+F1 for options.",
			"editorViewAccessibleLabel": "Editor content"
		},
		"vs/editor/common/controller/cursor": {
			"corrupt.commands": "Unexpected exception while executing command."
		},
		"vs/editor/browser/widget/diffReview": {
			"label.close": "Close",
			"no_lines": "no lines",
			"one_line": "1 line",
			"more_lines": "{0} lines",
			"header": "Difference {0} of {1}: original {2}, {3}, modified {4}, {5}",
			"blankLine": "blank",
			"equalLine": "original {0}, modified {1}: {2}",
			"insertLine": "+ modified {0}: {1}",
			"deleteLine": "- original {0}: {1}",
			"editor.action.diffReview.next": "Go to Next Difference",
			"editor.action.diffReview.prev": "Go to Previous Difference"
		},
		"vs/editor/common/config/commonEditorConfig": {
			"editorConfigurationTitle": "Editor",
			"fontFamily": "Controls the font family.",
			"fontWeight": "Controls the font weight.",
			"fontSize": "Controls the font size in pixels.",
			"lineHeight": "Controls the line height. Use 0 to compute the line height from the font size.",
			"letterSpacing": "Controls the letter spacing in pixels.",
			"lineNumbers.off": "Line numbers are not rendered.",
			"lineNumbers.on": "Line numbers are rendered as absolute number.",
			"lineNumbers.relative": "Line numbers are rendered as distance in lines to cursor position.",
			"lineNumbers.interval": "Line numbers are rendered every 10 lines.",
			"lineNumbers": "Controls the display of line numbers.",
			"rulers": "Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.",
			"wordSeparators": "Characters that will be used as word separators when doing word related navigations or operations.",
			"tabSize": "The number of spaces a tab is equal to. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
			"insertSpaces": "Insert spaces when pressing `Tab`. This setting is overridden based on the file contents when `#editor.detectIndentation#` is on.",
			"detectIndentation": "Controls whether `#editor.tabSize#` and `#editor.insertSpaces#` will be automatically detected when a file is opened based on the file contents.",
			"roundedSelection": "Controls whether selections should have rounded corners.",
			"scrollBeyondLastLine": "Controls whether the editor will scroll beyond the last line.",
			"scrollBeyondLastColumn": "Controls the number of extra characters beyond which the editor will scroll horizontally.",
			"smoothScrolling": "Controls whether the editor will scroll using an animation.",
			"minimap.enabled": "Controls whether the minimap is shown.",
			"minimap.side": "Controls the side where to render the minimap.",
			"minimap.showSlider": "Controls whether the minimap slider is automatically hidden.",
			"minimap.renderCharacters": "Render the actual characters on a line as opposed to colour blocks.",
			"minimap.maxColumn": "Limit the width of the minimap to render at most a certain number of columns.",
			"hover.enabled": "Controls whether the hover is shown.",
			"hover.delay": "Controls the delay in milliseconds after which the hover is shown.",
			"hover.sticky": "Controls whether the hover should remain visible when mouse is moved over it.",
			"find.seedSearchStringFromSelection": "Controls whether the search string in the Find Widget is seeded from the editor selection.",
			"find.autoFindInSelection": "Controls whether the find operation is carried out on selected text or the entire file in the editor.",
			"find.globalFindClipboard": "Controls whether the Find Widget should read or modify the shared find clipboard on macOS.",
			"wordWrap.off": "Lines will never wrap.",
			"wordWrap.on": "Lines will wrap at the viewport width.",
			"wordWrap.wordWrapColumn": "Lines will wrap at `#editor.wordWrapColumn#`.",
			"wordWrap.bounded": "Lines will wrap at the minimum of viewport and `#editor.wordWrapColumn#`.",
			"wordWrap": "Controls how lines should wrap.",
			"wordWrapColumn": "Controls the wrapping column of the editor when `#editor.wordWrap#` is `wordWrapColumn` or `bounded`.",
			"wrappingIndent.none": "No indentation. Wrapped lines begin at column 1.",
			"wrappingIndent.same": "Wrapped lines get the same indentation as the parent.",
			"wrappingIndent.indent": "Wrapped lines get +1 indentation toward the parent.",
			"wrappingIndent.deepIndent": "Wrapped lines get +2 indentation toward the parent.",
			"wrappingIndent": "Controls the indentation of wrapped lines.",
			"mouseWheelScrollSensitivity": "A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.",
			"multiCursorModifier.ctrlCmd": "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
			"multiCursorModifier.alt": "Maps to `Alt` on Windows and Linux and to `Option` on macOS.",
			"multiCursorModifier": "The modifier to be used to add multiple cursors with the mouse. The Go To Definition and Open Link mouse gestures will adapt such that they do not conflict with the multicursor modifier. [Read more] (https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier).",
			"multiCursorMergeOverlapping": "Merge multiple cursors when they are overlapping.",
			"quickSuggestions.strings": "Enable quick suggestions inside strings.",
			"quickSuggestions.comments": "Enable quick suggestions inside comments.",
			"quickSuggestions.other": "Enable quick suggestions outside of strings and comments.",
			"quickSuggestions": "Controls whether suggestions should automatically show up while typing.",
			"quickSuggestionsDelay": "Controls the delay in milliseconds after which quick suggestions will show up.",
			"parameterHints.enabled": "Enables a pop-up that shows parameter documentation and type information as you type.",
			"parameterHints.cycle": "Controls whether the parameter hints menu cycles or closes when reaching the end of the list.",
			"editor.autoClosingBrackets.languageDefined": "Use language configurations to determine when to autoclose brackets.",
			"editor.autoClosingBrackets.beforeWhitespace": "Autoclose brackets only when the cursor is to the left of whitespace.",
			"autoClosingBrackets": "Controls whether the editor should automatically close brackets after the user adds an opening bracket.",
			"editor.autoClosingQuotes.languageDefined": "Use language configurations to determine when to autoclose quotes.",
			"editor.autoClosingQuotes.beforeWhitespace": "Autoclose quotes only when the cursor is to the left of whitespace.",
			"autoClosingQuotes": "Controls whether the editor should automatically close quotes after the user adds an opening quote.",
			"editor.autoSurround.languageDefined": "Use language configurations to determine when to automatically surround selections.",
			"editor.autoSurround.brackets": "Surround with brackets but not quotes.",
			"editor.autoSurround.quotes": "Surround with quotes but not brackets.",
			"autoSurround": "Controls whether the editor should automatically surround selections.",
			"formatOnType": "Controls whether the editor should automatically format the line after typing.",
			"formatOnPaste": "Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.",
			"autoIndent": "Controls whether the editor should automatically adjust the indentation when users type, paste or move lines. Extensions with indentation rules of the language must be available.",
			"suggestOnTriggerCharacters": "Controls whether suggestions should automatically show up when typing trigger characters.",
			"acceptSuggestionOnEnterSmart": "Only accept a suggestion with `Enter` when it makes a textual change.",
			"acceptSuggestionOnEnter": "Controls whether suggestions should be accepted on `Enter`, in addition to `Tab`. Helps to avoid ambiguity between inserting new lines or accepting suggestions.",
			"acceptSuggestionOnCommitCharacter": "Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.",
			"snippetSuggestions.top": "Show snippet suggestions on top of other suggestions.",
			"snippetSuggestions.bottom": "Show snippet suggestions below other suggestions.",
			"snippetSuggestions.inline": "Show snippets suggestions with other suggestions.",
			"snippetSuggestions.none": "Do not show snippet suggestions.",
			"snippetSuggestions": "Controls whether snippets are shown with other suggestions and how they are sorted.",
			"emptySelectionClipboard": "Controls whether copying without a selection copies the current line.",
			"copyWithSyntaxHighlighting": "Controls whether syntax highlighting should be copied into the clipboard.",
			"wordBasedSuggestions": "Controls whether completions should be computed based on words in the document.",
			"suggestSelection.first": "Always select the first suggestion.",
			"suggestSelection.recentlyUsed": "Select recent suggestions unless further typing selects one, e.g. `console.| -> console.log` because `log` has been completed recently.",
			"suggestSelection.recentlyUsedByPrefix": "Select suggestions based on previous prefixes that have completed those suggestions, e.g. `co -> console` and `con -> const`.",
			"suggestSelection": "Controls how suggestions are pre-selected when showing the suggest list.",
			"suggestFontSize": "Font size for the suggest widget. When set to `0`, the value of `#editor.fontSize#` is used.",
			"suggestLineHeight": "Line height for the suggest widget. When set to `0`, the value of `#editor.lineHeight#` is used.",
			"tabCompletion.on": "Tab complete will insert the best matching suggestion when pressing tab.",
			"tabCompletion.off": "Disable tab completions.",
			"tabCompletion.onlySnippets": "Tab complete snippets when their prefix match. Works best when 'quickSuggestions' aren't enabled.",
			"tabCompletion": "Enables tab completions.",
			"suggest.filterGraceful": "Controls whether filtering and sorting suggestions accounts for small typos.",
			"suggest.localityBonus": "Controls whether sorting favours words that appear close to the cursor.",
			"suggest.snippetsPreventQuickSuggestions": "Control whether an active snippet prevents quick suggestions.",
			"selectionHighlight": "Controls whether the editor should highlight matches similar to the selection",
			"occurrencesHighlight": "Controls whether the editor should highlight semantic symbol occurrences.",
			"overviewRulerLanes": "Controls the number of decorations that can show up at the same position in the overview ruler.",
			"overviewRulerBorder": "Controls whether a border should be drawn around the overview ruler.",
			"cursorBlinking": "Control the cursor animation style.",
			"mouseWheelZoom": "Zoom the font of the editor when using mouse wheel and holding `Ctrl`.",
			"cursorStyle": "Controls the cursor style.",
			"cursorWidth": "Controls the width of the cursor when `#editor.cursorStyle#` is set to `line`.",
			"fontLigatures": "Enables/Disables font ligatures.",
			"hideCursorInOverviewRuler": "Controls whether the cursor should be hidden in the overview ruler.",
			"renderWhiteSpace.boundary": "Render whitespace characters except for single spaces between words.",
			"renderWhitespace": "Controls how the editor should render whitespace characters.",
			"renderControlCharacters": "Controls whether the editor should render control characters.",
			"renderIndentGuides": "Controls whether the editor should render indent guides.",
			"highlightActiveIndentGuide": "Controls whether the editor should highlight the active indent guide.",
			"renderLineHighlight.all": "Highlights both the gutter and the current line.",
			"renderLineHighlight": "Controls how the editor should render the current line highlight.",
			"codeLens": "Controls whether the editor shows CodeLens",
			"folding": "Controls whether the editor has code folding enabled",
			"foldingStrategy": "Controls the strategy for computing folding ranges. `auto` uses a language specific folding strategy, if available. `indentation` uses the indentation based folding strategy.",
			"showFoldingControls": "Controls whether the fold controls on the gutter are automatically hidden.",
			"matchBrackets": "Highlight matching brackets when one of them is selected.",
			"glyphMargin": "Controls whether the editor should render the vertical glyph margin. Glyph margin is mostly used for debugging.",
			"useTabStops": "Inserting and deleting whitespace follows tab stops.",
			"trimAutoWhitespace": "Remove trailing auto inserted whitespace.",
			"stablePeek": "Keep peek editors open even when double clicking their content or when hitting `Escape`.",
			"dragAndDrop": "Controls whether the editor should allow moving selections via drag and drop.",
			"accessibilitySupport.auto": "The editor will use platform APIs to detect when a Screen Reader is attached.",
			"accessibilitySupport.on": "The editor will be permanently optimised for usage with a Screen Reader.",
			"accessibilitySupport.off": "The editor will never be optimised for usage with a Screen Reader.",
			"accessibilitySupport": "Controls whether the editor should run in a mode where it is optimised for screen readers.",
			"showUnused": "Controls fading out of unused code.",
			"links": "Controls whether the editor should detect links and make them clickable.",
			"colorDecorators": "Controls whether the editor should render the inline colour decorators and colour picker.",
			"codeActions": "Enables the code action lightbulb in the editor.",
			"codeActionsOnSave.organizeImports": "Controls whether organise imports action should be run on file save.",
			"codeActionsOnSave": "Code action kinds to be run on save.",
			"codeActionsOnSaveTimeout": "Timeout in milliseconds after which the code actions that are run on save are cancelled.",
			"selectionClipboard": "Controls whether the Linux primary clipboard should be supported.",
			"sideBySide": "Controls whether the diff editor shows the diff side by side or inline.",
			"ignoreTrimWhitespace": "Controls whether the diff editor shows changes in leading or trailing whitespace as diffs.",
			"largeFileOptimizations": "Special handling for large files to disable certain memory intensive features.",
			"renderIndicators": "Controls whether the diff editor shows +/- indicators for added/removed changes."
		},
		"vs/editor/common/services/modelServiceImpl": {
			"diagAndSourceAndCodeMultiline": "[{0}]\n{1} [{2}]",
			"diagAndSourceMultiline": "[{0}]\n{1}",
			"diagAndSourceAndCode": "[{0}] {1} [{2}]",
			"diagAndSource": "[{0}] {1}"
		},
		"vs/code/electron-main/main": {
			"secondInstanceNoResponse": "Another instance of {0} is running but not responding",
			"secondInstanceNoResponseDetail": "Please close all other instances and try again.",
			"secondInstanceAdmin": "A second instance of {0} is already running as administrator.",
			"secondInstanceAdminDetail": "Please close the other instance and try again.",
			"close": "&&Close"
		},
		"vs/code/node/cliProcessMain": {
			"notFound": "Extension '{0}' not found.",
			"notInstalled": "Extension '{0}' is not installed.",
			"useId": "Make sure you use the full extension ID, including the publisher, eg: {0}",
			"successVsixInstall": "Extension '{0}' was successfully installed!",
			"cancelVsixInstall": "Cancelled installing Extension '{0}'.",
			"yes": "Yes",
			"no": "No",
			"cancelInstall": "Cancelled installing Extension '{0}'.",
			"alreadyInstalled": "Extension '{0}' is already installed.",
			"foundExtension": "Found '{0}' in the marketplace.",
			"installing": "Installing...",
			"successInstall": "Extension '{0}' v{1} was successfully installed!",
			"uninstalling": "Uninstalling {0}...",
			"successUninstall": "Extension '{0}' was successfully uninstalled!"
		},
		"vs/code/electron-browser/issue/issueReporterMain": {
			"hide": "hide",
			"show": "show",
			"previewOnGitHub": "Preview on GitHub",
			"loadingData": "Loading data...",
			"rateLimited": "GitHub query limit exceeded. Please wait.",
			"similarIssues": "Similar issues",
			"open": "Open",
			"closed": "Closed",
			"noSimilarIssues": "No similar issues found",
			"settingsSearchIssue": "Settings Search Issue",
			"bugReporter": "Bug Report",
			"featureRequest": "Feature Request",
			"performanceIssue": "Performance Issue",
			"stepsToReproduce": "Steps to Reproduce",
			"description": "Description",
			"expectedResults": "Expected Results",
			"pasteData": "We have written the needed data into your clipboard because it was too large to send. Please paste.",
			"disabledExtensions": "Extensions are disabled"
		},
		"vs/code/electron-browser/processExplorer/processExplorerMain": {
			"cpu": "CPU %",
			"memory": "Memory (MB)",
			"pid": "pid",
			"name": "Name",
			"killProcess": "Kill Process",
			"forceKillProcess": "Force Kill Process",
			"copy": "Copy",
			"copyAll": "Copy All"
		},
		"vs/code/electron-main/app": {},
		"vs/code/electron-main/logUploader": {
			"invalidEndpoint": "Invalid log uploader endpoint",
			"beginUploading": "Uploading...",
			"didUploadLogs": "Upload successful! Log file ID: {0}",
			"logUploadPromptHeader": "You are about to upload your session logs to a secure Microsoft endpoint that only Microsoft's members of the VS Code team can access.",
			"logUploadPromptBody": "Session logs may contain personal information such as full paths or file contents. Please review and redact your session log files here: '{0}'",
			"logUploadPromptBodyDetails": "By continuing you confirm that you have reviewed and redacted your session log files and that you agree to Microsoft using them to debug VS Code.",
			"logUploadPromptAcceptInstructions": "Please run code with '--upload-logs={0}' to proceed with upload",
			"postError": "Error posting logs: {0}",
			"parseError": "Error parsing response",
			"zipError": "Error zipping logs: {0}"
		},
		"vs/code/electron-browser/issue/issueReporterPage": {
			"completeInEnglish": "Please complete the form in English.",
			"issueTypeLabel": "This is a",
			"issueSourceLabel": "File on",
			"vscode": "Visual Studio Code",
			"extension": "An Extension",
			"disableExtensions": "disabling all extensions and reloading the window",
			"chooseExtension": "Extension",
			"issueTitleLabel": "Title",
			"issueTitleRequired": "Please enter a title.",
			"titleLengthValidation": "The title is too long.",
			"details": "Please enter details.",
			"show": "show",
			"sendSearchedExtensions": "Send searched extensions ({0})",
			"sendSettingsSearchDetails": "Send settings search details ({0})"
		},
		"vs/code/electron-main/windows": {
			"pathNotExistTitle": "Path does not exist",
			"pathNotExistDetail": "The path '{0}' does not seem to exist anymore on disk.",
			"ok": "OK",
			"appStalled": "The window is no longer responding",
			"appStalledDetail": "You can reopen or close the window or keep waiting.",
			"appCrashed": "The window has crashed",
			"appCrashedDetail": "We are sorry for the inconvenience! You can reopen the window to continue where you left off.",
			"open": "Open",
			"openFolder": "Open Folder",
			"openFile": "Open File",
			"workspaceOpenedMessage": "Unable to save workspace '{0}'",
			"workspaceOpenedDetail": "The workspace is already opened in another window. Please close that window first and then try again.",
			"openWorkspaceTitle": "Open Workspace",
			"cancel": "Cancel",
			"saveWorkspaceMessage": "Do you want to save your workspace configuration as a file?",
			"saveWorkspaceDetail": "Save your workspace if you plan to open it again.",
			"saveWorkspace": "Save Workspace"
		},
		"vs/code/electron-main/auth": {
			"authRequire": "Proxy Authentication Required",
			"proxyauth": "The proxy {0} requires authentication."
		},
		"vs/code/electron-main/window": {
			"hiddenMenuBar": "You can still access the menu bar by pressing the Alt-key."
		},
		"vs/editor/contrib/bracketMatching/bracketMatching": {
			"overviewRulerBracketMatchForeground": "Overview ruler marker colour for matching brackets.",
			"smartSelect.jumpBracket": "Go to Bracket",
			"smartSelect.selectToBracket": "Select to Bracket"
		},
		"vs/editor/contrib/caretOperations/caretOperations": {
			"caret.moveLeft": "Move Caret Left",
			"caret.moveRight": "Move Caret Right"
		},
		"vs/editor/contrib/caretOperations/transpose": {
			"transposeLetters.label": "Transpose Letters"
		},
		"vs/editor/contrib/clipboard/clipboard": {
			"actions.clipboard.cutLabel": "Cut",
			"miCut": "Cu&&t",
			"actions.clipboard.copyLabel": "Copy",
			"miCopy": "&&Copy",
			"actions.clipboard.pasteLabel": "Paste",
			"miPaste": "&&Paste",
			"actions.clipboard.copyWithSyntaxHighlightingLabel": "Copy With Syntax Highlighting"
		},
		"vs/editor/contrib/comment/comment": {
			"comment.line": "Toggle Line Comment",
			"miToggleLineComment": "&&Toggle Line Comment",
			"comment.line.add": "Add Line Comment",
			"comment.line.remove": "Remove Line Comment",
			"comment.block": "Toggle Block Comment",
			"miToggleBlockComment": "Toggle &&Block Comment"
		},
		"vs/editor/contrib/contextmenu/contextmenu": {
			"action.showContextMenu.label": "Show Editor Context Menu"
		},
		"vs/editor/contrib/cursorUndo/cursorUndo": {
			"cursor.undo": "Soft Undo"
		},
		"vs/editor/contrib/find/findController": {
			"startFindAction": "Find",
			"miFind": "&&Find",
			"startFindWithSelectionAction": "Find With Selection",
			"findNextMatchAction": "Find Next",
			"findPreviousMatchAction": "Find Previous",
			"nextSelectionMatchFindAction": "Find Next Selection",
			"previousSelectionMatchFindAction": "Find Previous Selection",
			"startReplace": "Replace",
			"miReplace": "&&Replace"
		},
		"vs/editor/contrib/folding/folding": {
			"unfoldAction.label": "Unfold",
			"unFoldRecursivelyAction.label": "Unfold Recursively",
			"foldAction.label": "Fold",
			"foldRecursivelyAction.label": "Fold Recursively",
			"foldAllBlockComments.label": "Fold All Block Comments",
			"foldAllMarkerRegions.label": "Fold All Regions",
			"unfoldAllMarkerRegions.label": "Unfold All Regions",
			"foldAllAction.label": "Fold All",
			"unfoldAllAction.label": "Unfold All",
			"foldLevelAction.label": "Fold Level {0}"
		},
		"vs/editor/contrib/fontZoom/fontZoom": {
			"EditorFontZoomIn.label": "Editor Font Zoom In",
			"EditorFontZoomOut.label": "Editor Font Zoom Out",
			"EditorFontZoomReset.label": "Editor Font Zoom Reset"
		},
		"vs/editor/contrib/format/formatActions": {
			"hint11": "Made 1 formatting edit on line {0}",
			"hintn1": "Made {0} formatting edits on line {1}",
			"hint1n": "Made 1 formatting edit between lines {0} and {1}",
			"hintnn": "Made {0} formatting edits between lines {1} and {2}",
			"no.provider": "There is no formatter for '{0}'-files installed.",
			"formatDocument.label": "Format Document",
			"no.documentprovider": "There is no document formatter for '{0}'-files installed.",
			"formatSelection.label": "Format Selection",
			"no.selectionprovider": "There is no selection formatter for '{0}'-files installed."
		},
		"vs/editor/contrib/goToDefinition/goToDefinitionCommands": {
			"noResultWord": "No definition found for '{0}'",
			"generic.noResults": "No definition found",
			"meta.title": " – {0} definitions",
			"actions.goToDecl.label": "Go to Definition",
			"actions.goToDeclToSide.label": "Open Definition to the Side",
			"actions.previewDecl.label": "Peek Definition",
			"goToImplementation.noResultWord": "No implementation found for '{0}'",
			"goToImplementation.generic.noResults": "No implementation found",
			"meta.implementations.title": " – {0} implementations",
			"actions.goToImplementation.label": "Go to Implementation",
			"actions.peekImplementation.label": "Peek Implementation",
			"goToTypeDefinition.noResultWord": "No type definition found for '{0}'",
			"goToTypeDefinition.generic.noResults": "No type definition found",
			"meta.typeDefinitions.title": " – {0} type definitions",
			"actions.goToTypeDefinition.label": "Go to Type Definition",
			"actions.peekTypeDefinition.label": "Peek Type Definition",
			"miGotoDefinition": "Go to &&Definition",
			"miGotoTypeDefinition": "Go to &&Type Definition",
			"miGotoImplementation": "Go to &&Implementation"
		},
		"vs/editor/contrib/goToDefinition/goToDefinitionMouse": {
			"multipleResults": "Click to show {0} definitions."
		},
		"vs/editor/contrib/gotoError/gotoError": {
			"markerAction.next.label": "Go to Next Problem (Error, Warning, Info)",
			"markerAction.previous.label": "Go to Previous Problem (Error, Warning, Info)",
			"markerAction.nextInFiles.label": "Go to Next Problem in Files (Error, Warning, Info)",
			"markerAction.previousInFiles.label": "Go to Previous Problem in Files (Error, Warning, Info)"
		},
		"vs/editor/contrib/hover/hover": {
			"showHover": "Show Hover"
		},
		"vs/editor/contrib/inPlaceReplace/inPlaceReplace": {
			"InPlaceReplaceAction.previous.label": "Replace with Previous Value",
			"InPlaceReplaceAction.next.label": "Replace with Next Value"
		},
		"vs/editor/contrib/linesOperations/linesOperations": {
			"lines.copyUp": "Copy Line Up",
			"miCopyLinesUp": "&&Copy Line Up",
			"lines.copyDown": "Copy Line Down",
			"miCopyLinesDown": "Co&&py Line Down",
			"lines.moveUp": "Move Line Up",
			"miMoveLinesUp": "Mo&&ve Line Up",
			"lines.moveDown": "Move Line Down",
			"miMoveLinesDown": "Move &&Line Down",
			"lines.sortAscending": "Sort Lines Ascending",
			"lines.sortDescending": "Sort Lines Descending",
			"lines.trimTrailingWhitespace": "Trim Trailing Whitespace",
			"lines.delete": "Delete Line",
			"lines.indent": "Indent Line",
			"lines.outdent": "Outdent Line",
			"lines.insertBefore": "Insert Line Above",
			"lines.insertAfter": "Insert Line Below",
			"lines.deleteAllLeft": "Delete All Left",
			"lines.deleteAllRight": "Delete All Right",
			"lines.joinLines": "Join Lines",
			"editor.transpose": "Transpose characters around the cursor",
			"editor.transformToUppercase": "Transform to Uppercase",
			"editor.transformToLowercase": "Transform to Lowercase"
		},
		"vs/editor/contrib/links/links": {
			"links.navigate.mac": "Cmd + click to follow link",
			"links.navigate": "Ctrl + click to follow link",
			"links.command.mac": "Cmd + click to execute command",
			"links.command": "Ctrl + click to execute command",
			"links.navigate.al.mac": "Option + click to follow link",
			"links.navigate.al": "Alt + click to follow link",
			"links.command.al.mac": "Option + click to execute command",
			"links.command.al": "Alt + click to execute command",
			"invalid.url": "Failed to open this link because it is not well-formed: {0}",
			"missing.url": "Failed to open this link because its target is missing.",
			"label": "Open Link"
		},
		"vs/editor/contrib/multicursor/multicursor": {
			"mutlicursor.insertAbove": "Add Cursor Above",
			"miInsertCursorAbove": "&&Add Cursor Above",
			"mutlicursor.insertBelow": "Add Cursor Below",
			"miInsertCursorBelow": "A&&dd Cursor Below",
			"mutlicursor.insertAtEndOfEachLineSelected": "Add Cursors to Line Ends",
			"miInsertCursorAtEndOfEachLineSelected": "Add C&&ursors to Line Ends",
			"addSelectionToNextFindMatch": "Add Selection To Next Find Match",
			"miAddSelectionToNextFindMatch": "Add &&Next Occurrence",
			"addSelectionToPreviousFindMatch": "Add Selection To Previous Find Match",
			"miAddSelectionToPreviousFindMatch": "Add P&&revious Occurrence",
			"moveSelectionToNextFindMatch": "Move Last Selection To Next Find Match",
			"moveSelectionToPreviousFindMatch": "Move Last Selection To Previous Find Match",
			"selectAllOccurrencesOfFindMatch": "Select All Occurrences of Find Match",
			"miSelectHighlights": "Select All &&Occurrences",
			"changeAll.label": "Change All Occurrences"
		},
		"vs/editor/contrib/parameterHints/parameterHints": {
			"parameterHints.trigger.label": "Trigger Parameter Hints"
		},
		"vs/editor/contrib/referenceSearch/referenceSearch": {
			"meta.titleReference": " – {0} references",
			"references.action.label": "Find All References"
		},
		"vs/editor/contrib/rename/rename": {
			"no result": "No result.",
			"resolveRenameLocationFailed": "An unknown error occurred while resolving rename location",
			"aria": "Successfully renamed '{0}' to '{1}'. Summary: {2}",
			"rename.failed": "Rename failed to execute.",
			"rename.label": "Rename Symbol"
		},
		"vs/editor/contrib/smartSelect/smartSelect": {
			"smartSelect.grow": "Expand Select",
			"miSmartSelectGrow": "&&Expand Selection",
			"smartSelect.shrink": "Shrink Select",
			"miSmartSelectShrink": "&&Shrink Selection"
		},
		"vs/editor/contrib/suggest/suggestController": {
			"arai.alert.snippet": "Accepting '{0}' did insert the following text: {1}",
			"suggest.trigger.label": "Trigger Suggest"
		},
		"vs/editor/contrib/toggleTabFocusMode/toggleTabFocusMode": {
			"toggle.tabMovesFocus": "Toggle Tab Key Moves Focus",
			"toggle.tabMovesFocus.on": "Pressing Tab will now move focus to the next focusable element",
			"toggle.tabMovesFocus.off": "Pressing Tab will now insert the tab character"
		},
		"vs/editor/contrib/wordHighlighter/wordHighlighter": {
			"wordHighlight": "Background colour of a symbol during read-access, like reading a variable. The colour must not be opaque to not hide underlying decorations.",
			"wordHighlightStrong": "Background colour of a symbol during write-access, like writing to a variable. The colour must not be opaque to not hide underlying decorations.",
			"wordHighlightBorder": "Border colour of a symbol during read-access, like reading a variable.",
			"wordHighlightStrongBorder": "Border colour of a symbol during write-access, like writing to a variable.",
			"overviewRulerWordHighlightForeground": "Overview ruler marker colour for symbol highlights. The colour must not be opaque to not hide underlying decorations.",
			"overviewRulerWordHighlightStrongForeground": "Overview ruler marker colour for write-access symbol highlights. The colour must not be opaque to not hide underlying decorations.",
			"wordHighlight.next.label": "Go to Next Symbol Highlight",
			"wordHighlight.previous.label": "Go to Previous Symbol Highlight",
			"wordHighlight.trigger.label": "Trigger Symbol Highlight"
		},
		"vs/editor/contrib/codeAction/codeActionCommands": {
			"quickFixWithKb": "Show Fixes ({0})",
			"quickFix": "Show Fixes",
			"quickfix.trigger.label": "Quick Fix...",
			"editor.action.quickFix.noneMessage": "No code actions available",
			"refactor.label": "Refactor...",
			"editor.action.refactor.noneMessage": "No refactorings available",
			"source.label": "Source Action...",
			"editor.action.source.noneMessage": "No source actions available",
			"organizeImports.label": "Organise Imports",
			"editor.action.organize.noneMessage": "No organise imports action available"
		},
		"vs/editor/contrib/find/findWidget": {
			"label.find": "Find",
			"placeholder.find": "Find",
			"label.previousMatchButton": "Previous match",
			"label.nextMatchButton": "Next match",
			"label.toggleSelectionFind": "Find in selection",
			"label.closeButton": "Close",
			"label.replace": "Replace",
			"placeholder.replace": "Replace",
			"label.replaceButton": "Replace",
			"label.replaceAllButton": "Replace All",
			"label.toggleReplaceButton": "Toggle Replace mode",
			"title.matchesCountLimit": "Only the first {0} results are highlighted, but all find operations work on the entire text.",
			"label.matchesLocation": "{0} of {1}",
			"label.noResults": "No Results"
		},
		"vs/editor/contrib/message/messageController": {
			"editor.readonly": "Cannot edit in read-only editor"
		},
		"vs/editor/contrib/referenceSearch/peekViewWidget": {
			"label.close": "Close"
		},
		"vs/editor/contrib/referenceSearch/referencesController": {
			"labelLoading": "Loading..."
		},
		"vs/editor/contrib/referenceSearch/referencesModel": {
			"aria.oneReference": "symbol in {0} on line {1} at column {2}",
			"aria.fileReferences.1": "1 symbol in {0}, full path {1}",
			"aria.fileReferences.N": "{0} symbols in {1}, full path {2}",
			"aria.result.0": "No results found",
			"aria.result.1": "Found 1 symbol in {0}",
			"aria.result.n1": "Found {0} symbols in {1}",
			"aria.result.nm": "Found {0} symbols in {1} files"
		},
		"vs/editor/contrib/gotoError/gotoErrorWidget": {
			"title.wo_source": "({0}/{1})",
			"editorMarkerNavigationError": "Editor marker navigation widget error colour.",
			"editorMarkerNavigationWarning": "Editor marker navigation widget warning colour.",
			"editorMarkerNavigationInfo": "Editor marker navigation widget info colour.",
			"editorMarkerNavigationBackground": "Editor marker navigation widget background."
		},
		"vs/editor/contrib/hover/modesContentHover": {
			"modesContentHover.loading": "Loading..."
		},
		"vs/editor/contrib/parameterHints/parameterHintsWidget": {
			"hint": "{0}, hint"
		},
		"vs/editor/contrib/referenceSearch/referencesWidget": {
			"referencesFailre": "Failed to resolve file.",
			"referencesCount": "{0} references",
			"referenceCount": "{0} reference",
			"missingPreviewMessage": "no preview available",
			"treeAriaLabel": "References",
			"noResults": "No results",
			"peekView.alternateTitle": "References",
			"peekViewTitleBackground": "Background colour of the peek view title area.",
			"peekViewTitleForeground": "Colour of the peek view title.",
			"peekViewTitleInfoForeground": "Colour of the peek view title info.",
			"peekViewBorder": "Colour of the peek view borders and arrow.",
			"peekViewResultsBackground": "Background colour of the peek view result list.",
			"peekViewResultsMatchForeground": "Foreground colour for line nodes in the peek view result list.",
			"peekViewResultsFileForeground": "Foreground colour for file nodes in the peek view result list.",
			"peekViewResultsSelectionBackground": "Background colour of the selected entry in the peek view result list.",
			"peekViewResultsSelectionForeground": "Foreground colour of the selected entry in the peek view result list.",
			"peekViewEditorBackground": "Background colour of the peek view editor.",
			"peekViewEditorGutterBackground": "Background colour of the gutter in the peek view editor.",
			"peekViewResultsMatchHighlight": "Match highlight colour in the peek view result list.",
			"peekViewEditorMatchHighlight": "Match highlight colour in the peek view editor.",
			"peekViewEditorMatchHighlightBorder": "Match highlight border in the peek view editor."
		},
		"vs/editor/contrib/rename/renameInputField": {
			"renameAriaLabel": "Rename input. Type new name and press Enter to commit."
		},
		"vs/editor/contrib/suggest/suggestWidget": {
			"editorSuggestWidgetBackground": "Background colour of the suggest widget.",
			"editorSuggestWidgetBorder": "Border colour of the suggest widget.",
			"editorSuggestWidgetForeground": "Foreground colour of the suggest widget.",
			"editorSuggestWidgetSelectedBackground": "Background colour of the selected entry in the suggest widget.",
			"editorSuggestWidgetHighlightForeground": "Colour of the match highlights in the suggest widget.",
			"readMore": "Read More...{0}",
			"readLess": "Read less...{0}",
			"suggestWidget.loading": "Loading...",
			"suggestWidget.noSuggestions": "No suggestions.",
			"suggestionAriaAccepted": "{0}, accepted",
			"ariaCurrentSnippetSuggestion": "{0}, snippet suggestion",
			"ariaCurrentSuggestion": "{0}, suggestion",
			"ariaCurrentSnippeSuggestionReadDetails": "{0}, snippet suggestion. Reading details. {1}",
			"ariaCurrenttSuggestionReadDetails": "{0}, suggestion. Reading details. {1}",
			"ariaCurrentSnippetSuggestionWithDetails": "{0}, snippet suggestion, has details",
			"ariaCurrentSuggestionWithDetails": "{0}, suggestion, has details"
		},
		"vs/editor/contrib/find/simpleFindWidget": {
			"label.find": "Find",
			"placeholder.find": "Find",
			"label.previousMatchButton": "Previous match",
			"label.nextMatchButton": "Next match",
			"label.closeButton": "Close"
		},
		"vs/editor/contrib/snippet/snippetVariables": {
			"Sunday": "Sunday",
			"Monday": "Monday",
			"Tuesday": "Tuesday",
			"Wednesday": "Wednesday",
			"Thursday": "Thursday",
			"Friday": "Friday",
			"Saturday": "Saturday",
			"SundayShort": "Sun",
			"MondayShort": "Mon",
			"TuesdayShort": "Tue",
			"WednesdayShort": "Wed",
			"ThursdayShort": "Thu",
			"FridayShort": "Fri",
			"SaturdayShort": "Sat",
			"January": "January",
			"February": "February",
			"March": "March",
			"April": "April",
			"May": "May",
			"June": "June",
			"July": "July",
			"August": "August",
			"September": "September",
			"October": "October",
			"November": "November",
			"December": "December",
			"JanuaryShort": "Jan",
			"FebruaryShort": "Feb",
			"MarchShort": "Mar",
			"AprilShort": "Apr",
			"MayShort": "May",
			"JuneShort": "Jun",
			"JulyShort": "Jul",
			"AugustShort": "Aug",
			"SeptemberShort": "Sep",
			"OctoberShort": "Oct",
			"NovemberShort": "Nov",
			"DecemberShort": "Dec"
		},
		"vs/editor/contrib/documentSymbols/outlineTree": {
			"title.template": "{0} ({1})",
			"provider": "Outline Provider",
			"1.problem": "1 problem in this element",
			"N.problem": "{0} problems in this element",
			"deep.problem": "Contains elements with problems",
			"Array": "array",
			"Boolean": "boolean",
			"Class": "class",
			"Constant": "constant",
			"Constructor": "constructor",
			"Enum": "enumeration",
			"EnumMember": "enumeration member",
			"Event": "event",
			"Field": "field",
			"File": "file",
			"Function": "function",
			"Interface": "interface",
			"Key": "key",
			"Method": "method",
			"Module": "module",
			"Namespace": "namespace",
			"Null": "null",
			"Number": "number",
			"Object": "object",
			"Operator": "operator",
			"Package": "package",
			"Property": "property",
			"String": "string",
			"Struct": "struct",
			"TypeParameter": "type parameter",
			"Variable": "variable"
		},
		"vs/editor/contrib/indentation/indentation": {
			"indentationToSpaces": "Convert Indentation to Spaces",
			"indentationToTabs": "Convert Indentation to Tabs",
			"configuredTabSize": "Configured Tab Size",
			"selectTabWidth": "Select Tab Size for Current File",
			"indentUsingTabs": "Indent Using Tabs",
			"indentUsingSpaces": "Indent Using Spaces",
			"detectIndentation": "Detect Indentation from Content",
			"editor.reindentlines": "Reindent Lines",
			"editor.reindentselectedlines": "Reindent Selected Lines"
		},
		"vs/platform/environment/node/argv": {
			"gotoValidation": "Arguments in `--goto` mode should be in the format of `FILE(:LINE(:CHARACTER))`.",
			"diff": "Compare two files with each other.",
			"add": "Add folder(s) to the last active window.",
			"goto": "Open a file at the path on the specified line and character position.",
			"newWindow": "Force to open a new window.",
			"reuseWindow": "Force to open a file or folder in an already opened window.",
			"wait": "Wait for the files to be closed before returning.",
			"locale": "The locale to use (e.g. en-US or zh-TW).",
			"userDataDir": "Specifies the directory that user data is kept in. Can be used to open multiple distinct instances of Code.",
			"version": "Print version.",
			"help": "Print usage.",
			"extensionHomePath": "Set the root path for extensions.",
			"listExtensions": "List the installed extensions.",
			"showVersions": "Show versions of installed extensions, when using --list-extension.",
			"uninstallExtension": "Uninstalls an extension.",
			"installExtension": "Installs or updates the extension. Use `--force` argument to avoid prompts.",
			"experimentalApis": "Enables proposed API features for extensions. Can receive one or more extension IDs to enable individually.",
			"verbose": "Print verbose output (implies --wait).",
			"log": "Log level to use. Default is 'info'. Allowed values are 'critical', 'error', 'warn', 'info', 'debug', 'trace', 'off'.",
			"status": "Print process usage and diagnostics information.",
			"performance": "Start with the 'Developer: Startup Performance' command enabled.",
			"prof-startup": "Run CPU profiler during startup",
			"disableExtensions": "Disable all installed extensions.",
			"disableExtension": "Disable an extension.",
			"inspect-extensions": "Allow debugging and profiling of extensions. Check the developer tools for the connection URI.",
			"inspect-brk-extensions": "Allow debugging and profiling of extensions with the extension host being paused after start. Check the developer tools for the connection URI.",
			"disableGPU": "Disable GPU hardware acceleration.",
			"uploadLogs": "Uploads logs from current session to a secure endpoint.",
			"maxMemory": "Max memory size for a window (in Mbytes).",
			"usage": "Usage",
			"options": "options",
			"paths": "paths",
			"stdinWindows": "To read output from another program, append '-' (e.g. 'echo Hello World | {0} -')",
			"stdinUnix": "To read from stdin, append '-' (e.g. 'ps aux | grep code | {0} -')",
			"optionsUpperCase": "Options",
			"extensionsManagement": "Extensions Management",
			"troubleshooting": "Troubleshooting"
		},
		"vs/platform/request/node/request": {
			"httpConfigurationTitle": "HTTP",
			"proxy": "The proxy setting to use. If not set will be taken from the http_proxy and https_proxy environment variables.",
			"strictSSL": "Controls whether the proxy server certificate should be verified against the list of supplied CAs.",
			"proxyAuthorization": "The value to send as the 'Proxy-Authorization' header for every network request.",
			"systemProxyOff": "Do not use system proxy configuration.",
			"systemProxyOn": "Use system proxy configuration if not specified in the request options.",
			"systemProxyForce": "Always use system proxy configuration.",
			"systemProxy": "Experimental setting: Use the system proxy configuration."
		},
		"vs/platform/history/electron-main/historyMainService": {
			"newWindow": "New Window",
			"newWindowDesc": "Opens a new window",
			"recentFolders": "Recent Workspaces",
			"folderDesc": "{0} {1}",
			"codeWorkspace": "Code Workspace"
		},
		"vs/platform/workspaces/common/workspaces": {
			"codeWorkspace": "Code Workspace"
		},
		"vs/platform/dialogs/common/dialogs": {
			"moreFile": "...1 additional file not shown",
			"moreFiles": "...{0} additional files not shown"
		},
		"vs/platform/dialogs/node/dialogService": {
			"ok": "Ok",
			"cancel": "Cancel"
		},
		"vs/platform/label/common/label": {
			"untitledWorkspace": "Untitled (Workspace)",
			"workspaceNameVerbose": "{0} (Workspace)",
			"workspaceName": "{0} (Workspace)"
		},
		"vs/platform/extensionManagement/common/extensionManagement": {
			"extensions": "Extensions",
			"preferences": "Preferences"
		},
		"vs/platform/extensionManagement/node/extensionManagementService": {
			"invalidManifest": "Extension invalid: package.json is not a JSON file.",
			"incompatible": "Unable to install Extension '{0}' as it is not compatible with Code '{1}'.",
			"restartCode": "Please restart Code before reinstalling {0}.",
			"installingOutdatedExtension": "A newer version of this extension is already installed. Would you like to override this with the older version?",
			"override": "Override",
			"cancel": "Cancel",
			"MarketPlaceDisabled": "Marketplace is not enabled",
			"removeError": "Error while removing the extension: {0}. Please Quit and Start VS Code before trying again.",
			"Not a Marketplace extension": "Only Marketplace Extensions can be reinstalled",
			"malicious extension": "Can't install extension since it was reported to be problematic.",
			"notFoundCompatibleDependency": "Unable to install because, the depending extension '{0}' compatible with current version '{1}' of VS Code is not found.",
			"quitCode": "Unable to install the extension. Please Quit and Start VS Code before reinstalling.",
			"exitCode": "Unable to install the extension. Please Exit and Start VS Code before reinstalling.",
			"errorDeleting": "Unable to delete the existing folder '{0}' while installing the extension '{1}'. Please delete the folder manually and try again",
			"renameError": "Unknown error while renaming {0} to {1}",
			"notInstalled": "Extension '{0}' is not installed.",
			"singleDependentError": "Cannot uninstall extension '{0}'. Extension '{1}' depends on this.",
			"twoDependentsError": "Cannot uninstall extension '{0}'. Extensions '{1}' and '{2}' depend on this.",
			"multipleDependentsError": "Cannot uninstall extension '{0}'. Extensions '{1}', '{2}' and others depend on this.",
			"notExists": "Could not find extension"
		},
		"vs/platform/telemetry/common/telemetryService": {
			"telemetryConfigurationTitle": "Telemetry",
			"telemetry.enableTelemetry": "Enable usage data and errors to be sent to a Microsoft online service."
		},
		"vs/platform/configuration/common/configurationRegistry": {
			"defaultConfigurations.title": "Default Configuration Overrides",
			"overrideSettings.description": "Configure editor settings to be overridden for {0} language.",
			"overrideSettings.defaultDescription": "Configure editor settings to be overridden for a language.",
			"config.property.languageDefault": "Cannot register '{0}'. This matches property pattern '\\\\[.*\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.",
			"config.property.duplicate": "Cannot register '{0}'. This property is already registered."
		},
		"vs/platform/node/minimalTranslations": {
			"showLanguagePackExtensions": "Search language packs in the Marketplace to change the display language to {0}.",
			"searchMarketplace": "Search Marketplace",
			"installAndRestartMessage": "Install language pack to change the display language to {0}.",
			"installAndRestart": "Install and Restart"
		},
		"vs/platform/list/browser/listService": {
			"workbenchConfigurationTitle": "Workbench",
			"multiSelectModifier.ctrlCmd": "Maps to `Control` on Windows and Linux and to `Command` on macOS.",
			"multiSelectModifier.alt": "Maps to `Alt` on Windows and Linux and to `Option` on macOS.",
			"multiSelectModifier": "The modifier to be used to add an item in trees and lists to a multi-selection with the mouse (for example in the explorer, open editors and scm view). The 'Open to Side' mouse gestures - if supported - will adapt such that they do not conflict with the multiselect modifier.",
			"openModeModifier": "Controls how to open items in trees and lists using the mouse (if supported). For parents with children in trees, this setting will control if a single click expands the parent or a double click. Note that some trees and lists might choose to ignore this setting if it is not applicable. ",
			"horizontalScrolling setting": "Controls whether trees support horizontal scrolling in the workbench."
		},
		"vs/platform/theme/common/colorRegistry": {
			"schema.colors": "Colours used in the workbench.",
			"foreground": "Overall foreground colour. This colour is only used if not overridden by a component.",
			"errorForeground": "Overall foreground colour for error messages. This colour is only used if not overridden by a component.",
			"descriptionForeground": "Foreground colour for description text providing additional information, for example for a label.",
			"focusBorder": "Overall border colour for focused elements. This colour is only used if not overridden by a component.",
			"contrastBorder": "An extra border around elements to separate them from others for greater contrast.",
			"activeContrastBorder": "An extra border around active elements to separate them from others for greater contrast.",
			"selectionBackground": "The background colour of text selections in the workbench (e.g. for input fields or text areas). Note that this does not apply to selections within the editor.",
			"textSeparatorForeground": "Colour for text separators.",
			"textLinkForeground": "Foreground colour for links in text.",
			"textLinkActiveForeground": "Foreground colour for links in text when clicked on and on mouse hover.",
			"textPreformatForeground": "Foreground colour for preformatted text segments.",
			"textBlockQuoteBackground": "Background colour for block quotes in text.",
			"textBlockQuoteBorder": "Border colour for block quotes in text.",
			"textCodeBlockBackground": "Background colour for code blocks in text.",
			"widgetShadow": "Shadow colour of widgets such as find/replace inside the editor.",
			"inputBoxBackground": "Input box background.",
			"inputBoxForeground": "Input box foreground.",
			"inputBoxBorder": "Input box border.",
			"inputBoxActiveOptionBorder": "Border colour of activated options in input fields.",
			"inputPlaceholderForeground": "Input box foreground colour for placeholder text.",
			"inputValidationInfoBackground": "Input validation background colour for information severity.",
			"inputValidationInfoForeground": "Input validation foreground color for information severity.",
			"inputValidationInfoBorder": "Input validation border colour for information severity.",
			"inputValidationWarningBackground": "Input validation background colour for warning severity.",
			"inputValidationWarningForeground": "Input validation foreground colour for warning severity.",
			"inputValidationWarningBorder": "Input validation border colour for warning severity.",
			"inputValidationErrorBackground": "Input validation background colour for error severity.",
			"inputValidationErrorForeground": "Input validation foreground color for error severity.",
			"inputValidationErrorBorder": "Input validation border colour for error severity.",
			"dropdownBackground": "Dropdown background.",
			"dropdownListBackground": "Dropdown list background.",
			"dropdownForeground": "Dropdown foreground.",
			"dropdownBorder": "Dropdown border.",
			"listFocusBackground": "List/Tree background colour for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.",
			"listFocusForeground": "List/Tree foreground colour for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.",
			"listActiveSelectionBackground": "List/Tree background colour for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.",
			"listActiveSelectionForeground": "List/Tree foreground colour for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.",
			"listInactiveSelectionBackground": "List/Tree background colour for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.",
			"listInactiveSelectionForeground": "List/Tree foreground colour for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.",
			"listInactiveFocusBackground": "List/Tree background colour for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.",
			"listHoverBackground": "List/Tree background when hovering over items using the mouse.",
			"listHoverForeground": "List/Tree foreground when hovering over items using the mouse.",
			"listDropBackground": "List/Tree drag and drop background when moving items around using the mouse.",
			"highlight": "List/Tree foreground colour of the match highlights when searching inside the list/tree.",
			"invalidItemForeground": "List/Tree foreground colour for invalid items, for example an unresolved root in explorer.",
			"listErrorForeground": "Foreground colour of list items containing errors.",
			"listWarningForeground": "Foreground colour of list items containing warnings.",
			"pickerGroupForeground": "Quick picker colour for grouping labels.",
			"pickerGroupBorder": "Quick picker colour for grouping borders.",
			"buttonForeground": "Button foreground colour.",
			"buttonBackground": "Button background colour.",
			"buttonHoverBackground": "Button background colour when hovering.",
			"badgeBackground": "Badge background colour. Badges are small information labels, e.g. for search results count.",
			"badgeForeground": "Badge foreground colour. Badges are small information labels, e.g. for search results count.",
			"scrollbarShadow": "Scrollbar shadow to indicate that the view is scrolled.",
			"scrollbarSliderBackground": "Scrollbar slider background colour.",
			"scrollbarSliderHoverBackground": "Scrollbar slider background colour when hovering.",
			"scrollbarSliderActiveBackground": "Scrollbar slider background colour when clicked on.",
			"progressBarBackground": "Background colour of the progress bar that can show for long running operations.",
			"menuBorder": "Border colour of menus.",
			"menuForeground": "Foreground colour of menu items.",
			"menuBackground": "Background colour of menu items.",
			"menuSelectionForeground": "Foreground colour of the selected menu item in menus.",
			"menuSelectionBackground": "Background colour of the selected menu item in menus.",
			"menuSelectionBorder": "Border colour of the selected menu item in menus.",
			"menuSeparatorBackground": "Colour of a separator menu item in menus.",
			"editorBackground": "Editor background colour.",
			"editorForeground": "Editor default foreground colour.",
			"editorWidgetBackground": "Background colour of editor widgets, such as find/replace.",
			"editorWidgetBorder": "Border colour of editor widgets. The colour is only used if the widget chooses to have a border and if the colour is not overridden by a widget.",
			"editorWidgetResizeBorder": "Border colour of the resize bar of editor widgets. The colour is only used if the widget chooses to have a resize border and if the colour is not overridden by a widget.",
			"editorSelectionBackground": "Colour of the editor selection.",
			"editorSelectionForeground": "Colour of the selected text for high contrast.",
			"editorInactiveSelection": "Colour of the selection in an inactive editor. The colour must not be opaque to not hide underlying decorations.",
			"editorSelectionHighlight": "Colour for regions with the same content as the selection. The colour must not be opaque to not hide underlying decorations.",
			"editorSelectionHighlightBorder": "Border colour for regions with the same content as the selection.",
			"editorFindMatch": "Colour of the current search match.",
			"findMatchHighlight": "Colour of the other search matches. The colour must not be opaque to not hide underlying decorations.",
			"findRangeHighlight": "Colour of the range limiting the search. The colour must not be opaque to not hide underlying decorations.",
			"editorFindMatchBorder": "Border colour of the current search match.",
			"findMatchHighlightBorder": "Border colour of the other search matches.",
			"findRangeHighlightBorder": "Border colour of the range limiting the search. The colour must not be opaque to not hide underlying decorations.",
			"hoverHighlight": "Highlight below the word for which a hover is shown. The colour must not be opaque to not hide underlying decorations.",
			"hoverBackground": "Background colour of the editor hover.",
			"hoverBorder": "Border colour of the editor hover.",
			"activeLinkForeground": "Colour of active links.",
			"diffEditorInserted": "Background colour for text that got inserted. The colour must not be opaque to not hide underlying decorations.",
			"diffEditorRemoved": "Background colour for text that got removed. The colour must not be opaque to not hide underlying decorations.",
			"diffEditorInsertedOutline": "Outline colour for the text that got inserted.",
			"diffEditorRemovedOutline": "Outline colour for text that got removed.",
			"diffEditorBorder": "Border colour between the two text editors.",
			"snippetTabstopHighlightBackground": "Highlight background colour of a snippet tabstop.",
			"snippetTabstopHighlightBorder": "Highlight border colour of a snippet tabstop.",
			"snippetFinalTabstopHighlightBackground": "Highlight background colour of the final tabstop of a snippet.",
			"snippetFinalTabstopHighlightBorder": "Highlight border colour of the final stabstop of a snippet.",
			"breadcrumbsFocusForeground": "Colour of focused breadcrumb items.",
			"breadcrumbsBackground": "Background colour of breadcrumb items.",
			"breadcrumbsSelectedForegound": "Colour of selected breadcrumb items.",
			"breadcrumbsSelectedBackground": "Background colour of breadcrumb item picker.",
			"mergeCurrentHeaderBackground": "Current header background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeCurrentContentBackground": "Current content background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeIncomingHeaderBackground": "Incoming header background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeIncomingContentBackground": "Incoming content background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeCommonHeaderBackground": "Common ancestor header background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeCommonContentBackground": "Common ancestor content background in inline merge-conflicts. The colour must not be opaque to not hide underlying decorations.",
			"mergeBorder": "Border colour on headers and the splitter in inline merge-conflicts.",
			"overviewRulerCurrentContentForeground": "Current overview ruler foreground for inline merge-conflicts.",
			"overviewRulerIncomingContentForeground": "Incoming overview ruler foreground for inline merge-conflicts.",
			"overviewRulerCommonContentForeground": "Common ancestor overview ruler foreground for inline merge-conflicts.",
			"overviewRulerFindMatchForeground": "Overview ruler marker colour for find matches. The colour must not be opaque to not hide underlying decorations.",
			"overviewRulerSelectionHighlightForeground": "Overview ruler marker colour for selection highlights. The colour must not be opaque to not hide underlying decorations."
		},
		"vs/platform/actions/browser/menuItemActionItem": {
			"titleAndKb": "{0} ({1})"
		},
		"vs/platform/storage/node/storageService": {
			"logStorage": "Log Storage"
		},
		"vs/platform/markers/common/markers": {
			"sev.error": "Error",
			"sev.warning": "Warning",
			"sev.info": "Info"
		},
		"vs/platform/update/node/update.config.contribution": {
			"updateConfigurationTitle": "Update",
			"updateChannel": "Configure whether you receive automatic updates from an update channel. Requires a restart after change. The updates are fetched from a Microsoft online service.",
			"enableWindowsBackgroundUpdates": "Enables Windows background updates. The updates are fetched from a Microsoft online service.",
			"showReleaseNotes": "Show Release Notes after an update. The Release Notes are fetched from a Microsoft online service."
		},
		"vs/platform/windows/electron-main/windowsService": {
			"aboutDetail": "Version: {0}\nCommit: {1}\nDate: {2}\nElectron: {3}\nChrome: {4}\nNode.js: {5}\nV8: {6}\nArchitecture: {7}",
			"okButton": "OK",
			"copy": "&&Copy"
		},
		"vs/platform/issue/electron-main/issueService": {
			"issueReporter": "Issue Reporter",
			"processExplorer": "Process Explorer"
		},
		"vs/platform/node/zip": {
			"invalid file": "Error extracting {0}. Invalid file.",
			"incompleteExtract": "Incomplete. Found {0} of {1} entries",
			"notFound": "{0} not found inside zip."
		},
		"vs/platform/extensions/node/extensionValidator": {
			"versionSyntax": "Could not parse `engines.vscode` value {0}. Please use, for example: ^1.22.0, ^1.22.x, etc.",
			"versionSpecificity1": "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions before 1.0.0, please define at a minimum the major and minor desired version. E.g. ^0.10.0, 0.10.x, 0.11.0, etc.",
			"versionSpecificity2": "Version specified in `engines.vscode` ({0}) is not specific enough. For vscode versions after 1.0.0, please define at a minimum the major desired version. E.g. ^1.10.0, 1.10.x, 1.x.x, 2.x.x, etc.",
			"versionMismatch": "Extension is not compatible with Code {0}. Extension requires: {1}."
		},
		"vs/platform/keybinding/common/abstractKeybindingService": {
			"first.chord": "({0}) was pressed. Waiting for second key of chord...",
			"missing.chord": "The key combination ({0}, {1}) is not a command."
		},
		"vs/platform/integrity/node/integrityServiceImpl": {
			"integrity.prompt": "Your {0} installation appears to be corrupt. Please reinstall.",
			"integrity.moreInformation": "More Information",
			"integrity.dontShowAgain": "Don't Show Again"
		},
		"vs/platform/extensionManagement/common/extensionEnablementService": {
			"noWorkspace": "No workspace."
		},
		"vs/platform/menubar/electron-main/menubar": {
			"miNewWindow": "New &&Window",
			"mFile": "&&File",
			"mEdit": "&&Edit",
			"mSelection": "&&Selection",
			"mView": "&&View",
			"mGoto": "&&Go",
			"mDebug": "&&Debug",
			"mTerminal": "&&Terminal",
			"mWindow": "Window",
			"mHelp": "&&Help",
			"mAbout": "About {0}",
			"miPreferences": "&&Preferences",
			"mServices": "Services",
			"mHide": "Hide {0}",
			"mHideOthers": "Hide Others",
			"mShowAll": "Show All",
			"miQuit": "Quit {0}",
			"mMinimize": "Minimize",
			"mZoom": "Zoom",
			"mBringToFront": "Bring All to Front",
			"miSwitchWindow": "Switch &&Window...",
			"mNewTab": "New Tab",
			"mShowPreviousTab": "Show Previous Tab",
			"mShowNextTab": "Show Next Tab",
			"mMoveTabToNewWindow": "Move Tab to New Window",
			"mMergeAllWindows": "Merge All Windows",
			"miCheckForUpdates": "Check for &&Updates...",
			"miCheckingForUpdates": "Checking For Updates...",
			"miDownloadUpdate": "D&&ownload Available Update",
			"miDownloadingUpdate": "Downloading Update...",
			"miInstallUpdate": "Install &&Update...",
			"miInstallingUpdate": "Installing Update...",
			"miRestartToUpdate": "Restart to &&Update..."
		},
		"vs/workbench/parts/cli/electron-browser/cli.contribution": {
			"install": "Install '{0}' command in PATH",
			"not available": "This command is not available",
			"successIn": "Shell command '{0}' successfully installed in PATH.",
			"ok": "OK",
			"cancel2": "Cancel",
			"warnEscalation": "Code will now prompt with 'osascript' for Administrator privileges to install the shell command.",
			"cantCreateBinFolder": "Unable to create '/usr/local/bin'.",
			"aborted": "Aborted",
			"uninstall": "Uninstall '{0}' command from PATH",
			"successFrom": "Shell command '{0}' successfully uninstalled from PATH.",
			"warnEscalationUninstall": "Code will now prompt with 'osascript' for Administrator privileges to uninstall the shell command.",
			"cantUninstall": "Unable to uninstall the shell command '{0}'.",
			"shellCommand": "Shell Command"
		},
		"vs/workbench/parts/comments/electron-browser/commentsEditorContribution": {},
		"vs/workbench/parts/comments/common/commentModel": {
			"noComments": "There are no comments on this review."
		},
		"vs/workbench/parts/comments/electron-browser/commentsTreeViewer": {},
		"vs/workbench/parts/comments/electron-browser/commentThreadWidget": {
			"label.collapse": "Collapse"
		},
		"vs/workbench/parts/comments/electron-browser/commentNode": {
			"label.delete": "Delete",
			"label.edit": "Edit",
			"label.cancel": "Cancel"
		},
		"vs/workbench/parts/codeEditor/electron-browser/accessibility": {
			"emergencyConfOn": "Now changing the setting `editor.accessibilitySupport` to 'on'.",
			"openingDocs": "Now opening the VS Code Accessibility documentation page.",
			"introMsg": "Thank you for trying out VS Code's accessibility options.",
			"status": "Status:",
			"auto_on": "The editor has automatically detected a Screen Reader is attached.",
			"tabFocusModeOnMsg": "Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.",
			"tabFocusModeOnMsgNoKb": "Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.",
			"tabFocusModeOffMsg": "Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.",
			"tabFocusModeOffMsgNoKb": "Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.",
			"openDocMac": "Press Command+H now to open a browser window with more VS Code information related to Accessibility.",
			"openDocWinLinux": "Press Control+H now to open a browser window with more VS Code information related to Accessibility.",
			"outroMsg": "You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.",
			"ShowAccessibilityHelpAction": "Show Accessibility Help"
		},
		"vs/workbench/parts/codeEditor/electron-browser/inspectKeybindings": {
			"workbench.action.inspectKeyMap": "Developer: Inspect Key Mappings"
		},
		"vs/workbench/parts/codeEditor/electron-browser/largeFileOptimizations": {
			"neverShowAgain": "OK. Never show again",
			"removeOptimizations": "Forcefully enable features",
			"reopenFilePrompt": "Please reopen file in order for this setting to take effect."
		},
		"vs/workbench/parts/codeEditor/electron-browser/textMate/inspectTMScopes": {
			"inspectTMScopes": "Developer: Inspect TM Scopes",
			"inspectTMScopesWidget.loading": "Loading..."
		},
		"vs/workbench/parts/codeEditor/electron-browser/toggleMinimap": {
			"toggleMinimap": "View: Toggle Minimap"
		},
		"vs/workbench/parts/codeEditor/electron-browser/toggleMultiCursorModifier": {
			"toggleLocation": "Toggle Multi-Cursor Modifier",
			"miMultiCursorAlt": "Switch to Alt+Click for Multi-Cursor",
			"miMultiCursorCmd": "Switch to Cmd+Click for Multi-Cursor",
			"miMultiCursorCtrl": "Switch to Ctrl+Click for Multi-Cursor"
		},
		"vs/workbench/parts/codeEditor/electron-browser/toggleRenderControlCharacter": {
			"toggleRenderControlCharacters": "View: Toggle Control Characters"
		},
		"vs/workbench/parts/codeEditor/electron-browser/toggleRenderWhitespace": {
			"toggleRenderWhitespace": "View: Toggle Render Whitespace"
		},
		"vs/workbench/parts/codeEditor/electron-browser/toggleWordWrap": {
			"toggle.wordwrap": "View: Toggle Word Wrap",
			"wordWrap.notInDiffEditor": "Cannot toggle word wrap in a diff editor.",
			"unwrapMinified": "Disable wrapping for this file",
			"wrapMinified": "Enable wrapping for this file"
		},
		"vs/workbench/parts/codeEditor/electron-browser/languageConfiguration/languageConfigurationExtensionPoint": {
			"parseErrors": "Errors parsing {0}: {1}",
			"schema.openBracket": "The opening bracket character or string sequence.",
			"schema.closeBracket": "The closing bracket character or string sequence.",
			"schema.comments": "Defines the comment symbols",
			"schema.blockComments": "Defines how block comments are marked.",
			"schema.blockComment.begin": "The character sequence that starts a block comment.",
			"schema.blockComment.end": "The character sequence that ends a block comment.",
			"schema.lineComment": "The character sequence that starts a line comment.",
			"schema.brackets": "Defines the bracket symbols that increase or decrease the indentation.",
			"schema.autoClosingPairs.notIn": "Defines a list of scopes where the auto pairs are disabled.",
			"schema.surroundingPairs": "Defines the bracket pairs that can be used to surround a selected string.",
			"schema.wordPattern": "The word definition for the language.",
			"schema.wordPattern.pattern": "The RegExp pattern used to match words.",
			"schema.wordPattern.flags": "The RegExp flags used to match words.",
			"schema.wordPattern.flags.errorMessage": "Must match the pattern `/^([gimuy]+)$/`.",
			"schema.indentationRules": "The language's indentation settings.",
			"schema.indentationRules.increaseIndentPattern.pattern": "The RegExp pattern for increaseIndentPattern.",
			"schema.indentationRules.increaseIndentPattern.flags": "The RegExp flags for increaseIndentPattern.",
			"schema.indentationRules.increaseIndentPattern.errorMessage": "Must match the pattern `/^([gimuy]+)$/`.",
			"schema.indentationRules.decreaseIndentPattern.pattern": "The RegExp pattern for decreaseIndentPattern.",
			"schema.indentationRules.decreaseIndentPattern.flags": "The RegExp flags for decreaseIndentPattern.",
			"schema.indentationRules.decreaseIndentPattern.errorMessage": "Must match the pattern `/^([gimuy]+)$/`.",
			"schema.indentationRules.indentNextLinePattern.pattern": "The RegExp pattern for indentNextLinePattern.",
			"schema.indentationRules.indentNextLinePattern.flags": "The RegExp flags for indentNextLinePattern.",
			"schema.indentationRules.indentNextLinePattern.errorMessage": "Must match the pattern `/^([gimuy]+)$/`.",
			"schema.indentationRules.unIndentedLinePattern.pattern": "The RegExp pattern for unIndentedLinePattern.",
			"schema.indentationRules.unIndentedLinePattern.flags": "The RegExp flags for unIndentedLinePattern.",
			"schema.indentationRules.unIndentedLinePattern.errorMessage": "Must match the pattern `/^([gimuy]+)$/`.",
			"schema.folding": "The language's folding settings.",
			"schema.folding.markers": "Language specific folding markers such as '#region' and '#endregion'. The start and end regexes will be tested against the contents of all lines and must be designed efficiently",
			"schema.folding.markers.start": "The RegExp pattern for the start marker. The regexp must start with '^'.",
			"schema.folding.markers.end": "The RegExp pattern for the end marker. The regexp must start with '^'."
		},
		"vs/workbench/parts/emmet/browser/actions/showEmmetCommands": {
			"showEmmetCommands": "Show Emmet Commands",
			"miShowEmmetCommands": "E&&mmet..."
		},
		"vs/workbench/parts/emmet/electron-browser/actions/expandAbbreviation": {
			"expandAbbreviationAction": "Emmet: Expand Abbreviation",
			"miEmmetExpandAbbreviation": "Emmet: E&&xpand Abbreviation"
		},
		"vs/workbench/parts/execution/electron-browser/execution.contribution": {
			"terminalConfigurationTitle": "External Terminal",
			"terminal.explorerKind.integrated": "Use VS Code's integrated terminal.",
			"terminal.explorerKind.external": "Use the configured external terminal.",
			"explorer.openInTerminalKind": "Customises what kind of terminal to launch.",
			"terminal.external.windowsExec": "Customises which terminal to run on Windows.",
			"terminal.external.osxExec": "Customises which terminal application to run on macOS.",
			"terminal.external.linuxExec": "Customises which terminal to run on Linux.",
			"globalConsoleAction": "Open New Terminal",
			"scopedConsoleAction": "Open in Terminal"
		},
		"vs/workbench/parts/execution/electron-browser/terminalService": {
			"console.title": "VS Code Console",
			"mac.terminal.script.failed": "Script '{0}' failed with exit code {1}",
			"mac.terminal.type.not.supported": "'{0}' not supported",
			"press.any.key": "Press any key to continue...",
			"linux.term.failed": "'{0}' failed with exit code {1}"
		},
		"vs/workbench/parts/feedback/electron-browser/feedback.contribution": {
			"workbenchConfigurationTitle": "Workbench",
			"feedbackVisibility": "Controls the visibility of the Twitter feedback (smiley) in the status bar at the bottom of the workbench."
		},
		"vs/workbench/parts/feedback/electron-browser/feedbackStatusbarItem": {
			"hide": "Hide"
		},
		"vs/workbench/parts/feedback/electron-browser/feedback": {
			"sendFeedback": "Tweet Feedback",
			"label.sendASmile": "Tweet us your feedback.",
			"close": "Close",
			"patchedVersion1": "Your installation is corrupt.",
			"patchedVersion2": "Please specify this if you submit a bug.",
			"sentiment": "How was your experience?",
			"other ways to contact us": "Other ways to contact us",
			"submit a bug": "Submit a bug",
			"request a missing feature": "Request a missing feature",
			"tell us why?": "Tell us why?",
			"showFeedback": "Show Feedback Smiley in Status Bar",
			"tweet": "Tweet",
			"tweetFeedback": "Tweet Feedback",
			"character left": "character left",
			"characters left": "characters left"
		},
		"vs/workbench/parts/debug/electron-browser/debug.contribution": {
			"toggleDebugViewlet": "Show Debug",
			"toggleDebugPanel": "Debug Console",
			"debug": "Debug",
			"debugPanel": "Debug Console",
			"variables": "Variables",
			"watch": "Watch",
			"callStack": "Call Stack",
			"breakpoints": "Breakpoints",
			"view": "View",
			"debugCategory": "Debug",
			"debugCommands": "Debug Configuration",
			"debugConfigurationTitle": "Debug",
			"never": "Never show debug in status bar",
			"always": "Always show debug in status bar",
			"onFirstSessionStart": "Show debug in status bar only after debug was started for the first time",
			"launch": "Global debug launch configuration. Should be used as an alternative to 'launch.json' that is shared across workspaces"
		},
		"vs/workbench/parts/debug/browser/debugQuickOpen": {
			"debugAriaLabel": "Type a name of a launch configuration to run.",
			"addConfigTo": "Add Config ({0})...",
			"addConfiguration": "Add Configuration...",
			"noConfigurationsMatching": "No debug configurations matching",
			"noConfigurationsFound": "No debug configurations found. Please create a 'launch.json' file."
		},
		"vs/workbench/parts/debug/electron-browser/repl": {
			"replAriaLabel": "Read Eval Print Loop Panel",
			"startDebugFirst": "Please start a debug session to evaluate",
			"actions.repl.acceptInput": "REPL Accept Input",
			"actions.repl.copyAll": "Debug: Console Copy All",
			"clearRepl": "Clear Console"
		},
		"vs/workbench/parts/debug/browser/debugViewlet": {
			"startAdditionalSession": "Start Additional Session"
		},
		"vs/workbench/parts/debug/common/debug": {},
		"vs/workbench/parts/debug/electron-browser/variablesView": {
			"variablesSection": "Variables Section",
			"variablesAriaTreeLabel": "Debug Variables",
			"variableValueAriaLabel": "Type new variable value"
		},
		"vs/workbench/parts/debug/browser/breakpointsView": {
			"Logpoint": "Logpoint",
			"Breakpoint": "Breakpoint",
			"editBreakpoint": "Edit {0}...",
			"removeBreakpoint": "Remove {0}",
			"functionBreakpointsNotSupported": "Function breakpoints are not supported by this debug type",
			"functionBreakpointPlaceholder": "Function to break on",
			"functionBreakPointInputAriaLabel": "Type function breakpoint",
			"disabledBreakpoint": "Disabled breakpoint",
			"unverifiedBreakopint": "Unverified breakpoint",
			"functionBreakpointUnsupported": "Function breakpoints not supported by this debug type",
			"logBreakpointUnsupported": "Logpoints not supported by this debug type",
			"conditionalBreakpointUnsupported": "Conditional breakpoints not supported by this debug type",
			"hitBreakpointUnsupported": "Hit conditional breakpoints not supported by this debug type"
		},
		"vs/workbench/parts/debug/electron-browser/watchExpressionsView": {
			"watchAriaTreeLabel": "Debug Watch Expressions",
			"watchExpressionPlaceholder": "Expression to watch",
			"watchExpressionInputAriaLabel": "Type watch expression"
		},
		"vs/workbench/parts/debug/electron-browser/callStackView": {
			"callstackSection": "Call Stack Section",
			"debugStopped": "Paused on {0}",
			"callStackAriaLabel": "Debug Call Stack",
			"session": "Session",
			"paused": "Paused",
			"running": "Running",
			"thread": "Thread",
			"pausedOn": "Paused on {0}",
			"loadMoreStackFrames": "Load More Stack Frames"
		},
		"vs/workbench/parts/debug/browser/debugEditorModelManager": {},
		"vs/workbench/parts/debug/browser/debugActions": {
			"openLaunchJson": "Open {0}",
			"launchJsonNeedsConfigurtion": "Configure or Fix 'launch.json'",
			"noFolderDebugConfig": "Please first open a folder in order to do advanced debug configuration.",
			"startDebug": "Start Debugging",
			"startWithoutDebugging": "Start Without Debugging",
			"selectAndStartDebugging": "Select and Start Debugging",
			"restartDebug": "Restart",
			"reconnectDebug": "Reconnect",
			"stepOverDebug": "Step Over",
			"stepIntoDebug": "Step Into",
			"stepOutDebug": "Step Out",
			"stopDebug": "Stop",
			"disconnectDebug": "Disconnect",
			"continueDebug": "Continue",
			"pauseDebug": "Pause",
			"terminateThread": "Terminate Thread",
			"restartFrame": "Restart Frame",
			"removeBreakpoint": "Remove Breakpoint",
			"removeAllBreakpoints": "Remove All Breakpoints",
			"enableAllBreakpoints": "Enable All Breakpoints",
			"disableAllBreakpoints": "Disable All Breakpoints",
			"activateBreakpoints": "Activate Breakpoints",
			"deactivateBreakpoints": "Deactivate Breakpoints",
			"reapplyAllBreakpoints": "Reapply All Breakpoints",
			"addFunctionBreakpoint": "Add Function Breakpoint",
			"setValue": "Set Value",
			"addWatchExpression": "Add Expression",
			"editWatchExpression": "Edit Expression",
			"addToWatchExpressions": "Add to Watch",
			"removeWatchExpression": "Remove Expression",
			"removeAllWatchExpressions": "Remove All Expressions",
			"debugConsoleAction": "Debug Console",
			"focusSession": "Focus Session",
			"stepBackDebug": "Step Back",
			"reverseContinue": "Reverse"
		},
		"vs/workbench/parts/debug/browser/debugToolbar": {
			"debugToolBarBackground": "Debug toolbar background color.",
			"debugToolBarBorder": "Debug toolbar border color."
		},
		"vs/workbench/parts/debug/electron-browser/debugService": {
			"noConfigurationNameInWorkspace": "Could not find launch configuration '{0}' in the workspace.",
			"multipleConfigurationNamesInWorkspace": "There are multiple launch configurations '{0}' in the workspace. Use folder name to qualify the configuration.",
			"noFolderWithName": "Can not find folder with name '{0}' for configuration '{1}' in compound '{2}'.",
			"configMissing": "Configuration '{0}' is missing in 'launch.json'.",
			"launchJsonDoesNotExist": "'launch.json' does not exist.",
			"debugRequestNotSupported": "Attribute '{0}' has an unsupported value '{1}' in the chosen debug configuration.",
			"debugRequesMissing": "Attribute '{0}' is missing from the chosen debug configuration.",
			"debugTypeNotSupported": "Configured debug type '{0}' is not supported.",
			"debugTypeMissing": "Missing property 'type' for the chosen launch configuration.",
			"noFolderWorkspaceDebugError": "The active file can not be debugged. Make sure it is saved on disk and that you have a debug extension installed for that file type.",
			"cancel": "Cancel",
			"debugAnyway": "Debug Anyway",
			"preLaunchTaskErrors": "Build errors have been detected during preLaunchTask '{0}'.",
			"preLaunchTaskError": "Build error has been detected during preLaunchTask '{0}'.",
			"preLaunchTaskExitCode": "The preLaunchTask '{0}' terminated with exit code {1}.",
			"showErrors": "Show Errors",
			"DebugTaskNotFoundWithTaskId": "Could not find the task '{0}'.",
			"taskNotTracked": "The task '{0}' cannot be tracked."
		},
		"vs/workbench/parts/debug/browser/debugContentProvider": {
			"unable": "Unable to resolve the resource without a debug session"
		},
		"vs/workbench/parts/debug/browser/debugCommands": {
			"noFolderDebugConfig": "Please first open a folder in order to do advanced debug configuration.",
			"inlineBreakpoint": "Inline Breakpoint",
			"debug": "Debug",
			"addInlineBreakpoint": "Add Inline Breakpoint"
		},
		"vs/workbench/parts/debug/browser/statusbarColorProvider": {},
		"vs/workbench/parts/debug/browser/debugStatus": {
			"selectAndStartDebug": "Select and start debug configuration"
		},
		"vs/workbench/parts/debug/browser/loadedScriptsView": {},
		"vs/workbench/parts/debug/browser/debugEditorActions": {
			"toggleBreakpointAction": "Debug: Toggle Breakpoint",
			"conditionalBreakpointEditorAction": "Debug: Add Conditional Breakpoint...",
			"logPointEditorAction": "Debug: Add Logpoint...",
			"runToCursor": "Run to Cursor",
			"debugEvaluate": "Debug: Evaluate",
			"debugAddToWatch": "Debug: Add to Watch",
			"showDebugHover": "Debug: Show Hover"
		},
		"vs/workbench/parts/debug/electron-browser/debugEditorContribution": {
			"logPoint": "Logpoint",
			"breakpoint": "Breakpoint",
			"removeBreakpoint": "Remove {0}",
			"editBreakpoint": "Edit {0}...",
			"disableBreakpoint": "Disable {0}",
			"enableBreakpoint": "Enable {0}",
			"removeBreakpoints": "Remove Breakpoints",
			"removeInlineBreakpointOnColumn": "Remove Inline Breakpoint on Column {0}",
			"removeLineBreakpoint": "Remove Line Breakpoint",
			"editBreakpoints": "Edit Breakpoints",
			"editInlineBreakpointOnColumn": "Edit Inline Breakpoint on Column {0}",
			"editLineBrekapoint": "Edit Line Breakpoint",
			"enableDisableBreakpoints": "Enable/Disable Breakpoints",
			"disableInlineColumnBreakpoint": "Disable Inline Breakpoint on Column {0}",
			"disableBreakpointOnLine": "Disable Line Breakpoint",
			"enableBreakpoints": "Enable Inline Breakpoint on Column {0}",
			"enableBreakpointOnLine": "Enable Line Breakpoint",
			"addBreakpoint": "Add Breakpoint",
			"addConditionalBreakpoint": "Add Conditional Breakpoint...",
			"addLogPoint": "Add Logpoint...",
			"message": "message",
			"condition": "condition",
			"breakpointHasConditionEnabled": "This {0} has a {1} that will get lost on remove. Consider disabling the {0} instead.",
			"removeLogPoint": "Remove {0}",
			"disableLogPoint": "{0} {1}",
			"disable": "Disable",
			"enable": "Enable",
			"cancel": "Cancel",
			"addConfiguration": "Add Configuration..."
		},
		"vs/workbench/parts/debug/electron-browser/replViewer": {
			"stateCapture": "Object state is captured from first evaluation"
		},
		"vs/workbench/parts/debug/browser/debugActionItems": {
			"noConfigurations": "No Configurations",
			"addConfigTo": "Add Config ({0})...",
			"addConfiguration": "Add Configuration..."
		},
		"vs/workbench/parts/debug/common/debugModel": {
			"notAvailable": "not available",
			"startDebugFirst": "Please start a debug session to evaluate"
		},
		"vs/workbench/parts/debug/electron-browser/electronDebugActions": {
			"copyValue": "Copy Value",
			"copyAsExpression": "Copy as Expression",
			"copy": "Copy",
			"copyAll": "Copy All",
			"copyStackTrace": "Copy Call Stack"
		},
		"vs/workbench/parts/debug/electron-browser/debugSession": {
			"debuggingStarted": "Debugging started.",
			"debuggingStopped": "Debugging stopped."
		},
		"vs/workbench/parts/debug/electron-browser/debugConfigurationManager": {
			"debugNoType": "Debugger 'type' can not be omitted and must be of type 'string'.",
			"selectDebug": "Select Environment",
			"DebugConfig.failed": "Unable to create 'launch.json' file inside the '.vscode' folder ({0}).",
			"workspace": "workspace",
			"user settings": "user settings"
		},
		"vs/workbench/parts/debug/common/debugSource": {
			"unknownSource": "Unknown Source"
		},
		"vs/workbench/parts/debug/electron-browser/debugHover": {
			"treeAriaLabel": "Debug Hover"
		},
		"vs/workbench/parts/debug/electron-browser/breakpointWidget": {
			"expression": "Expression",
			"hitCount": "Hit Count",
			"logMessage": "Log Message"
		},
		"vs/workbench/parts/debug/browser/exceptionWidget": {
			"exceptionThrownWithId": "Exception has occurred: {0}",
			"exceptionThrown": "Exception has occurred."
		},
		"vs/workbench/parts/debug/browser/linkDetector": {
			"fileLinkMac": "Click to follow (Cmd + click opens to the side)",
			"fileLink": "Click to follow (Ctrl + click opens to the side)"
		},
		"vs/workbench/parts/debug/node/debugAdapter": {
			"debugAdapterBinNotFound": "Debug adapter executable '{0}' does not exist.",
			"debugAdapterCannotDetermineExecutable": "Cannot determine executable for debug adapter '{0}'.",
			"unableToLaunchDebugAdapter": "Unable to launch debug adapter from '{0}'.",
			"unableToLaunchDebugAdapterNoArgs": "Unable to launch debug adapter."
		},
		"vs/workbench/parts/debug/electron-browser/rawDebugSession": {
			"moreInfo": "More Info"
		},
		"vs/workbench/parts/debug/common/replModel": {
			"snapshotObj": "Only primitive values are shown for this object."
		},
		"vs/workbench/parts/debug/node/debugger": {
			"launch.config.comment1": "Use IntelliSense to learn about possible attributes.",
			"launch.config.comment2": "Hover to view descriptions of existing attributes.",
			"debugType": "Type of configuration.",
			"debugTypeNotRecognised": "The debug type is not recognized. Make sure that you have a corresponding debug extension installed and that it is enabled.",
			"debugName": "Name of configuration; appears in the launch configuration drop down menu.",
			"debugServer": "For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode",
			"debugPrelaunchTask": "Task to run before debug session starts.",
			"debugPostDebugTask": "Task to run after debug session ends.",
			"debugWindowsConfiguration": "Windows specific launch configuration attributes.",
			"debugOSXConfiguration": "OS X specific launch configuration attributes.",
			"debugLinuxConfiguration": "Linux specific launch configuration attributes."
		},
		"vs/workbench/parts/debug/electron-browser/terminalSupport": {
			"debug.terminal.title": "debuggee"
		},
		"vs/workbench/parts/debug/common/debugSchemas": {
			"vscode.extension.contributes.debuggers": "Contributes debug adapters.",
			"vscode.extension.contributes.debuggers.type": "Unique identifier for this debug adapter.",
			"vscode.extension.contributes.debuggers.label": "Display name for this debug adapter.",
			"vscode.extension.contributes.debuggers.program": "Path to the debug adapter program. Path is either absolute or relative to the extension folder.",
			"vscode.extension.contributes.debuggers.args": "Optional arguments to pass to the adapter.",
			"vscode.extension.contributes.debuggers.runtime": "Optional runtime in case the program attribute is not an executable but requires a runtime.",
			"vscode.extension.contributes.debuggers.runtimeArgs": "Optional runtime arguments.",
			"vscode.extension.contributes.debuggers.variables": "Mapping from interactive variables (e.g ${action.pickProcess}) in `launch.json` to a command.",
			"vscode.extension.contributes.debuggers.initialConfigurations": "Configurations for generating the initial 'launch.json'.",
			"vscode.extension.contributes.debuggers.adapterExecutableCommand": "If specified VS Code will call this command to determine the executable path of the debug adapter and the arguments to pass.",
			"vscode.extension.contributes.debuggers.configurationSnippets": "Snippets for adding new configurations in 'launch.json'.",
			"vscode.extension.contributes.debuggers.configurationAttributes": "JSON schema configurations for validating 'launch.json'.",
			"vscode.extension.contributes.debuggers.windows": "Windows specific settings.",
			"vscode.extension.contributes.debuggers.windows.runtime": "Runtime used for Windows.",
			"vscode.extension.contributes.debuggers.osx": "macOS specific settings.",
			"vscode.extension.contributes.debuggers.osx.runtime": "Runtime used for macOS.",
			"vscode.extension.contributes.debuggers.linux": "Linux specific settings.",
			"vscode.extension.contributes.debuggers.linux.runtime": "Runtime used for Linux.",
			"vscode.extension.contributes.breakpoints": "Contributes breakpoints.",
			"vscode.extension.contributes.breakpoints.language": "Allow breakpoints for this language.",
			"app.launch.json.title": "Launch",
			"app.launch.json.version": "Version of this file format.",
			"app.launch.json.configurations": "List of configurations. Add new configurations or edit existing ones by using IntelliSense.",
			"app.launch.json.compounds": "List of compounds. Each compound references multiple configurations which will get launched together.",
			"app.launch.json.compound.name": "Name of compound. Appears in the launch configuration drop down menu.",
			"useUniqueNames": "Please use unique configuration names.",
			"app.launch.json.compound.folder": "Name of folder in which the compound is located.",
			"app.launch.json.compounds.configurations": "Names of configurations that will be started as part of this compound."
		},
		"vs/workbench/parts/debug/node/terminals": {
			"console.title": "VS Code Console",
			"mac.terminal.script.failed": "Script '{0}' failed with exit code {1}",
			"mac.terminal.type.not.supported": "'{0}' not supported",
			"press.any.key": "Press any key to continue...",
			"linux.term.failed": "'{0}' failed with exit code {1}"
		},
		"vs/workbench/parts/extensions/electron-browser/extensions.contribution": {
			"extensionsCommands": "Manage Extensions",
			"galleryExtensionsCommands": "Install Gallery Extensions",
			"extension": "Extension",
			"runtimeExtension": "Running Extensions",
			"extensions": "Extensions",
			"view": "View",
			"developer": "Developer",
			"extensionsConfigurationTitle": "Extensions"
		},
		"vs/workbench/parts/extensions/browser/extensionsQuickOpen": {
			"manage": "Press Enter to manage your extensions.",
			"notfound": "Extension '{0}' not found in the Marketplace.",
			"install": "Press Enter to install '{0}' from the Marketplace.",
			"searchFor": "Press Enter to search for '{0}' in the Marketplace.",
			"noExtensionsToInstall": "Type an extension name"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionsViewlet": {
			"marketPlace": "Marketplace",
			"disabledExtensions": "Disabled",
			"recommendedExtensions": "Recommended",
			"otherRecommendedExtensions": "Other Recommendations",
			"workspaceRecommendedExtensions": "Workspace Recommendations",
			"builtInExtensions": "Features",
			"builtInThemesExtensions": "Themes",
			"builtInBasicsExtensions": "Programming Languages",
			"searchExtensions": "Search Extensions in Marketplace",
			"sort by installs": "Sort By: Install Count",
			"sort by rating": "Sort By: Rating",
			"sort by name": "Sort By: Name",
			"suggestProxyError": "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting.",
			"extensions": "Extensions",
			"outdatedExtensions": "{0} Outdated Extensions",
			"malicious warning": "We have uninstalled '{0}' which was reported to be problematic.",
			"reloadNow": "Reload Now"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionTipsService": {
			"neverShowAgain": "Don't Show Again",
			"searchMarketplace": "Search Marketplace",
			"dynamicWorkspaceRecommendation": "This extension may interest you because it's popular among users of the {0} repository.",
			"exeBasedRecommendation": "This extension is recommended because you have {0} installed.",
			"fileBasedRecommendation": "This extension is recommended based on the files you recently opened.",
			"workspaceRecommendation": "This extension is recommended by users of the current workspace.",
			"reallyRecommended2": "The '{0}' extension is recommended for this file type.",
			"reallyRecommendedExtensionPack": "The '{0}' extension pack is recommended for this file type.",
			"install": "Install",
			"showRecommendations": "Show Recommendations",
			"showLanguageExtensions": "The Marketplace has extensions that can help with '.{0}' files",
			"workspaceRecommended": "This workspace has extension recommendations.",
			"installAll": "Install All",
			"ignoreExtensionRecommendations": "Do you want to ignore all extension recommendations?",
			"no": "No"
		},
		"vs/workbench/parts/extensions/node/extensionsWorkbenchService": {
			"installingVSIXExtension": "Installing extension from VSIX...",
			"malicious": "This extension is reported to be problematic.",
			"installingMarketPlaceExtension": "Installing extension from Marketplace....",
			"uninstallingExtension": "Uninstalling extension....",
			"singleDependentError": "Cannot disable extension '{0}'. Extension '{1}' depends on this.",
			"twoDependentsError": "Cannot disable extension '{0}'. Extensions '{1}' and '{2}' depend on this.",
			"installConfirmation": "Would you like to install the '{0}' extension?",
			"install": "Install"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionsActions": {
			"download": "Download Manually",
			"install": "Install",
			"installing": "Installing",
			"failedToInstall": "Failed to install '{0}'.",
			"uninstallAction": "Uninstall",
			"Uninstalling": "Uninstalling",
			"failedToUpdate": "Failed to update '{0}'.",
			"updateTo": "Update to {0}",
			"updateAction": "Update",
			"ManageExtensionAction.uninstallingTooltip": "Uninstalling",
			"enableForWorkspaceAction": "Enable (Workspace)",
			"enableGloballyAction": "Enable",
			"enableAction": "Enable",
			"disableForWorkspaceAction": "Disable (Workspace)",
			"disableGloballyAction": "Disable",
			"disableAction": "Disable",
			"enableAutoUpdate": "Enable Auto Updating Extensions",
			"disableAutoUpdate": "Disable Auto Updating Extensions",
			"updateAll": "Update All Extensions",
			"reloadAction": "Reload",
			"toggleExtensionsViewlet": "Show Extensions",
			"installExtensions": "Install Extensions",
			"showEnabledExtensions": "Show Enabled Extensions",
			"showInstalledExtensions": "Show Installed Extensions",
			"showDisabledExtensions": "Show Disabled Extensions",
			"clearExtensionsInput": "Clear Extensions Input",
			"showBuiltInExtensions": "Show Built-in Extensions",
			"showOutdatedExtensions": "Show Outdated Extensions",
			"showPopularExtensions": "Show Popular Extensions",
			"showRecommendedExtensions": "Show Recommended Extensions",
			"installWorkspaceRecommendedExtensions": "Install All Workspace Recommended Extensions",
			"installRecommendedExtension": "Install Recommended Extension",
			"undo": "Undo",
			"showRecommendedKeymapExtensionsShort": "Keymaps",
			"showLanguageExtensionsShort": "Language Extensions",
			"showAzureExtensionsShort": "Azure Extensions",
			"OpenExtensionsFile.failed": "Unable to create 'extensions.json' file inside the '.vscode' folder ({0}).",
			"configureWorkspaceRecommendedExtensions": "Configure Recommended Extensions (Workspace)",
			"configureWorkspaceFolderRecommendedExtensions": "Configure Recommended Extensions (Workspace Folder)",
			"malicious tooltip": "This extension was reported to be problematic.",
			"malicious": "Malicious",
			"disabled": "Disabled",
			"disabled globally": "Disabled",
			"disabled workspace": "Disabled for this Workspace",
			"disableAll": "Disable All Installed Extensions",
			"disableAllWorkspace": "Disable All Installed Extensions for this Workspace",
			"enableAll": "Enable All Extensions",
			"enableAllWorkspace": "Enable All Extensions for this Workspace",
			"openExtensionsFolder": "Open Extensions Folder",
			"installVSIX": "Install from VSIX...",
			"installFromVSIX": "Install from VSIX",
			"InstallVSIXAction.success": "Successfully installed the extension. Reload to enable it.",
			"InstallVSIXAction.reloadNow": "Reload Now",
			"reinstall": "Reinstall Extension...",
			"selectExtension": "Select Extension to Reinstall",
			"ReinstallAction.success": "Successfully reinstalled the extension.",
			"ReinstallAction.reloadNow": "Reload Now",
			"extensionButtonProminentBackground": "Button background color for actions extension that stand out (e.g. install button).",
			"extensionButtonProminentForeground": "Button foreground color for actions extension that stand out (e.g. install button).",
			"extensionButtonProminentHoverBackground": "Button background hover color for actions extension that stand out (e.g. install button)."
		},
		"vs/workbench/parts/extensions/common/extensionsInput": {
			"extensionsInputName": "Extension: {0}"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionEditor": {
			"name": "Extension name",
			"extension id": "Extension identifier",
			"preview": "Preview",
			"builtin": "Built-in",
			"publisher": "Publisher name",
			"install count": "Install count",
			"rating": "Rating",
			"repository": "Repository",
			"license": "License",
			"details": "Details",
			"contributions": "Contributions",
			"changelog": "Changelog",
			"dependencies": "Dependencies",
			"noReadme": "No README available.",
			"noChangelog": "No Changelog available.",
			"noContributions": "No Contributions",
			"noDependencies": "No Dependencies",
			"settings": "Settings ({0})",
			"setting name": "Name",
			"description": "Description",
			"default": "Default",
			"debuggers": "Debuggers ({0})",
			"debugger name": "Name",
			"debugger type": "Type",
			"view container id": "ID",
			"view container title": "Title",
			"view container location": "Where",
			"views": "Views ({0})",
			"view id": "ID",
			"view name": "Name",
			"view location": "Where",
			"localizations": "Localizations ({0})",
			"localizations language id": "Language Id",
			"localizations language name": "Language Name",
			"localizations localized language name": "Language Name (Localized)",
			"iconThemes": "Icon Themes ({0})",
			"colorId": "Id",
			"defaultDark": "Dark Default",
			"defaultLight": "Light Default",
			"defaultHC": "High Contrast Default",
			"JSON Validation": "JSON Validation ({0})",
			"fileMatch": "File Match",
			"schema": "Schema",
			"commands": "Commands ({0})",
			"command name": "Name",
			"keyboard shortcuts": "Keyboard Shortcuts",
			"menuContexts": "Menu Contexts",
			"languages": "Languages ({0})",
			"language id": "ID",
			"language name": "Name",
			"file extensions": "File Extensions",
			"grammar": "Grammar",
			"snippets": "Snippets"
		},
		"vs/workbench/parts/extensions/common/extensionsFileTemplate": {
			"app.extensions.json.title": "Extensions",
			"app.extension.identifier.errorMessage": "Expected format '${publisher}.${name}'. Example: 'vscode.csharp'."
		},
		"vs/workbench/parts/extensions/electron-browser/extensionsUtils": {
			"disableOtherKeymapsConfirmation": "Disable other keymaps ({0}) to avoid conflicts between keybindings?",
			"yes": "Yes",
			"no": "No"
		},
		"vs/workbench/parts/extensions/electron-browser/runtimeExtensionsEditor": {
			"starActivation": "Activated on start-up",
			"workspaceContainsGlobActivation": "Activated because a file matching {0} exists in your workspace",
			"workspaceContainsFileActivation": "Activated because file {0} exists in your workspace",
			"languageActivation": "Activated because you opened a {0} file",
			"workspaceGenericActivation": "Activated on {0}",
			"errors": "{0} uncaught errors",
			"showRuntimeExtensions": "Show Running Extensions",
			"reportExtensionIssue": "Report Issue",
			"restart1": "Profile Extensions",
			"restart2": "In order to profile extensions a restart is required. Do you want to restart '{0}' now?",
			"restart3": "Restart",
			"cancel": "Cancel",
			"extensionHostProfileStart": "Start Extension Host Profile",
			"stopExtensionHostProfileStart": "Stop Extension Host Profile",
			"saveExtensionHostProfile": "Save Extension Host Profile"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionProfileService": {
			"restart1": "Profile Extensions",
			"restart2": "In order to profile extensions a restart is required. Do you want to restart '{0}' now?",
			"restart3": "Restart",
			"cancel": "Cancel",
			"selectAndStartDebug": "Click to stop profiling."
		},
		"vs/workbench/parts/extensions/electron-browser/extensionsActivationProgress": {},
		"vs/workbench/parts/extensions/electron-browser/extensionsViews": {
			"extensions": "Extensions",
			"no extensions found": "No extensions found.",
			"suggestProxyError": "Marketplace returned 'ECONNREFUSED'. Please check the 'http.proxy' setting."
		},
		"vs/workbench/parts/extensions/browser/extensionsWidgets": {
			"ratedByUsers": "Rated by {0} users",
			"ratedBySingleUser": "Rated by 1 user"
		},
		"vs/workbench/parts/extensions/browser/extensionsViewer": {
			"error": "Error"
		},
		"vs/workbench/parts/extensions/electron-browser/extensionsList": {},
		"vs/workbench/parts/html/electron-browser/html.contribution": {
			"html.editor.label": "Html Preview"
		},
		"vs/workbench/parts/html/electron-browser/htmlPreviewPart": {
			"html.voidInput": "Invalid editor input."
		},
		"vs/workbench/parts/localizations/electron-browser/localizations.contribution": {
			"updateLocale": "Would you like to change VS Code's UI language to {0} and restart?",
			"yes": "Yes",
			"no": "No",
			"neverAgain": "Don't Show Again",
			"JsonSchema.locale": "The UI Language to use.",
			"vscode.extension.contributes.localizations": "Contributes localizations to the editor",
			"vscode.extension.contributes.localizations.languageId": "Id of the language into which the display strings are translated.",
			"vscode.extension.contributes.localizations.languageName": "Name of the language in English.",
			"vscode.extension.contributes.localizations.languageNameLocalized": "Name of the language in contributed language.",
			"vscode.extension.contributes.localizations.translations": "List of translations associated to the language.",
			"vscode.extension.contributes.localizations.translations.id": "Id of VS Code or Extension for which this translation is contributed to. Id of VS Code is always `vscode` and of extension should be in format `publisherId.extensionName`.",
			"vscode.extension.contributes.localizations.translations.id.pattern": "Id should be `vscode` or in format `publisherId.extensionName` for translating VS code or an extension respectively.",
			"vscode.extension.contributes.localizations.translations.path": "A relative path to a file containing translations for the language."
		},
		"vs/workbench/parts/localizations/electron-browser/localizationsActions": {
			"configureLocale": "Configure Display Language",
			"doc": "See {0} for a list of supported languages.",
			"fail.createSettings": "Unable to create '{0}' ({1})."
		},
		"vs/workbench/parts/markers/electron-browser/markers.contribution": {
			"copyMarker": "Copy",
			"copyMessage": "Copy Message"
		},
		"vs/workbench/parts/markers/electron-browser/markersPanel": {
			"collapse": "Collapse",
			"disableFilesExclude": "Disable Files Exclude Filter.",
			"clearFilter": "Clear Filter."
		},
		"vs/workbench/parts/markers/electron-browser/markersPanelActions": {
			"showing filtered problems": "Showing {0} of {1}"
		},
		"vs/workbench/parts/markers/electron-browser/messages": {
			"viewCategory": "View",
			"problems.panel.configuration.title": "Problems View",
			"markers.panel.title.problems": "Problems",
			"markers.panel.no.problems.build": "No problems have been detected in the workspace so far.",
			"markers.panel.no.problems.filters": "No results found with provided filter criteria.",
			"markers.panel.no.problems.file.exclusions": "All problems are hidden because files exclude filter is enabled.",
			"markers.panel.action.useFilesExclude": "Filter using Files Exclude Setting",
			"markers.panel.action.donotUseFilesExclude": "Do not use Files Exclude Setting",
			"markers.panel.action.filter": "Filter Problems",
			"markers.panel.filter.ariaLabel": "Filter Problems",
			"markers.panel.filter.errors": "errors",
			"markers.panel.filter.warnings": "warnings",
			"markers.panel.filter.infos": "infos",
			"markers.panel.single.error.label": "1 Error",
			"markers.panel.multiple.errors.label": "{0} Errors",
			"markers.panel.single.warning.label": "1 Warning",
			"markers.panel.multiple.warnings.label": "{0} Warnings",
			"markers.panel.single.info.label": "1 Info",
			"markers.panel.multiple.infos.label": "{0} Infos",
			"markers.panel.single.unknown.label": "1 Unknown",
			"markers.panel.multiple.unknowns.label": "{0} Unknowns",
			"problems.tree.aria.label.marker.relatedInformation": " This problem has references to {0} locations.",
			"problems.tree.aria.label.error.marker": "Error generated by {0}: {1} at line {2} and character {3}.{4}",
			"problems.tree.aria.label.error.marker.nosource": "Error: {0} at line {1} and character {2}.{3}",
			"problems.tree.aria.label.warning.marker": "Warning generated by {0}: {1} at line {2} and character {3}.{4}",
			"problems.tree.aria.label.warning.marker.nosource": "Warning: {0} at line {1} and character {2}.{3}",
			"problems.tree.aria.label.info.marker": "Info generated by {0}: {1} at line {2} and character {3}.{4}",
			"problems.tree.aria.label.info.marker.nosource": "Info: {0} at line {1} and character {2}.{3}",
			"problems.tree.aria.label.marker": "Problem generated by {0}: {1} at line {2} and character {3}.{4}",
			"problems.tree.aria.label.marker.nosource": "Problem: {0} at line {1} and character {2}.{3}",
			"problems.tree.aria.label.relatedinfo.message": "{0} at line {1} and character {2} in {3}",
			"errors.warnings.show.label": "Show Errors and Warnings"
		},
		"vs/workbench/parts/markers/electron-browser/markers": {
			"totalProblems": "Total {0} Problems"
		},
		"vs/workbench/parts/markers/electron-browser/markersFileDecorations": {
			"label": "Problems",
			"tooltip.1": "1 problem in this file",
			"tooltip.N": "{0} problems in this file",
			"markers.showOnFile": "Show Errors & Warnings on files and folder."
		},
		"vs/workbench/parts/files/electron-browser/explorerViewlet": {
			"folders": "Folders"
		},
		"vs/workbench/parts/files/electron-browser/fileActions.contribution": {
			"filesCategory": "File",
			"copyPath": "Copy Path",
			"revealInSideBar": "Reveal in Side Bar",
			"acceptLocalChanges": "Use your changes and overwrite disk contents",
			"revertLocalChanges": "Discard your changes and revert to content on disk",
			"copyPathOfActive": "Copy Path of Active File",
			"saveAllInGroup": "Save All in Group",
			"saveFiles": "Save All Files",
			"revert": "Revert File",
			"compareActiveWithSaved": "Compare Active File with Saved",
			"closeEditor": "Close Editor",
			"view": "View",
			"openToSide": "Open to the Side",
			"revealInWindows": "Reveal in Explorer",
			"revealInMac": "Reveal in Finder",
			"openContainer": "Open Containing Folder",
			"saveAll": "Save All",
			"compareWithSaved": "Compare with Saved",
			"compareWithSelected": "Compare with Selected",
			"compareSource": "Select for Compare",
			"compareSelected": "Compare Selected",
			"close": "Close",
			"closeOthers": "Close Others",
			"closeSaved": "Close Saved",
			"closeAll": "Close All",
			"deleteFile": "Delete Permanently",
			"newFile": "New File",
			"openFile": "Open File..."
		},
		"vs/workbench/parts/files/electron-browser/files.contribution": {
			"showExplorerViewlet": "Show Explorer",
			"explore": "Explorer",
			"view": "View",
			"textFileEditor": "Text File Editor",
			"binaryFileEditor": "Binary File Editor",
			"filesConfigurationTitle": "Files",
			"files.exclude.boolean": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.",
			"files.exclude.when": "Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.",
			"eol.LF": "LF",
			"eol.CRLF": "CRLF",
			"files.autoSave.off": "A dirty file is never automatically saved.",
			"files.autoSave.onFocusChange": "A dirty file is automatically saved when the editor loses focus.",
			"files.autoSave.onWindowChange": "A dirty file is automatically saved when the window loses focus.",
			"hotExit.off": "Disable hot exit.",
			"useExperimentalFileWatcher": "Use the new experimental file watcher.",
			"defaultLanguage": "The default language mode that is assigned to new files.",
			"editorConfigurationTitle": "Editor",
			"explorerConfigurationTitle": "File Explorer",
			"openEditorsVisible": "Number of editors shown in the Open Editors pane."
		},
		"vs/workbench/parts/files/electron-browser/views/explorerViewer": {
			"fileInputAriaLabel": "Type file name. Press Enter to confirm or Escape to cancel.",
			"createFileFromExplorerInfoMessage": "Create file **{0}** in **{1}**",
			"renameFileFromExplorerInfoMessage": "Move and rename to **{0}**",
			"createFolderFromExplorerInfoMessage": "Create folder **{0}** in **{1}**",
			"dropFolders": "Do you want to add the folders to the workspace?",
			"dropFolder": "Do you want to add the folder to the workspace?",
			"confirmRootsMove": "Are you sure you want to change the order of multiple root folders in your workspace?",
			"confirmMultiMove": "Are you sure you want to move the following {0} files?",
			"confirmRootMove": "Are you sure you want to change the order of root folder '{0}' in your workspace?",
			"confirmMove": "Are you sure you want to move '{0}'?",
			"doNotAskAgain": "Do not ask me again",
			"confirmOverwriteMessage": "'{0}' already exists in the destination folder. Do you want to replace it?",
			"irreversible": "This action is irreversible!"
		},
		"vs/workbench/parts/files/electron-browser/views/explorerView": {
			"explorerSection": "Files Explorer Section",
			"treeAriaLabel": "Files Explorer"
		},
		"vs/workbench/parts/files/electron-browser/views/emptyView": {
			"noWorkspace": "No Folder Opened",
			"explorerSection": "Files Explorer Section",
			"noWorkspaceHelp": "You have not yet added a folder to the workspace.",
			"addFolder": "Add Folder",
			"noFolderHelp": "You have not yet opened a folder.",
			"openFolder": "Open Folder"
		},
		"vs/workbench/parts/files/electron-browser/views/openEditorsView": {
			"openEditors": "Open Editors",
			"openEditosrSection": "Open Editors Section",
			"dirtyCounter": "{0} unsaved"
		},
		"vs/workbench/parts/files/electron-browser/fileActions": {
			"newFile": "New File",
			"newFolder": "New Folder",
			"rename": "Rename",
			"delete": "Delete",
			"copyFile": "Copy",
			"pasteFile": "Paste",
			"retry": "Retry",
			"renameWhenSourcePathIsParentOfTargetError": "Please use the 'New Folder' or 'New File' command to add children to an existing folder",
			"newUntitledFile": "New Untitled File",
			"createNewFile": "New File",
			"createNewFolder": "New Folder",
			"dirtyMessageFilesDelete": "You are deleting files with unsaved changes. Do you want to continue?",
			"dirtyMessageFolderOneDelete": "You are deleting a folder with unsaved changes in 1 file. Do you want to continue?",
			"dirtyMessageFolderDelete": "You are deleting a folder with unsaved changes in {0} files. Do you want to continue?",
			"dirtyMessageFileDelete": "You are deleting a file with unsaved changes. Do you want to continue?",
			"dirtyWarning": "Your changes will be lost if you don't save them.",
			"undoBin": "You can restore from the Recycle Bin.",
			"undoTrash": "You can restore from the Trash.",
			"doNotAskAgain": "Do not ask me again",
			"irreversible": "This action is irreversible!",
			"binFailed": "Failed to delete using the Recycle Bin. Do you want to permanently delete instead?",
			"trashFailed": "Failed to delete using the Trash. Do you want to permanently delete instead?",
			"confirmMoveTrashMessageFilesAndDirectories": "Are you sure you want to delete the following {0} files/directories and their contents?",
			"confirmMoveTrashMessageMultipleDirectories": "Are you sure you want to delete the following {0} directories and their contents?",
			"confirmMoveTrashMessageMultiple": "Are you sure you want to delete the following {0} files?",
			"confirmMoveTrashMessageFolder": "Are you sure you want to delete '{0}' and its contents?",
			"confirmMoveTrashMessageFile": "Are you sure you want to delete '{0}'?",
			"confirmDeleteMessageFilesAndDirectories": "Are you sure you want to permanently delete the following {0} files/directories and their contents?",
			"confirmDeleteMessageMultipleDirectories": "Are you sure you want to permanently delete the following {0} directories and their contents?",
			"confirmDeleteMessageMultiple": "Are you sure you want to permanently delete the following {0} files?",
			"confirmDeleteMessageFolder": "Are you sure you want to permanently delete '{0}' and its contents?",
			"confirmDeleteMessageFile": "Are you sure you want to permanently delete '{0}'?",
			"addFiles": "Add Files",
			"confirmOverwrite": "A file or folder with the same name already exists in the destination folder. Do you want to replace it?",
			"fileIsAncestor": "File to paste is an ancestor of the destination folder",
			"fileDeleted": "File to paste was deleted or moved meanwhile",
			"duplicateFile": "Duplicate",
			"globalCompareFile": "Compare Active File With...",
			"openFileToCompare": "Open a file first to compare it with another file.",
			"refresh": "Refresh",
			"saveAllInGroup": "Save All in Group",
			"focusFilesExplorer": "Focus on Files Explorer",
			"showInExplorer": "Reveal Active File in Side Bar",
			"openFileToShow": "Open a file first to show it in the explorer",
			"collapseExplorerFolders": "Collapse Folders in Explorer",
			"refreshExplorer": "Refresh Explorer",
			"openFileInNewWindow": "Open Active File in New Window",
			"openFileToShowInNewWindow": "Open a file first to open in new window",
			"emptyFileNameError": "A file or folder name must be provided.",
			"fileNameStartsWithSlashError": "A file or folder name cannot start with a slash.",
			"fileNameExistsError": "A file or folder **{0}** already exists at this location. Please choose a different name.",
			"invalidFileNameError": "The name **{0}** is not valid as a file or folder name. Please choose a different name.",
			"filePathTooLongError": "The name **{0}** results in a path that is too long. Please choose a shorter name.",
			"compareWithClipboard": "Compare Active File with Clipboard"
		},
		"vs/workbench/parts/files/electron-browser/saveErrorHandler": {
			"userGuide": "Use the actions in the editor tool bar to either undo your changes or overwrite the content on disk with your changes.",
			"staleSaveError": "Failed to save '{0}': The content on disk is newer. Please compare your version with the one on disk.",
			"retry": "Retry",
			"discard": "Discard",
			"readonlySaveErrorAdmin": "Failed to save '{0}': File is write protected. Select 'Overwrite as Admin' to retry as administrator.",
			"readonlySaveError": "Failed to save '{0}': File is write protected. Select 'Overwrite' to attempt to remove protection.",
			"permissionDeniedSaveError": "Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.",
			"genericSaveError": "Failed to save '{0}': {1}",
			"learnMore": "Learn More",
			"dontShowAgain": "Don't Show Again",
			"compareChanges": "Compare",
			"overwriteElevated": "Overwrite as Admin...",
			"saveElevated": "Retry as Admin...",
			"overwrite": "Overwrite"
		},
		"vs/workbench/parts/files/electron-browser/fileCommands": {
			"revealInWindows": "Reveal in Explorer",
			"revealInMac": "Reveal in Finder",
			"openContainer": "Open Containing Folder",
			"saveAs": "Save As...",
			"save": "Save",
			"saveAll": "Save All",
			"removeFolderFromWorkspace": "Remove Folder from Workspace",
			"genericRevertError": "Failed to revert '{0}': {1}",
			"openFileToReveal": "Open a file first to reveal",
			"openFileToCopy": "Open a file first to copy its path"
		},
		"vs/workbench/parts/files/common/editors/fileEditorInput": {
			"orphanedFile": "{0} (deleted from disk)"
		},
		"vs/workbench/parts/files/browser/editors/textFileEditor": {
			"textFileEditor": "Text File Editor",
			"createFile": "Create File",
			"relaunchWithIncreasedMemoryLimit": "Restart with {0} MB",
			"configureMemoryLimit": "Configure Memory Limit",
			"fileEditorWithInputAriaLabel": "{0}. Text file editor.",
			"fileEditorAriaLabel": "Text file editor."
		},
		"vs/workbench/parts/files/browser/editors/binaryFileEditor": {
			"binaryFileEditor": "Binary File Viewer"
		},
		"vs/workbench/parts/files/common/dirtyFilesTracker": {
			"dirtyFile": "1 unsaved file",
			"dirtyFiles": "{0} unsaved files"
		},
		"vs/workbench/parts/files/electron-browser/views/explorerDecorationsProvider": {
			"label": "Explorer",
			"canNotResolve": "Can not resolve workspace folder",
			"symbolicLlink": "Symbolic Link"
		},
		"vs/workbench/api/browser/viewsContainersExtensionPoint": {
			"vscode.extension.contributes.views.containers.id": "Unique id used to identify the container in which views can be contributed using 'views' contribution point",
			"vscode.extension.contributes.views.containers.title": "Human readable string used to render the container",
			"vscode.extension.contributes.views.containers.icon": "Path to the container icon. Icons are 24x24 centered on a 50x40 block and have a fill colour of 'rgb(215, 218, 224)' or '#d7dae0'. It is recommended that icons be in SVG, though any image file type is accepted.",
			"vscode.extension.contributes.viewsContainers": "Contributes views containers to the editor",
			"views.container.activitybar": "Contribute views containers to Activity Bar",
			"test": "Test",
			"requirearray": "views containers must be an array",
			"requirestring": "property `{0}` is mandatory and must be of type `string`",
			"showViewlet": "Show {0}",
			"view": "View"
		},
		"vs/workbench/api/browser/viewsExtensionPoint": {
			"vscode.extension.contributes.view.id": "Identifier of the view. Use this to register a data provider through `vscode.window.registerTreeDataProviderForView` API. Also to trigger activating your extension by registering `onView:${id}` event to `activationEvents`.",
			"vscode.extension.contributes.view.name": "The human-readable name of the view. Will be shown",
			"vscode.extension.contributes.view.when": "Condition which must be true to show this view",
			"vscode.extension.contributes.views": "Contributes views to the editor",
			"views.explorer": "Contributes views to Explorer container in the Activity bar",
			"views.debug": "Contributes views to Debug container in the Activity bar",
			"views.scm": "Contributes views to SCM container in the Activity bar",
			"views.test": "Contributes views to Test container in the Activity bar",
			"views.contributed": "Contributes views to contributed views container",
			"ViewContainerDoesnotExist": "View container '{0}' does not exist and all views registered to it will be added to 'Explorer'.",
			"requirearray": "views must be an array",
			"requirestring": "property `{0}` is mandatory and must be of type `string`",
			"optstring": "property `{0}` can be omitted or must be of type `string`"
		},
		"vs/workbench/browser/actions/toggleActivityBarVisibility": {
			"toggleActivityBar": "Toggle Activity Bar Visibility",
			"view": "View"
		},
		"vs/workbench/browser/actions/toggleStatusbarVisibility": {
			"toggleStatusbar": "Toggle Status Bar Visibility",
			"view": "View"
		},
		"vs/workbench/browser/actions/toggleSidebarVisibility": {
			"toggleSidebar": "Toggle Side Bar Visibility",
			"view": "View"
		},
		"vs/workbench/browser/actions/toggleSidebarPosition": {
			"toggleSidebarPosition": "Toggle Side Bar Position",
			"view": "View"
		},
		"vs/workbench/browser/actions/toggleEditorLayout": {
			"view": "View"
		},
		"vs/workbench/browser/actions/toggleZenMode": {
			"toggleZenMode": "Toggle Zen Mode",
			"view": "View",
			"miToggleZenMode": "Toggle Zen Mode"
		},
		"vs/workbench/browser/actions/toggleCenteredLayout": {
			"view": "View",
			"miToggleCenteredLayout": "Toggle Centered Layout"
		},
		"vs/workbench/browser/actions/toggleTabsVisibility": {
			"toggleTabs": "Toggle Tab Visibility",
			"view": "View"
		},
		"vs/workbench/browser/parts/editor/editorPicker": {
			"noResultsFoundInGroup": "No matching opened editor found in group",
			"noOpenedEditors": "List of opened editors is currently empty in group",
			"noResultsFound": "No matching opened editor found",
			"noOpenedEditorsAllGroups": "List of opened editors is currently empty"
		},
		"vs/workbench/electron-browser/workbench": {
			"developer": "Developer",
			"file": "File"
		},
		"vs/workbench/electron-browser/main.contribution": {
			"view": "View",
			"help": "Help",
			"file": "File",
			"workspaces": "Workspaces",
			"developer": "Developer",
			"miSaveWorkspaceAs": "Save Workspace As...",
			"workbenchConfigurationTitle": "Workbench",
			"swipeToNavigate": "Navigate between open files using three-finger swipe horizontally.",
			"commandHistory": "Controls the number of recently used commands to keep in history for the command palette. Set to 0 to disable command history.",
			"sideBarLocation": "Controls the location of the sidebar. It can either show on the left or right of the workbench.",
			"statusBarVisibility": "Controls the visibility of the status bar at the bottom of the workbench.",
			"activityBarVisibility": "Controls the visibility of the activity bar in the workbench.",
			"workbench.fontAliasing.default": "Sub-pixel font smoothing. On most non-retina displays this will give the sharpest text.",
			"workbench.fontAliasing.none": "Disables font smoothing. Text will show with jagged sharp edges.",
			"workbench.fontAliasing.auto": "Applies `default` or `antialiased` automatically based on the DPI of displays.",
			"windowConfigurationTitle": "Window",
			"window.reopenFolders.all": "Reopen all windows.",
			"window.reopenFolders.folders": "Reopen all folders. Empty workspaces will not be restored.",
			"window.reopenFolders.one": "Reopen the last active window.",
			"window.reopenFolders.none": "Never reopen a window. Always start with an empty one.",
			"zoomLevel": "Adjust the zoom level of the window. The original size is 0 and each increment above (e.g. 1) or below (e.g. -1) represents zooming 20% larger or smaller. You can also enter decimals to adjust the zoom level with a finer granularity.",
			"window.newWindowDimensions.inherit": "Open new windows with same dimension as last active one.",
			"window.newWindowDimensions.fullscreen": "Open new windows in full screen mode.",
			"window.menuBarVisibility.default": "Menu is only hidden in full screen mode.",
			"window.menuBarVisibility.visible": "Menu is always visible even in full screen mode.",
			"window.menuBarVisibility.toggle": "Menu is hidden but can be displayed via Alt key.",
			"window.menuBarVisibility.hidden": "Menu is always hidden.",
			"titleBarStyle": "Adjust the appearance of the window title bar. Changes require a full restart to apply.",
			"window.nativeTabs": "Enables macOS Sierra window tabs. Note that changes require a full restart to apply and that native tabs will disable a custom title bar style if configured.",
			"zenModeConfigurationTitle": "Zen Mode"
		},
		"vs/workbench/electron-browser/main": {
			"loaderErrorNative": "Failed to load a required file. Please restart the application to try again. Details: {0}"
		},
		"vs/workbench/node/extensionHostMain": {
			"extensionTestError": "Path {0} does not point to a valid extension test runner."
		},
		"vs/workbench/browser/viewlet": {
			"compositePart.hideSideBarLabel": "Hide Side Bar",
			"collapse": "Collapse All"
		},
		"vs/workbench/common/views": {},
		"vs/workbench/browser/parts/views/viewsViewlet": {
			"hideView": "Hide"
		},
		"vs/workbench/browser/parts/views/customView": {},
		"vs/workbench/browser/parts/editor/editorWidgets": {
			"openWorkspace": "Open Workspace"
		},
		"vs/workbench/browser/parts/quickopen/quickOpenController": {
			"quickOpenInput": "Type '?' to get help on the actions you can take from here",
			"historyMatches": "recently opened",
			"noResultsFound1": "No results found",
			"canNotRunPlaceholder": "This quick open handler can not be used in the current context",
			"removeFromEditorHistory": "Remove From History",
			"pickHistory": "Select an editor entry to remove from history"
		},
		"vs/workbench/browser/parts/quickopen/quickopen": {
			"quickOpen": "Go to File...",
			"quickNavigateNext": "Navigate Next in Quick Open",
			"quickNavigatePrevious": "Navigate Previous in Quick Open",
			"quickSelectNext": "Select Next in Quick Open",
			"quickSelectPrevious": "Select Previous in Quick Open"
		},
		"vs/workbench/browser/quickopen": {
			"noResultsMatching": "No results matching",
			"noResultsFound2": "No results found"
		},
		"vs/workbench/browser/parts/quickinput/quickInput": {
			"quickInputBox.ariaLabel": "Type to narrow down results.",
			"inputModeEntry": "Press 'Enter' to confirm your input or 'Escape' to cancel",
			"inputModeEntryDescription": "{0} (Press 'Enter' to confirm or 'Escape' to cancel)",
			"quickInput.countSelected": "{0} Selected",
			"ok": "OK"
		},
		"vs/workbench/browser/actions/workspaceCommands": {
			"addFolderToWorkspace": "Add Folder to Workspace...",
			"addFolderToWorkspaceTitle": "Add Folder to Workspace",
			"workspaceFolderPickerPlaceholder": "Select workspace folder"
		},
		"vs/workbench/browser/parts/editor/editorCommands": {
			"editorCommand.activeEditorMove.description": "Move the active editor by tabs or groups",
			"editorCommand.activeEditorMove.arg.name": "Active editor move argument",
			"toggleInlineView": "Toggle Inline View",
			"compare": "Compare"
		},
		"vs/workbench/common/theme": {
			"tabBorder": "Border to separate tabs from each other. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabActiveBorder": "Border on the bottom of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabActiveUnfocusedBorder": "Border on the bottom of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabActiveBorderTop": "Border to the top of an active tab. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabActiveUnfocusedBorderTop": "Border to the top of an active tab in an unfocused group. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabHoverBorder": "Border to highlight tabs when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"tabUnfocusedHoverBorder": "Border to highlight tabs in an unfocused group when hovering. Tabs are the containers for editors in the editor area. Multiple tabs can be opened in one editor group. There can be multiple editor groups.",
			"editorGroupBackground": "Deprecated background colour of an editor group.",
			"deprecatedEditorGroupBackground": "Deprecated: Background colour of an editor group is no longer being supported with the introduction of the grid editor layout. You can use editorGroup.emptyBackground to set the background colour of empty editor groups.",
			"editorGroupEmptyBackground": "Background colour of an empty editor group. Editor groups are the containers of editors.",
			"editorGroupFocusedEmptyBorder": "Border colour of an empty editor group that is focused. Editor groups are the containers of editors.",
			"editorGroupHeaderBackground": "Background colour of the editor group title header when tabs are disabled (`\"workbench.editor.showTabs\": false`). Editor groups are the containers of editors."
		},
		"vs/workbench/browser/actions/workspaceActions": {
			"openFile": "Open File...",
			"openFolder": "Open Folder...",
			"openFileFolder": "Open...",
			"globalRemoveFolderFromWorkspace": "Remove Folder from Workspace...",
			"saveWorkspaceAsAction": "Save Workspace As...",
			"saveWorkspace": "Save Workspace",
			"openWorkspaceAction": "Open Workspace...",
			"openWorkspaceConfigFile": "Open Workspace Configuration File",
			"duplicateWorkspaceInNewWindow": "Duplicate Workspace in New Window"
		},
		"vs/workbench/browser/parts/views/panelViewlet": {
			"viewToolbarAriaLabel": "{0} actions"
		},
		"vs/workbench/browser/parts/views/views": {
			"view category": "View"
		},
		"vs/workbench/browser/parts/editor/textResourceEditor": {
			"textEditor": "Text Editor",
			"readonlyEditorWithInputAriaLabel": "{0}. Readonly text editor.",
			"readonlyEditorAriaLabel": "Readonly text editor.",
			"untitledFileEditorWithInputAriaLabel": "{0}. Untitled file text editor.",
			"untitledFileEditorAriaLabel": "Untitled file text editor."
		},
		"vs/workbench/browser/parts/editor/editorActions": {
			"splitEditor": "Split Editor",
			"navigateEditorGroups": "Navigate Between Editor Groups",
			"focusActiveEditorGroup": "Focus Active Editor Group",
			"focusFirstEditorGroup": "Focus First Editor Group",
			"openToSide": "Open to the Side",
			"closeEditor": "Close Editor",
			"closeOneEditor": "Close",
			"revertAndCloseActiveEditor": "Revert and Close Editor",
			"closeAllEditors": "Close All Editors",
			"closeEditorsInOtherGroups": "Close Editors in Other Groups",
			"moveActiveGroupLeft": "Move Editor Group Left",
			"moveActiveGroupRight": "Move Editor Group Right",
			"openNextEditor": "Open Next Editor",
			"openPreviousEditor": "Open Previous Editor",
			"nextEditorInGroup": "Open Next Editor in Group",
			"openPreviousEditorInGroup": "Open Previous Editor in Group",
			"lastEditorInGroup": "Open Last Editor in Group",
			"navigateNext": "Go Forward",
			"navigatePrevious": "Go Back",
			"navigateLast": "Go Last",
			"reopenClosedEditor": "Reopen Closed Editor",
			"clearRecentFiles": "Clear Recently Opened",
			"showAllEditors": "Show All Editors",
			"openPreviousRecentlyUsedEditorInGroup": "Open Previous Recently Used Editor in Group",
			"openNextRecentlyUsedEditorInGroup": "Open Next Recently Used Editor in Group",
			"navigateEditorHistoryByInput": "Open Previous Editor from History",
			"openNextRecentlyUsedEditor": "Open Next Recently Used Editor",
			"openPreviousRecentlyUsedEditor": "Open Previous Recently Used Editor",
			"clearEditorHistory": "Clear Editor History",
			"moveEditorLeft": "Move Editor Left",
			"moveEditorRight": "Move Editor Right",
			"moveEditorToPreviousGroup": "Move Editor into Previous Group",
			"moveEditorToNextGroup": "Move Editor into Next Group",
			"moveEditorToFirstGroup": "Move Editor into First Group"
		},
		"vs/workbench/electron-browser/actions": {
			"closeWindow": "Close Window",
			"closeWorkspace": "Close Workspace",
			"noWorkspaceOpened": "There is currently no workspace opened in this instance to close.",
			"newWindow": "New Window",
			"toggleFullScreen": "Toggle Full Screen",
			"toggleMenuBar": "Toggle Menu Bar",
			"toggleDevTools": "Toggle Developer Tools",
			"zoomIn": "Zoom In",
			"zoomOut": "Zoom Out",
			"zoomReset": "Reset Zoom",
			"reloadWindow": "Reload Window",
			"reloadWindowWithExntesionsDisabled": "Reload Window With Extensions Disabled",
			"close": "Close Window",
			"switchWindowPlaceHolder": "Select a window to switch to",
			"current": "Current Window",
			"switchWindow": "Switch Window...",
			"quickSwitchWindow": "Quick Switch Window...",
			"remove": "Remove from Recently Opened",
			"workspaces": "workspaces",
			"files": "files",
			"openRecentPlaceHolderMac": "Select to open (hold Cmd-key to open in new window)",
			"openRecentPlaceHolder": "Select to open (hold Ctrl-key to open in new window)",
			"openRecent": "Open Recent...",
			"quickOpenRecent": "Quick Open Recent...",
			"reportIssueInEnglish": "Report Issue",
			"openProcessExplorer": "Open Process Explorer",
			"reportPerformanceIssue": "Report Performance Issue",
			"keybindingsReference": "Keyboard Shortcuts Reference",
			"openDocumentationUrl": "Documentation",
			"openIntroductoryVideosUrl": "Introductory Videos",
			"openTipsAndTricksUrl": "Tips and Tricks",
			"toggleSharedProcess": "Toggle Shared Process",
			"navigateLeft": "Navigate to the View on the Left",
			"navigateRight": "Navigate to the View on the Right",
			"navigateUp": "Navigate to the View Above",
			"navigateDown": "Navigate to the View Below",
			"increaseViewSize": "Increase Current View Size",
			"decreaseViewSize": "Decrease Current View Size",
			"showPreviousTab": "Show Previous Window Tab",
			"showNextWindowTab": "Show Next Window Tab",
			"moveWindowTabToNewWindow": "Move Window Tab to New Window",
			"mergeAllWindowTabs": "Merge All Windows",
			"toggleWindowTabsBar": "Toggle Window Tabs Bar",
			"about": "About {0}",
			"inspect context keys": "Inspect Context Keys"
		},
		"vs/workbench/browser/parts/panel/panelActions": {
			"closePanel": "Close Panel",
			"togglePanel": "Toggle Panel",
			"focusPanel": "Focus into Panel",
			"toggledPanelPosition": "Toggle Panel Position",
			"minimizePanel": "Restore Panel Size",
			"view": "View"
		},
		"vs/workbench/browser/parts/activitybar/activitybarPart": {
			"hideActivitBar": "Hide Activity Bar",
			"globalActions": "Global Actions"
		},
		"vs/workbench/browser/parts/sidebar/sidebarPart": {
			"focusSideBar": "Focus into Side Bar",
			"viewCategory": "View"
		},
		"vs/workbench/browser/parts/panel/panelPart": {
			"hidePanel": "Hide Panel"
		},
		"vs/workbench/browser/parts/statusbar/statusbarPart": {
			"manageExtension": "Manage Extension"
		},
		"vs/workbench/browser/parts/titlebar/titlebarPart": {
			"patchedWindowTitle": "[Unsupported]",
			"userIsAdmin": "[Administrator]",
			"userIsSudo": "[Superuser]",
			"devExtensionWindowTitlePrefix": "[Extension Development Host]"
		},
		"vs/workbench/browser/parts/editor/editorPart": {},
		"vs/workbench/browser/parts/notifications/notificationsCenter": {
			"notificationsEmpty": "No new notifications",
			"notifications": "Notifications",
			"notificationsList": "Notifications List"
		},
		"vs/workbench/browser/parts/notifications/notificationsAlerts": {
			"alertErrorMessage": "Error: {0}",
			"alertWarningMessage": "Warning: {0}",
			"alertInfoMessage": "Info: {0}"
		},
		"vs/workbench/browser/parts/notifications/notificationsStatus": {
			"hideNotifications": "Hide Notifications",
			"zeroNotifications": "No Notifications",
			"noNotifications": "No New Notifications",
			"oneNotification": "1 New Notification",
			"notifications": "{0} New Notifications"
		},
		"vs/workbench/browser/parts/notifications/notificationsCommands": {
			"notifications": "Notifications",
			"showNotifications": "Show Notifications",
			"hideNotifications": "Hide Notifications",
			"clearAllNotifications": "Clear All Notifications"
		},
		"vs/workbench/browser/parts/notifications/notificationsToasts": {
			"notificationsToast": "Notification Toast"
		},
		"vs/workbench/api/electron-browser/mainThreadEditors": {},
		"vs/workbench/api/electron-browser/mainThreadMessageService": {
			"extensionSource": "{0} (Extension)",
			"defaultSource": "Extension",
			"manageExtension": "Manage Extension",
			"cancel": "Cancel",
			"ok": "OK"
		},
		"vs/workbench/api/electron-browser/mainThreadSaveParticipant": {
			"timeout.formatOnSave": "Aborted format on save after {0}ms",
			"codeActionsOnSave.didTimeout": "Aborted codeActionsOnSave after {0}ms",
			"timeout.onWillSave": "Aborted onWillSaveTextDocument-event after 1750ms",
			"saveParticipants": "Running Save Participants..."
		},
		"vs/workbench/api/electron-browser/mainThreadTask": {
			"task.label": "{0}: {1}"
		},
		"vs/workbench/api/electron-browser/mainThreadWebview": {
			"errorMessage": "An error occurred while restoring view:{0}"
		},
		"vs/workbench/api/electron-browser/mainThreadWorkspace": {
			"folderStatusMessageAddSingleFolder": "Extension '{0}' added 1 folder to the workspace",
			"folderStatusMessageAddMultipleFolders": "Extension '{0}' added {1} folders to the workspace",
			"folderStatusMessageRemoveSingleFolder": "Extension '{0}' removed 1 folder from the workspace",
			"folderStatusMessageRemoveMultipleFolders": "Extension '{0}' removed {1} folders from the workspace",
			"folderStatusChangeFolder": "Extension '{0}' changed folders of the workspace"
		},
		"vs/workbench/api/node/extHostExtensionActivator": {
			"failedDep2": "Extension '{0}' failed to activate. Reason: more than 10 levels of dependencies (most likely a dependency loop).",
			"activationError": "Activating extension '{0}' failed: {1}."
		},
		"vs/workbench/api/node/extHostWorkspace": {
			"updateerror": "Extension '{0}' failed to update workspace folders: {1}"
		},
		"vs/workbench/browser/parts/editor/textEditor": {},
		"vs/workbench/browser/parts/editor/textDiffEditor": {
			"textDiffEditor": "Text Diff Editor",
			"readonlyEditorWithInputAriaLabel": "{0}. Readonly text compare editor.",
			"readonlyEditorAriaLabel": "Readonly text compare editor.",
			"editableEditorWithInputAriaLabel": "{0}. Text file compare editor.",
			"editableEditorAriaLabel": "Text file compare editor."
		},
		"vs/workbench/browser/parts/editor/binaryEditor": {
			"binaryEditor": "Binary Viewer"
		},
		"vs/workbench/browser/parts/compositeBarActions": {
			"largeNumberBadge": "10k+",
			"badgeTitle": "{0} - {1}",
			"additionalViews": "Additional Views",
			"numberBadge": "{0} ({1})",
			"manageExtension": "Manage Extension",
			"titleKeybinding": "{0} ({1})",
			"hide": "Hide",
			"keep": "Keep",
			"toggle": "Toggle View Pinned"
		},
		"vs/workbench/browser/parts/activitybar/activitybarActions": {
			"view": "View"
		},
		"vs/workbench/browser/parts/compositeBar": {
			"activityBarAriaLabel": "Active View Switcher"
		},
		"vs/workbench/browser/parts/compositePart": {
			"ariaCompositeToolbarLabel": "{0} actions",
			"titleTooltip": "{0} ({1})"
		},
		"vs/workbench/browser/parts/titlebar/menubarControl": {
			"checkingForUpdates": "Checking For Updates...",
			"DownloadingUpdate": "Downloading Update...",
			"installingUpdate": "Installing Update..."
		},
		"vs/workbench/browser/parts/editor/editorGroupView": {
			"closeGroupAction": "Close",
			"editorOpenError": "Unable to open '{0}': {1}."
		},
		"vs/workbench/browser/parts/editor/editor.contribution": {
			"textEditor": "Text Editor",
			"textDiffEditor": "Text Diff Editor",
			"binaryDiffEditor": "Binary Diff Editor",
			"sideBySideEditor": "Side by Side Editor",
			"allEditorsPicker": "Show All Opened Editors",
			"view": "View",
			"file": "File",
			"close": "Close",
			"closeOthers": "Close Others",
			"closeRight": "Close to the Right",
			"closeAllSaved": "Close Saved",
			"closeAll": "Close All",
			"keepOpen": "Keep Open",
			"showOpenedEditors": "Show Opened Editors",
			"navigate.prev.label": "Previous Change",
			"navigate.next.label": "Next Change",
			"ignoreTrimWhitespace.label": "Ignore Trim Whitespace",
			"keepEditor": "Keep Editor",
			"closeEditorsInGroup": "Close All Editors in Group",
			"closeSavedEditors": "Close Saved Editors in Group"
		},
		"vs/workbench/browser/parts/notifications/notificationsActions": {
			"clearNotification": "Clear Notification",
			"clearNotifications": "Clear All Notifications",
			"hideNotificationsCenter": "Hide Notifications",
			"expandNotification": "Expand Notification",
			"collapseNotification": "Collapse Notification",
			"configureNotification": "Configure Notification",
			"copyNotification": "Copy Text"
		},
		"vs/workbench/electron-browser/window": {
			"undo": "Undo",
			"redo": "Redo",
			"cut": "Cut",
			"copy": "Copy",
			"paste": "Paste",
			"selectAll": "Select All",
			"runningAsRoot": "It is not recommended to run {0} as root user."
		},
		"vs/workbench/api/node/extHost.api.impl": {
			"extensionsLog": "Extension Host"
		},
		"vs/workbench/browser/parts/editor/resourceViewer": {
			"sizeB": "{0}B",
			"sizeKB": "{0}KB",
			"sizeMB": "{0}MB",
			"sizeGB": "{0}GB",
			"sizeTB": "{0}TB",
			"largeImageError": "The image is not displayed in the editor because it is too large ({0}).",
			"resourceOpenExternalButton": "Open image using external program?",
			"nativeFileTooLargeError": "The file is not displayed in the editor because it is too large ({0}).",
			"nativeBinaryError": "The file is not displayed in the editor because it is either binary or uses an unsupported text encoding.",
			"openAsText": "Do you want to open it anyway?",
			"zoom.action.fit.label": "Whole Image",
			"imgMeta": "{0}x{1} {2}"
		},
		"vs/workbench/browser/parts/editor/tabsTitleControl": {
			"araLabelTabActions": "Tab actions"
		},
		"vs/workbench/browser/parts/editor/binaryDiffEditor": {},
		"vs/workbench/browser/parts/editor/editorStatus": {
			"multiSelectionRange": "{0} selections ({1} characters selected)",
			"multiSelection": "{0} selections",
			"endOfLineLineFeed": "LF",
			"endOfLineCarriageReturnLineFeed": "CRLF",
			"tabFocusModeEnabled": "Tab Moves Focus",
			"disableTabMode": "Disable Accessibility Mode",
			"gotoLine": "Go to Line",
			"selectIndentation": "Select Indentation",
			"selectEncoding": "Select Encoding",
			"selectEOL": "Select End of Line Sequence",
			"selectLanguageMode": "Select Language Mode",
			"fileInfo": "File Information",
			"screenReaderDetectedExplanation.question": "Are you using a screen reader to operate VS Code?",
			"screenReaderDetectedExplanation.answerYes": "Yes",
			"screenReaderDetectedExplanation.answerNo": "No",
			"spacesSize": "Spaces: {0}",
			"tabSize": "Tab Size: {0}",
			"showLanguageExtensions": "Search Marketplace Extensions for '{0}'...",
			"changeMode": "Change Language Mode",
			"noEditor": "No text editor active at this time",
			"languageDescription": "({0}) - Configured Language",
			"languageDescriptionConfigured": "({0})",
			"languagesPicks": "languages (identifier)",
			"configureModeSettings": "Configure '{0}' language based settings...",
			"configureAssociationsExt": "Configure File Association for '{0}'...",
			"autoDetect": "Auto Detect",
			"pickLanguage": "Select Language Mode",
			"currentAssociation": "Current Association",
			"pickLanguageToConfigure": "Select Language Mode to Associate with '{0}'",
			"changeIndentation": "Change Indentation",
			"noWritableCodeEditor": "The active code editor is read-only.",
			"indentConvert": "convert file",
			"indentView": "change view",
			"pickAction": "Select Action",
			"changeEndOfLine": "Change End of Line Sequence",
			"pickEndOfLine": "Select End of Line Sequence",
			"changeEncoding": "Change File Encoding",
			"noFileEditor": "No file active at this time",
			"saveWithEncoding": "Save with Encoding",
			"reopenWithEncoding": "Reopen with Encoding",
			"guessedEncoding": "Guessed from content",
			"pickEncodingForReopen": "Select File Encoding to Reopen File",
			"pickEncodingForSave": "Select File Encoding to Save with"
		},
		"vs/workbench/browser/parts/notifications/notificationsViewer": {
			"notificationActions": "Notification Actions",
			"notificationSource": "Source: {0}"
		},
		"vs/workbench/api/node/extHostDebugService": {
			"debug.terminal.title": "debuggee"
		},
		"vs/workbench/api/node/extHostDiagnostics": {
			"limitHit": "Not showing {0} further errors and warnings."
		},
		"vs/workbench/api/node/extHostProgress": {
			"extensionSource": "{0} (Extension)"
		},
		"vs/workbench/api/node/extHostTask": {
			"task.label": "{0}: {1}"
		},
		"vs/workbench/api/node/extHostTreeViews": {
			"treeView.notRegistered": "No tree view with id '{0}' registered.",
			"treeView.duplicateElement": "Element with id {0} is already registered"
		},
		"vs/workbench/browser/parts/editor/titleControl": {
			"araLabelEditorActions": "Editor actions"
		},
		"vs/workbench/browser/parts/editor/breadcrumbsControl": {
			"cmd.category": "View"
		},
		"vs/workbench/browser/parts/editor/breadcrumbs": {},
		"vs/workbench/browser/parts/editor/breadcrumbsPicker": {
			"placeholder": "Find"
		},
		"vs/workbench/parts/logs/electron-browser/logs.contribution": {
			"mainLog": "Main",
			"sharedLog": "Shared",
			"rendererLog": "Window",
			"telemetryLog": "Telemetry",
			"developer": "Developer"
		},
		"vs/workbench/parts/logs/electron-browser/logsActions": {
			"openLogsFolder": "Open Logs Folder",
			"setLogLevel": "Set Log Level...",
			"trace": "Trace",
			"debug": "Debug",
			"info": "Info",
			"warn": "Warning",
			"err": "Error",
			"critical": "Critical",
			"off": "Off",
			"selectLogLevel": "Select log level",
			"default and current": "Default & Current",
			"default": "Default",
			"current": "Current"
		},
		"vs/workbench/parts/output/electron-browser/output.contribution": {
			"output": "Output",
			"logViewer": "Log Viewer",
			"viewCategory": "View",
			"developer": "Developer",
			"clearOutput.label": "Clear Output",
			"openActiveLogOutputFile": "View: Open Active Log Output File"
		},
		"vs/workbench/parts/output/browser/outputPanel": {
			"output": "Output",
			"outputPanelAriaLabel": "Output panel"
		},
		"vs/workbench/parts/output/electron-browser/outputServices": {
			"output": "{0} - Output",
			"channel": "Output channel for '{0}'"
		},
		"vs/workbench/parts/output/browser/outputActions": {
			"toggleOutput": "Toggle Output",
			"clearOutput": "Clear Output",
			"toggleOutputScrollLock": "Toggle Output Scroll Lock",
			"switchToOutput.label": "Switch to Output",
			"openInLogViewer": "Open Log File",
			"showLogs": "Show Logs...",
			"openLogFile": "Open Log File..."
		},
		"vs/workbench/parts/performance/electron-browser/startupProfiler": {
			"prof.message": "Successfully created profiles.",
			"prof.restartAndFileIssue": "Create Issue and Restart",
			"prof.restart": "Restart",
			"prof.thanks": "Thanks for helping us."
		},
		"vs/workbench/parts/performance/electron-browser/actions": {
			"appPerf": "Startup Performance",
			"reportPerformanceIssue": "Report Performance Issue",
			"developer": "Developer"
		},
		"vs/workbench/parts/preferences/electron-browser/preferences.contribution": {
			"defaultPreferencesEditor": "Default Preferences Editor",
			"settingsEditor2": "Settings Editor 2",
			"keybindingsEditor": "Keybindings Editor",
			"preferences": "Preferences",
			"showDefaultKeybindings": "Show Default Keybindings",
			"showUserKeybindings": "Show User Keybindings"
		},
		"vs/workbench/parts/preferences/browser/keybindingsEditorContribution": {
			"defineKeybinding.start": "Define Keybinding",
			"defineKeybinding.kbLayoutErrorMessage": "You won't be able to produce this key combination under your current keyboard layout.",
			"defineKeybinding.kbLayoutLocalAndUSMessage": "**{0}** for your current keyboard layout (**{1}** for US standard).",
			"defineKeybinding.kbLayoutLocalMessage": "**{0}** for your current keyboard layout."
		},
		"vs/workbench/parts/preferences/browser/preferencesEditor": {
			"SearchSettingsWidget.AriaLabel": "Search settings",
			"SearchSettingsWidget.Placeholder": "Search Settings",
			"noSettingsFound": "No Results",
			"oneSettingFound": "1 Setting Found",
			"settingsFound": "{0} Settings Found",
			"totalSettingsMessage": "Total {0} Settings",
			"nlpResult": "Natural Language Results",
			"filterResult": "Filtered Results",
			"defaultSettings": "Default Settings",
			"defaultUserSettings": "Default User Settings",
			"defaultWorkspaceSettings": "Default Workspace Settings",
			"defaultFolderSettings": "Default Folder Settings",
			"defaultEditorReadonly": "Edit in the right hand side editor to override defaults.",
			"preferencesAriaLabel": "Default preferences. Readonly text editor."
		},
		"vs/workbench/parts/preferences/electron-browser/settingsEditor2": {
			"SearchSettings.AriaLabel": "Search settings",
			"openSettingsJsonLabel": "Open settings.json",
			"oneResult": "1 Setting Found",
			"moreThanOneResult": "{0} Settings Found"
		},
		"vs/workbench/parts/preferences/browser/keybindingsEditor": {
			"sortByPrecedeneLabel": "Sort by Precedence",
			"sortByPrecedeneLabelWithKeybinding": "{0} ({1})",
			"recordKeysLabelWithKeybinding": "{0} ({1})",
			"header-message": "For advanced customizations open and edit",
			"keybindings-file-name": "keybindings.json",
			"keybindingsLabel": "Keybindings",
			"changeLabel": "Change Keybinding",
			"addLabel": "Add Keybinding",
			"removeLabel": "Remove Keybinding",
			"resetLabel": "Reset Keybinding",
			"showSameKeybindings": "Show Same Keybindings",
			"copyLabel": "Copy",
			"copyCommandLabel": "Copy Command",
			"error": "Error '{0}' while editing the keybinding. Please open 'keybindings.json' file and check for errors.",
			"command": "Command",
			"keybinding": "Keybinding",
			"source": "Source",
			"when": "When",
			"editKeybindingLabelWithKey": "Change Keybinding {0}",
			"editKeybindingLabel": "Change Keybinding",
			"addKeybindingLabelWithKey": "Add Keybinding {0}",
			"addKeybindingLabel": "Add Keybinding",
			"title": "{0} ({1})",
			"commandAriaLabel": "Command is {0}.",
			"keybindingAriaLabel": "Keybinding is {0}.",
			"noKeybinding": "No Keybinding assigned.",
			"sourceAriaLabel": "Source is {0}.",
			"whenAriaLabel": "When is {0}.",
			"noWhen": "No when context."
		},
		"vs/workbench/parts/preferences/browser/preferencesActions": {
			"openRawDefaultSettings": "Open Raw Default Settings",
			"openSettings": "Open Settings",
			"openGlobalSettings": "Open User Settings",
			"openGlobalKeybindings": "Open Keyboard Shortcuts",
			"openGlobalKeybindingsFile": "Open Keyboard Shortcuts File",
			"openWorkspaceSettings": "Open Workspace Settings",
			"openFolderSettings": "Open Folder Settings",
			"configureLanguageBasedSettings": "Configure Language Specific Settings...",
			"languageDescriptionConfigured": "({0})",
			"pickLanguage": "Select Language"
		},
		"vs/workbench/parts/preferences/browser/keybindingWidgets": {
			"defineKeybinding.initial": "Press desired key combination and then press ENTER.",
			"defineKeybinding.chordsTo": "chord to"
		},
		"vs/workbench/parts/preferences/browser/preferencesRenderers": {
			"emptyUserSettingsHeader": "Place your settings here to overwrite the Default Settings.",
			"emptyWorkspaceSettingsHeader": "Place your settings here to overwrite the User Settings.",
			"emptyFolderSettingsHeader": "Place your folder settings here to overwrite those from the Workspace Settings.",
			"editTtile": "Edit",
			"replaceDefaultValue": "Replace in Settings",
			"copyDefaultValue": "Copy to Settings"
		},
		"vs/workbench/parts/preferences/browser/preferencesWidgets": {
			"defaultSettings": "Place your settings in the right hand side editor to override.",
			"noSettingsFound": "No Settings Found.",
			"settingsSwitcherBarAriaLabel": "Settings Switcher",
			"userSettings": "User Settings",
			"workspaceSettings": "Workspace Settings",
			"folderSettings": "Folder Settings"
		},
		"vs/workbench/parts/preferences/browser/settingsLayout": {
			"textEditor": "Text Editor",
			"find": "Find",
			"files": "Files",
			"workbench": "Workbench",
			"zenMode": "Zen Mode",
			"window": "Window",
			"newWindow": "New Window",
			"features": "Features",
			"fileExplorer": "Explorer",
			"search": "Search",
			"debug": "Debug",
			"scm": "SCM",
			"terminal": "Terminal",
			"problems": "Problems",
			"keyboard": "Keyboard",
			"update": "Update",
			"telemetry": "Telemetry"
		},
		"vs/workbench/parts/preferences/browser/settingsTree": {
			"extensions": "Extensions",
			"modified": "Modified",
			"editInSettingsJson": "Edit in settings.json",
			"treeAriaLabel": "Settings"
		},
		"vs/workbench/parts/preferences/browser/settingsTreeModels": {},
		"vs/workbench/parts/preferences/browser/settingsWidgets": {
			"okButton": "OK",
			"cancelButton": "Cancel"
		},
		"vs/workbench/parts/relauncher/electron-browser/relauncher.contribution": {
			"relaunchSettingMessage": "A setting has changed that requires a restart to take effect.",
			"relaunchSettingDetail": "Press the restart button to restart {0} and enable the setting.",
			"restart": "&&Restart"
		},
		"vs/workbench/parts/scm/electron-browser/scm.contribution": {
			"toggleGitViewlet": "Show Git",
			"source control": "Source Control",
			"toggleSCMViewlet": "Show SCM",
			"view": "View",
			"scmConfigurationTitle": "SCM",
			"diffDecorations": "Controls diff decorations in the editor.",
			"diffGutterWidth": "Controls the width(px) of diff decorations in gutter (added & modified)."
		},
		"vs/workbench/parts/scm/electron-browser/scmViewlet": {
			"scm providers": "Source Control Providers",
			"hideRepository": "Hide",
			"source control": "Source Control",
			"viewletTitle": "{0}: {1}",
			"hideView": "Hide"
		},
		"vs/workbench/parts/scm/electron-browser/dirtydiffDecorator": {
			"changes": "{0} of {1} changes",
			"change": "{0} of {1} change",
			"show previous change": "Show Previous Change",
			"show next change": "Show Next Change",
			"move to previous change": "Move to Previous Change",
			"move to next change": "Move to Next Change"
		},
		"vs/workbench/parts/scm/electron-browser/scmActivity": {
			"scmPendingChangesBadge": "{0} pending changes"
		},
		"vs/workbench/parts/quickopen/browser/quickopen.contribution": {
			"view": "View",
			"commandsHandlerDescriptionDefault": "Show and Run Commands",
			"gotoLineDescriptionMac": "Go to Line",
			"gotoLineDescriptionWin": "Go to Line",
			"gotoSymbolDescription": "Go to Symbol in File",
			"gotoSymbolDescriptionScoped": "Go to Symbol in File by Category",
			"helpDescription": "Show Help",
			"viewPickerDescription": "Open View"
		},
		"vs/workbench/parts/quickopen/browser/gotoSymbolHandler": {
			"property": "properties ({0})",
			"method": "methods ({0})",
			"function": "functions ({0})",
			"_constructor": "constructors ({0})",
			"variable": "variables ({0})",
			"class": "classes ({0})",
			"interface": "interfaces ({0})",
			"namespace": "namespaces ({0})",
			"package": "packages ({0})",
			"modules": "modules ({0})",
			"enum": "enumerations ({0})",
			"string": "strings ({0})",
			"file": "files ({0})",
			"array": "arrays ({0})",
			"number": "numbers ({0})",
			"boolean": "booleans ({0})",
			"object": "objects ({0})",
			"key": "keys ({0})",
			"gotoSymbol": "Go to Symbol in File...",
			"symbols": "symbols ({0})",
			"noSymbolsMatching": "No symbols matching",
			"noSymbolsFound": "No symbols found",
			"gotoSymbolHandlerAriaLabel": "Type to narrow down symbols of the currently active editor.",
			"cannotRunGotoSymbolInFile": "No symbol information for the file",
			"cannotRunGotoSymbol": "Open a text file first to go to a symbol"
		},
		"vs/workbench/parts/quickopen/browser/commandsHandler": {
			"showTriggerActions": "Show All Commands",
			"clearCommandHistory": "Clear Command History",
			"showCommands.label": "Command Palette...",
			"actionNotEnabled": "Command '{0}' is not enabled in the current context.",
			"canNotRun": "Command '{0}' resulted in an error.",
			"recentlyUsed": "recently used",
			"morecCommands": "other commands",
			"cat.title": "{0}: {1}",
			"noCommandsMatching": "No commands matching"
		},
		"vs/workbench/parts/quickopen/browser/gotoLineHandler": {
			"gotoLine": "Go to Line...",
			"gotoLineLabelEmptyWithLimit": "Type a line number between 1 and {0} to navigate to",
			"gotoLineLabelEmpty": "Type a line number to navigate to",
			"gotoLineColumnLabel": "Go to line {0} and character {1}",
			"gotoLineLabel": "Go to line {0}",
			"gotoLineHandlerAriaLabel": "Type a line number to navigate to.",
			"cannotRunGotoLine": "Open a text file first to go to a line"
		},
		"vs/workbench/parts/quickopen/browser/helpHandler": {
			"globalCommands": "global commands",
			"editorCommands": "editor commands"
		},
		"vs/workbench/parts/quickopen/browser/viewPickerHandler": {
			"views": "Views",
			"panels": "Panels",
			"terminals": "Terminal",
			"terminalTitle": "{0}: {1}",
			"channels": "Output",
			"openView": "Open View",
			"quickOpenView": "Quick Open View"
		},
		"vs/workbench/parts/stats/node/workspaceStats": {
			"never again": "Don't Show Again",
			"openWorkspace": "Open Workspace"
		},
		"vs/workbench/parts/snippets/electron-browser/snippets.contribution": {
			"snippetSchema.json.default": "Empty snippet",
			"snippetSchema.json": "User snippet configuration",
			"snippetSchema.json.prefix": "The prefix to used when selecting the snippet in intellisense",
			"snippetSchema.json.description": "The snippet description."
		},
		"vs/workbench/parts/snippets/electron-browser/snippetsService": {
			"invalid.path.0": "Expected string in `contributes.{0}.path`. Provided value: {1}",
			"invalid.language": "Unknown language in `contributes.{0}.language`. Provided value: {1}",
			"invalid.path.1": "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.",
			"vscode.extension.contributes.snippets": "Contributes snippets.",
			"vscode.extension.contributes.snippets-language": "Language identifier for which this snippet is contributed to.",
			"vscode.extension.contributes.snippets-path": "Path of the snippets file. The path is relative to the extension folder and typically starts with './snippets/'.",
			"badVariableUse": "One or more snippets from the extension '{0}' very likely confuse snippet-variables and snippet-placeholders (see https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax for more details)"
		},
		"vs/workbench/parts/snippets/electron-browser/insertSnippet": {
			"snippet.suggestions.label": "Insert Snippet",
			"sep.userSnippet": "User Snippets",
			"sep.extSnippet": "Extension Snippets"
		},
		"vs/workbench/parts/snippets/electron-browser/configureSnippets": {
			"global.scope": "(global)",
			"global.1": "({0})",
			"new.global": "New Global Snippets file...",
			"group.global": "Existing Snippets",
			"new.global.sep": "New Snippets",
			"openSnippet.pickLanguage": "Select Snippets File or Create Snippets",
			"openSnippet.label": "Configure User Snippets",
			"preferences": "Preferences"
		},
		"vs/workbench/parts/snippets/electron-browser/snippetsFile": {
			"source.userSnippetGlobal": "Global User Snippet",
			"source.userSnippet": "User Snippet"
		},
		"vs/workbench/parts/snippets/electron-browser/snippetCompletionProvider": {
			"detail.snippet": "{0} ({1})"
		},
		"vs/workbench/parts/surveys/electron-browser/nps.contribution": {
			"surveyQuestion": "Do you mind taking a quick feedback survey?",
			"takeSurvey": "Take Survey",
			"remindLater": "Remind Me later",
			"neverAgain": "Don't Show Again"
		},
		"vs/workbench/parts/surveys/electron-browser/languageSurveys.contribution": {
			"helpUs": "Help us improve our support for {0}",
			"takeShortSurvey": "Take Short Survey",
			"remindLater": "Remind Me later",
			"neverAgain": "Don't Show Again"
		},
		"vs/workbench/parts/search/electron-browser/search.contribution": {
			"search": "Search",
			"copyMatchLabel": "Copy",
			"copyPathLabel": "Copy Path",
			"copyAllLabel": "Copy All",
			"clearSearchHistoryLabel": "Clear Search History",
			"toggleSearchViewPositionLabel": "Toggle Search View Position",
			"findInFolder": "Find in Folder...",
			"findInWorkspace": "Find in Workspace...",
			"showTriggerActions": "Go to Symbol in Workspace...",
			"name": "Search",
			"view": "View",
			"findInFiles": "Find in Files",
			"openAnythingHandlerDescription": "Go to File",
			"openSymbolDescriptionNormal": "Go to Symbol in Workspace",
			"searchConfigurationTitle": "Search",
			"exclude.boolean": "The glob pattern to match file paths against. Set to true or false to enable or disable the pattern.",
			"exclude.when": "Additional check on the siblings of a matching file. Use $(basename) as variable for the matching file name.",
			"search.followSymlinks": "Controls whether to follow symlinks while searching."
		},
		"vs/workbench/parts/search/browser/searchView": {
			"moreSearch": "Toggle Search Details",
			"searchScope.includes": "files to include",
			"label.includes": "Search Include Patterns",
			"searchScope.excludes": "files to exclude",
			"label.excludes": "Search Exclude Patterns",
			"replaceAll.confirmation.title": "Replace All",
			"replaceAll.occurrence.file.message": "Replaced {0} occurrence across {1} file with '{2}'.",
			"removeAll.occurrence.file.message": "Replaced {0} occurrence across {1} file'.",
			"replaceAll.occurrence.files.message": "Replaced {0} occurrence across {1} files with '{2}'.",
			"removeAll.occurrence.files.message": "Replaced {0} occurrence across {1} files.",
			"replaceAll.occurrences.file.message": "Replaced {0} occurrences across {1} file with '{2}'.",
			"removeAll.occurrences.file.message": "Replaced {0} occurrences across {1} file'.",
			"replaceAll.occurrences.files.message": "Replaced {0} occurrences across {1} files with '{2}'.",
			"removeAll.occurrences.files.message": "Replaced {0} occurrences across {1} files.",
			"removeAll.occurrence.file.confirmation.message": "Replace {0} occurrence across {1} file with '{2}'?",
			"replaceAll.occurrence.file.confirmation.message": "Replace {0} occurrence across {1} file'?",
			"removeAll.occurrence.files.confirmation.message": "Replace {0} occurrence across {1} files with '{2}'?",
			"replaceAll.occurrence.files.confirmation.message": "Replace {0} occurrence across {1} files?",
			"removeAll.occurrences.file.confirmation.message": "Replace {0} occurrences across {1} file with '{2}'?",
			"replaceAll.occurrences.file.confirmation.message": "Replace {0} occurrences across {1} file'?",
			"removeAll.occurrences.files.confirmation.message": "Replace {0} occurrences across {1} files with '{2}'?",
			"replaceAll.occurrences.files.confirmation.message": "Replace {0} occurrences across {1} files?",
			"treeAriaLabel": "Search Results",
			"searchPathNotFoundError": "Search path not found: {0}",
			"searchMaxResultsWarning": "The result set only contains a subset of all matches. Please be more specific in your search to narrow down the results.",
			"noResultsIncludesExcludes": "No results found in '{0}' excluding '{1}' - ",
			"noResultsIncludes": "No results found in '{0}' - ",
			"noResultsExcludes": "No results found excluding '{0}' - ",
			"noResultsFound": "No results found. Review your settings for configured exclusions and ignore files - ",
			"rerunSearch.message": "Search again",
			"rerunSearchInAll.message": "Search again in all files",
			"openSettings.message": "Open Settings",
			"openSettings.learnMore": "Learn More",
			"ariaSearchResultsStatus": "Search returned {0} results in {1} files",
			"search.file.result": "{0} result in {1} file",
			"search.files.result": "{0} result in {1} files",
			"search.file.results": "{0} results in {1} file",
			"search.files.results": "{0} results in {1} files",
			"searchWithoutFolder": "You have not yet opened a folder. Only open files are currently searched - ",
			"openFolder": "Open Folder"
		},
		"vs/workbench/parts/search/browser/openAnythingHandler": {
			"fileAndTypeResults": "file and symbol results",
			"fileResults": "file results"
		},
		"vs/workbench/parts/search/browser/searchWidget": {
			"search.action.replaceAll.disabled.label": "Replace All (Submit Search to Enable)",
			"search.action.replaceAll.enabled.label": "Replace All",
			"search.replace.toggle.button.title": "Toggle Replace",
			"label.Search": "Search: Type Search Term and press Enter to search or Escape to cancel",
			"search.placeHolder": "Search",
			"label.Replace": "Replace: Type replace term and press Enter to preview or Escape to cancel",
			"search.replace.placeHolder": "Replace",
			"regexp.validationFailure": "Expression matches everything",
			"regexp.backreferenceValidationFailure": "Backreferences are not supported"
		},
		"vs/workbench/parts/search/browser/openSymbolHandler": {
			"symbols": "symbol results",
			"noSymbolsMatching": "No symbols matching",
			"noSymbolsWithoutInput": "Type to search for symbols"
		},
		"vs/workbench/parts/search/browser/searchActions": {
			"findInFiles": "Find in Files",
			"showSearch": "Show Search",
			"replaceInFiles": "Replace in Files",
			"RefreshAction.label": "Refresh",
			"CollapseDeepestExpandedLevelAction.label": "Collapse All",
			"CancelSearchAction.label": "Cancel Search",
			"FocusNextSearchResult.label": "Focus Next Search Result",
			"FocusPreviousSearchResult.label": "Focus Previous Search Result",
			"RemoveAction.label": "Dismiss",
			"file.replaceAll.label": "Replace All",
			"match.replace.label": "Replace"
		},
		"vs/workbench/parts/search/browser/patternInputWidget": {
			"defaultLabel": "input",
			"useExcludesAndIgnoreFilesDescription": "Use Exclude Settings and Ignore Files"
		},
		"vs/workbench/parts/search/browser/searchResultsView": {
			"searchFolderMatch.other.label": "Other files",
			"searchFileMatches": "{0} files found",
			"searchFileMatch": "{0} file found",
			"searchMatches": "{0} matches found",
			"searchMatch": "{0} match found",
			"replacePreviewResultAria": "Replace term {0} with {1} at column position {2} in line with text {3}",
			"searchResultAria": "Found term {0} at column position {1} in line with text {2}"
		},
		"vs/workbench/parts/search/common/queryBuilder": {
			"search.noWorkspaceWithName": "No folder in workspace with name: {0}"
		},
		"vs/workbench/parts/search/browser/openFileHandler": {
			"searchResults": "search results"
		},
		"vs/workbench/parts/search/browser/replaceService": {},
		"vs/workbench/parts/themes/electron-browser/themes.contribution": {
			"selectTheme.label": "Colour Theme",
			"themes.category.light": "light themes",
			"themes.category.dark": "dark themes",
			"themes.category.hc": "high contrast themes",
			"installColorThemes": "Install Additional Colour Themes...",
			"themes.selectTheme": "Select Colour Theme (Up/Down Keys to Preview)",
			"selectIconTheme.label": "File Icon Theme",
			"noIconThemeLabel": "None",
			"noIconThemeDesc": "Disable file icons",
			"installIconThemes": "Install Additional File Icon Themes...",
			"themes.selectIconTheme": "Select File Icon Theme",
			"generateColorTheme.label": "Generate Colour Theme From Current Settings",
			"preferences": "Preferences",
			"developer": "Developer",
			"miSelectColorTheme": "&&Colour Theme",
			"miSelectIconTheme": "File &&Icon Theme"
		},
		"vs/workbench/parts/trust/electron-browser/unsupportedWorkspaceSettings.contribution": {
			"openWorkspaceSettings": "Open Workspace Settings",
			"dontShowAgain": "Don't Show Again",
			"unsupportedWorkspaceSettings": "This Workspace contains settings that can only be set in User Settings ({0}). Click [here]({1}) to learn more."
		},
		"vs/workbench/parts/terminal/electron-browser/terminal.contribution": {
			"quickOpen.terminal": "Show All Opened Terminals",
			"terminal": "Terminal",
			"terminalIntegratedConfigurationTitle": "Integrated Terminal",
			"terminal.integrated.fontSize": "Controls the font size in pixels of the terminal.",
			"terminal.integrated.fontWeight": "The font weight to use within the terminal for non-bold text.",
			"terminal.integrated.fontWeightBold": "The font weight to use within the terminal for bold text.",
			"terminal.integrated.cursorBlinking": "Controls whether the terminal cursor blinks.",
			"terminal.integrated.cursorStyle": "Controls the style of terminal cursor.",
			"terminal.integrated.scrollback": "Controls the maximum amount of lines the terminal keeps in its buffer.",
			"terminalCategory": "Terminal",
			"viewCategory": "View"
		},
		"vs/workbench/parts/terminal/browser/terminalQuickOpen": {
			"workbench.action.terminal.newplus": "$(plus) Create New Integrated Terminal",
			"noTerminalsMatching": "No terminals matching",
			"noTerminalsFound": "No terminals open"
		},
		"vs/workbench/parts/terminal/electron-browser/terminalPanel": {},
		"vs/workbench/parts/terminal/electron-browser/terminalActions": {
			"workbench.action.terminal.toggleTerminal": "Toggle Integrated Terminal",
			"workbench.action.terminal.kill": "Kill the Active Terminal Instance",
			"workbench.action.terminal.kill.short": "Kill Terminal",
			"workbench.action.terminal.quickKill": "Kill Terminal Instance",
			"workbench.action.terminal.copySelection": "Copy Selection",
			"workbench.action.terminal.copySelection.short": "Copy",
			"workbench.action.terminal.selectAll": "Select All",
			"workbench.action.terminal.deleteWordLeft": "Delete Word Left",
			"workbench.action.terminal.deleteWordRight": "Delete Word Right",
			"workbench.action.terminal.moveToLineStart": "Move To Line Start",
			"workbench.action.terminal.moveToLineEnd": "Move To Line End",
			"workbench.action.terminal.new": "Create New Integrated Terminal",
			"workbench.action.terminal.new.short": "New Terminal",
			"workbench.action.terminal.newWorkspacePlaceholder": "Select current working directory for new terminal",
			"workbench.action.terminal.newInActiveWorkspace": "Create New Integrated Terminal (In Active Workspace)",
			"workbench.action.terminal.split": "Split Terminal",
			"workbench.action.terminal.split.short": "Split",
			"workbench.action.terminal.splitInActiveWorkspace": "Split Terminal (In Active Workspace)",
			"workbench.action.terminal.focusPreviousPane": "Focus Previous Pane",
			"workbench.action.terminal.focusNextPane": "Focus Next Pane",
			"workbench.action.terminal.resizePaneLeft": "Resize Pane Left",
			"workbench.action.terminal.resizePaneRight": "Resize Pane Right",
			"workbench.action.terminal.resizePaneUp": "Resize Pane Up",
			"workbench.action.terminal.resizePaneDown": "Resize Pane Down",
			"workbench.action.terminal.focus": "Focus Terminal",
			"workbench.action.terminal.focusNext": "Focus Next Terminal",
			"workbench.action.terminal.focusPrevious": "Focus Previous Terminal",
			"workbench.action.terminal.paste": "Paste into Active Terminal",
			"workbench.action.terminal.paste.short": "Paste",
			"workbench.action.terminal.selectDefaultShell": "Select Default Shell",
			"workbench.action.terminal.runSelectedText": "Run Selected Text In Active Terminal",
			"workbench.action.terminal.runActiveFile": "Run Active File In Active Terminal",
			"workbench.action.terminal.runActiveFile.noFile": "Only files on disk can be run in the terminal",
			"workbench.action.terminal.switchTerminal": "Switch Terminal",
			"workbench.action.terminal.scrollDown": "Scroll Down (Line)",
			"workbench.action.terminal.scrollDownPage": "Scroll Down (Page)",
			"workbench.action.terminal.scrollToBottom": "Scroll to Bottom",
			"workbench.action.terminal.scrollUp": "Scroll Up (Line)",
			"workbench.action.terminal.scrollUpPage": "Scroll Up (Page)",
			"workbench.action.terminal.scrollToTop": "Scroll to Top",
			"workbench.action.terminal.clear": "Clear",
			"workbench.action.terminal.clearSelection": "Clear Selection",
			"workbench.action.terminal.allowWorkspaceShell": "Allow Workspace Shell Configuration",
			"workbench.action.terminal.disallowWorkspaceShell": "Disallow Workspace Shell Configuration",
			"workbench.action.terminal.rename": "Rename",
			"workbench.action.terminal.rename.prompt": "Enter terminal name",
			"workbench.action.terminal.focusFindWidget": "Focus Find Widget",
			"workbench.action.terminal.hideFindWidget": "Hide Find Widget",
			"quickOpenTerm": "Switch Active Terminal",
			"workbench.action.terminal.scrollToPreviousCommand": "Scroll To Previous Command",
			"workbench.action.terminal.scrollToNextCommand": "Scroll To Next Command",
			"workbench.action.terminal.selectToPreviousCommand": "Select To Previous Command",
			"workbench.action.terminal.selectToNextCommand": "Select To Next Command"
		},
		"vs/workbench/parts/terminal/electron-browser/terminalService": {
			"never again": "Don't Show Again"
		},
		"vs/workbench/parts/terminal/common/terminalColorRegistry": {
			"terminal.background": "The background colour of the terminal, this allows colouring the terminal differently to the panel.",
			"terminal.foreground": "The foreground color of the terminal.",
			"terminalCursor.foreground": "The foreground color of the terminal cursor.",
			"terminalCursor.background": "The background color of the terminal cursor. Allows customizing the color of a character overlapped by a block cursor.",
			"terminal.selectionBackground": "The selection background color of the terminal.",
			"terminal.border": "The color of the border that separates split panes within the terminal. This defaults to panel.border.",
			"terminal.ansiColor": "'{0}' ANSI color in the terminal."
		},
		"vs/workbench/parts/terminal/common/terminalMenu": {},
		"vs/workbench/parts/terminal/electron-browser/terminalConfigHelper": {
			"terminal.integrated.allowWorkspaceShell": "Do you allow {0} (defined as a workspace setting) to be launched in the terminal?",
			"allow": "Allow",
			"disallow": "Disallow"
		},
		"vs/workbench/parts/terminal/browser/terminalTab": {},
		"vs/workbench/parts/terminal/electron-browser/terminalInstance": {
			"terminal.integrated.a11yBlankLine": "Blank line",
			"terminal.integrated.a11yPromptLabel": "Terminal input",
			"yes": "Yes",
			"no": "No",
			"dontShowAgain": "Don't Show Again",
			"terminal.integrated.copySelection.noSelection": "The terminal has no selection to copy",
			"terminal.integrated.exitedWithCode": "The terminal process terminated with exit code: {0}",
			"terminal.integrated.launchFailed": "The terminal process command '{0}{1}' failed to launch (exit code: {2})",
			"terminal.integrated.launchFailedExtHost": "The terminal process failed to launch (exit code: {0})"
		},
		"vs/workbench/parts/terminal/electron-browser/terminalLinkHandler": {
			"terminalLinkHandler.followLinkAlt": "Alt + click to follow link",
			"terminalLinkHandler.followLinkCmd": "Cmd + click to follow link",
			"terminalLinkHandler.followLinkCtrl": "Ctrl + click to follow link"
		},
		"vs/workbench/parts/update/electron-browser/update": {
			"releaseNotes": "Release Notes",
			"showReleaseNotes": "Show Release Notes",
			"read the release notes": "Welcome to {0} v{1}! Would you like to read the Release Notes?",
			"neveragain": "Don't Show Again",
			"64bitisavailable": "{0} for 64-bit Windows is now available! Click [here]({1}) to learn more.",
			"updateIsReady": "New {0} update available.",
			"noUpdatesAvailable": "There are currently no updates available.",
			"ok": "OK",
			"thereIsUpdateAvailable": "There is an available update.",
			"download now": "Download Now",
			"later": "Later",
			"updateAvailable": "There's an update available: {0} {1}",
			"installUpdate": "Install Update",
			"updateAvailableAfterRestart": "Restart {0} to apply the latest update.",
			"updateNow": "Update Now",
			"commandPalette": "Command Palette...",
			"settings": "Settings",
			"showExtensions": "Extensions",
			"keyboardShortcuts": "Keyboard Shortcuts",
			"userSnippets": "User Snippets",
			"themes.selectIconTheme.label": "File Icon Theme",
			"checkForUpdates": "Check for Updates...",
			"checkingForUpdates": "Checking For Updates...",
			"DownloadingUpdate": "Downloading Update...",
			"installUpdate...": "Install Update...",
			"installingUpdate": "Installing Update...",
			"restartToUpdate": "Restart to Update..."
		},
		"vs/workbench/parts/update/electron-browser/releaseNotesEditor": {
			"releaseNotesInputName": "Release Notes: {0}",
			"unassigned": "unassigned"
		},
		"vs/workbench/parts/url/electron-browser/url.contribution": {
			"openUrl": "Open URL",
			"developer": "Developer"
		},
		"vs/workbench/parts/watermark/electron-browser/watermark": {
			"watermark.showCommands": "Show All Commands",
			"watermark.quickOpen": "Go to File",
			"watermark.openFile": "Open File",
			"watermark.openFolder": "Open Folder",
			"watermark.openFileFolder": "Open File or Folder",
			"watermark.openRecent": "Open Recent",
			"watermark.newUntitledFile": "New Untitled File",
			"watermark.toggleTerminal": "Toggle Terminal",
			"watermark.findInFiles": "Find in Files",
			"watermark.startDebugging": "Start Debugging",
			"watermark.unboundCommand": "unbound",
			"workbenchConfigurationTitle": "Workbench",
			"tips.enabled": "When enabled, will show the watermark tips when no editor is open."
		},
		"vs/workbench/parts/webview/electron-browser/webview.contribution": {
			"webview.editor.label": "webview editor",
			"developer": "Developer"
		},
		"vs/workbench/parts/webview/electron-browser/webviewCommands": {
			"openToolsLabel": "Open Webview Developer Tools",
			"refreshWebviewLabel": "Reload Webviews"
		},
		"vs/workbench/parts/tasks/electron-browser/task.contribution": {
			"tasksCategory": "Tasks",
			"ConfigureTaskRunnerAction.label": "Configure Task",
			"totalErrors": "{0} Errors",
			"totalWarnings": "{0} Warnings",
			"totalInfos": "{0} Infos",
			"problems": "Problems",
			"building": "Building...",
			"manyProblems": "10K+",
			"runningTasks": "Show Running Tasks",
			"tasks": "Tasks",
			"TaskSystem.noHotSwap": "Changing the task execution engine with an active task running requires to reload the Window",
			"reloadWindow": "Reload Window",
			"TaskServer.folderIgnored": "The folder {0} is ignored since it uses task version 0.1.0",
			"TaskService.noBuildTask1": "No build task defined. Mark a task with 'isBuildCommand' in the tasks.json file.",
			"TaskService.noBuildTask2": "No build task defined. Mark a task with as a 'build' group in the tasks.json file.",
			"TaskService.noTestTask1": "No test task defined. Mark a task with 'isTestCommand' in the tasks.json file.",
			"TaskService.noTestTask2": "No test task defined. Mark a task with as a 'test' group in the tasks.json file.",
			"TaskServer.noTask": "Requested task {0} to execute not found.",
			"TaskService.associate": "associate",
			"TaskService.attachProblemMatcher.continueWithout": "Continue without scanning the task output",
			"TaskService.attachProblemMatcher.never": "Never scan the task output",
			"TaskService.attachProblemMatcher.learnMoreAbout": "Learn more about scanning the task output",
			"selectProblemMatcher": "Select for which kind of errors and warnings to scan the task output",
			"customizeParseErrors": "The current task configuration has errors. Please fix the errors first before customizing a task.",
			"TaskSystem.activeSame.background": "The task '{0}' is already active and in background mode.",
			"TaskSystem.activeSame.noBackground": "The task '{0}' is already active.",
			"terminateTask": "Terminate Task",
			"restartTask": "Restart Task",
			"TaskSystem.active": "There is already a task running. Terminate it first before executing another task.",
			"TaskSystem.restartFailed": "Failed to terminate and restart task {0}",
			"TaskSystem.configurationErrors": "Error: the provided task configuration has validation errors and can't not be used. Please correct the errors first.",
			"TaskSystem.runningTask": "There is a task running. Do you want to terminate it?",
			"TaskSystem.noProcess": "The launched task doesn't exist anymore. If the task spawned background processes exiting VS Code might result in orphaned processes. To avoid this start the last background process with a wait flag.",
			"TerminateAction.label": "Terminate Task",
			"TaskSystem.unknownError": "An error has occurred while running a task. See task log for details.",
			"TaskService.noWorkspace": "Tasks are only available on a workspace folder.",
			"configureTask": "Configure Task",
			"recentlyUsed": "recently used tasks",
			"configured": "configured tasks",
			"detected": "detected tasks",
			"TaskService.ignoredFolder": "The following workspace folders are ignored since they use task version 0.1.0: {0}",
			"TaskService.notAgain": "Don't Show Again",
			"TaskService.pickRunTask": "Select the task to run",
			"TaslService.noEntryToRun": "No task to run found. Configure Tasks...",
			"TaskService.fetchingBuildTasks": "Fetching build tasks...",
			"TaskService.pickBuildTask": "Select the build task to run",
			"TaskService.noBuildTask": "No build task to run found. Configure Build Task...",
			"TaskService.fetchingTestTasks": "Fetching test tasks...",
			"TaskService.pickTestTask": "Select the test task to run",
			"TaskService.noTestTaskTerminal": "No test task to run found. Configure Tasks...",
			"TaskService.tastToTerminate": "Select task to terminate",
			"TaskService.noTaskRunning": "No task is currently running",
			"TerminateAction.noProcess": "The launched process doesn't exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.",
			"TerminateAction.failed": "Failed to terminate running task",
			"TaskService.tastToRestart": "Select the task to restart",
			"TaskService.noTaskToRestart": "No task to restart",
			"TaskService.template": "Select a Task Template",
			"TaskService.createJsonFile": "Create tasks.json file from template",
			"TaskService.openJsonFile": "Open tasks.json file",
			"TaskService.pickTask": "Select a task to configure",
			"TaskService.defaultBuildTaskExists": "{0} is already marked as the default build task",
			"TaskService.pickDefaultBuildTask": "Select the task to be used as the default build task",
			"TaskService.defaultTestTaskExists": "{0} is already marked as the default test task.",
			"TaskService.pickDefaultTestTask": "Select the task to be used as the default test task",
			"TaskService.pickShowTask": "Select the task to show its output",
			"TaskService.noTaskIsRunning": "No task is running",
			"ShowLogAction.label": "Show Task Log",
			"RunTaskAction.label": "Run Task",
			"RestartTaskAction.label": "Restart Running Task",
			"ShowTasksAction.label": "Show Running Tasks",
			"BuildAction.label": "Run Build Task",
			"TestAction.label": "Run Test Task",
			"ConfigureDefaultBuildTask.label": "Configure Default Build Task",
			"ConfigureDefaultTestTask.label": "Configure Default Test Task",
			"quickOpen.task": "Run Task"
		},
		"vs/workbench/parts/tasks/browser/taskQuickOpen": {
			"tasksAriaLabel": "Type the name of a task to run",
			"noTasksMatching": "No tasks matching",
			"noTasksFound": "No tasks found"
		},
		"vs/workbench/parts/tasks/common/problemMatcher": {
			"ProblemPatternParser.problemPattern.missingRegExp": "The problem pattern is missing a regular expression.",
			"ProblemPatternParser.loopProperty.notLast": "The loop property is only supported on the last line matcher.",
			"ProblemPatternParser.problemPattern.kindProperty.notFirst": "The problem pattern is invalid. The kind property must be provided only in the first element",
			"ProblemPatternParser.problemPattern.missingProperty": "The problem pattern is invalid. It must have at least have a file and a message.",
			"ProblemPatternSchema.kind": "whether the pattern matches a location (file and line) or only a file.",
			"ProblemPatternSchema.file": "The match group index of the filename. If omitted 1 is used.",
			"ProblemPatternSchema.line": "The match group index of the problem's line. Defaults to 2",
			"ProblemPatternSchema.column": "The match group index of the problem's line character. Defaults to 3",
			"ProblemPatternSchema.endLine": "The match group index of the problem's end line. Defaults to undefined",
			"ProblemPatternSchema.endColumn": "The match group index of the problem's end line character. Defaults to undefined",
			"ProblemPatternSchema.severity": "The match group index of the problem's severity. Defaults to undefined",
			"ProblemPatternSchema.code": "The match group index of the problem's code. Defaults to undefined",
			"ProblemPatternSchema.message": "The match group index of the message. If omitted it defaults to 4 if location is specified. Otherwise it defaults to 5.",
			"ProblemPatternSchema.loop": "In a multi line matcher loop indicated whether this pattern is executed in a loop as long as it matches. Can only specified on a last pattern in a multi line pattern.",
			"NamedProblemPatternSchema.name": "The name of the problem pattern.",
			"NamedMultiLineProblemPatternSchema.name": "The name of the problem multi line problem pattern.",
			"NamedMultiLineProblemPatternSchema.patterns": "The actual patterns.",
			"ProblemPatternExtPoint": "Contributes problem patterns",
			"ProblemPatternRegistry.error": "Invalid problem pattern. The pattern will be ignored.",
			"ProblemMatcherParser.noDefinedPatter": "Error: the pattern with the identifier {0} doesn't exist.",
			"ProblemMatcherParser.noIdentifier": "Error: the pattern property refers to an empty identifier.",
			"ProblemMatcherParser.noValidIdentifier": "Error: the pattern property {0} is not a valid pattern variable name.",
			"ProblemMatcherParser.problemPattern.watchingMatcher": "A problem matcher must define both a begin pattern and an end pattern for watching.",
			"WatchingPatternSchema.regexp": "The regular expression to detect the begin or end of a background task.",
			"WatchingPatternSchema.file": "The match group index of the filename. Can be omitted.",
			"PatternTypeSchema.name": "The name of a contributed or predefined pattern",
			"PatternTypeSchema.description": "A problem pattern or the name of a contributed or predefined problem pattern. Can be omitted if base is specified.",
			"ProblemMatcherSchema.base": "The name of a base problem matcher to use.",
			"ProblemMatcherSchema.owner": "The owner of the problem inside Code. Can be omitted if base is specified. Defaults to 'external' if omitted and base is not specified.",
			"ProblemMatcherSchema.severity": "The default severity for captures problems. Is used if the pattern doesn't define a match group for severity.",
			"ProblemMatcherSchema.fileLocation": "Defines how file names reported in a problem pattern should be interpreted.",
			"ProblemMatcherSchema.background": "Patterns to track the begin and end of a matcher active on a background task.",
			"ProblemMatcherSchema.background.activeOnStart": "If set to true the background monitor is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern",
			"ProblemMatcherSchema.background.beginsPattern": "If matched in the output the start of a background task is signaled.",
			"ProblemMatcherSchema.background.endsPattern": "If matched in the output the end of a background task is signaled.",
			"ProblemMatcherSchema.watching.deprecated": "The watching property is deprecated. Use background instead.",
			"ProblemMatcherSchema.watching": "Patterns to track the begin and end of a watching matcher.",
			"ProblemMatcherSchema.watching.activeOnStart": "If set to true the watcher is in active mode when the task starts. This is equals of issuing a line that matches the beginPattern",
			"ProblemMatcherSchema.watching.beginsPattern": "If matched in the output the start of a watching task is signaled.",
			"ProblemMatcherSchema.watching.endsPattern": "If matched in the output the end of a watching task is signaled.",
			"LegacyProblemMatcherSchema.watchedBegin.deprecated": "This property is deprecated. Use the watching property instead.",
			"LegacyProblemMatcherSchema.watchedBegin": "A regular expression signaling that a watched tasks begins executing triggered through file watching.",
			"LegacyProblemMatcherSchema.watchedEnd.deprecated": "This property is deprecated. Use the watching property instead.",
			"LegacyProblemMatcherSchema.watchedEnd": "A regular expression signaling that a watched tasks ends executing.",
			"NamedProblemMatcherSchema.name": "The name of the problem matcher used to refer to it.",
			"NamedProblemMatcherSchema.label": "A human readable label of the problem matcher.",
			"ProblemMatcherExtPoint": "Contributes problem matchers",
			"msCompile": "Microsoft compiler problems",
			"lessCompile": "Less problems",
			"gulp-tsc": "Gulp TSC Problems",
			"jshint": "JSHint problems",
			"jshint-stylish": "JSHint stylish problems",
			"eslint-compact": "ESLint compact problems",
			"eslint-stylish": "ESLint stylish problems",
			"go": "Go problems"
		},
		"vs/workbench/parts/tasks/common/taskTemplates": {
			"dotnetCore": "Executes .NET Core build command",
			"msbuild": "Executes the build target",
			"externalCommand": "Example to run an arbitrary external command",
			"Maven": "Executes common maven commands"
		},
		"vs/workbench/parts/tasks/node/tasks": {},
		"vs/workbench/parts/tasks/node/taskConfiguration": {
			"ConfigurationParser.noShell": "Warning: shell configuration is only supported when executing tasks in the terminal.",
			"ConfigurationParser.noTypeDefinition": "Error: there is no registered task type '{0}'. Did you miss to install an extension that provides a corresponding task provider?"
		},
		"vs/workbench/parts/tasks/node/processTaskSystem": {
			"TaskRunnerSystem.unknownError": "A unknown error has occurred while executing a task. See task output log for details.",
			"TaskRunnerSystem.childProcessError": "Failed to launch external program {0} {1}.",
			"unkownProblemMatcher": "Problem matcher {0} can't be resolved. The matcher will be ignored"
		},
		"vs/workbench/parts/tasks/electron-browser/terminalTaskSystem": {
			"TerminalTaskSystem.unknownError": "A unknown error has occurred while executing a task. See task output log for details.",
			"dependencyFailed": "Couldn't resolve dependent task '{0}' in workspace folder '{1}'",
			"TerminalTaskSystem.terminalName": "Task - {0}",
			"closeTerminal": "Press any key to close the terminal.",
			"TerminalTaskSystem": "Can't execute a shell command on an UNC drive using cmd.exe.",
			"unkownProblemMatcher": "Problem matcher {0} can't be resolved. The matcher will be ignored"
		},
		"vs/workbench/parts/tasks/node/processRunnerDetector": {
			"TaskSystemDetector.noGulpTasks": "Running gulp --tasks-simple didn't list any tasks. Did you run npm install?",
			"TaskSystemDetector.noJakeTasks": "Running jake --tasks didn't list any tasks. Did you run npm install?",
			"TaskSystemDetector.noGulpProgram": "Gulp is not installed on your system. Run npm install -g gulp to install it.",
			"TaskSystemDetector.noJakeProgram": "Jake is not installed on your system. Run npm install -g jake to install it.",
			"TaskSystemDetector.noGruntProgram": "Grunt is not installed on your system. Run npm install -g grunt to install it.",
			"TaskSystemDetector.noProgram": "Program {0} was not found. Message is {1}",
			"TaskSystemDetector.buildTaskDetected": "Build task named '{0}' detected.",
			"TaskSystemDetector.testTaskDetected": "Test task named '{0}' detected."
		},
		"vs/workbench/parts/tasks/browser/quickOpen": {
			"recentlyUsed": "recently used tasks",
			"configured": "configured tasks",
			"detected": "detected tasks",
			"customizeTask": "Configure Task"
		},
		"vs/workbench/parts/tasks/common/taskDefinitionRegistry": {
			"TaskDefinition.description": "The actual task type. Please note that types starting with a '$' are reserved for internal usage.",
			"TaskDefinition.properties": "Additional properties of the task type",
			"TaskTypeConfiguration.noType": "The task type configuration is missing the required 'taskType' property",
			"TaskDefinitionExtPoint": "Contributes task kinds"
		},
		"vs/workbench/parts/tasks/electron-browser/jsonSchema_v1": {
			"JsonSchema.version": "The config's version number",
			"JsonSchema._runner": "The runner has graduated. Use the offical runner property",
			"JsonSchema.runner": "Defines whether the task is executed as a process and the output is shown in the output window or inside the terminal.",
			"JsonSchema.windows": "Windows specific command configuration",
			"JsonSchema.mac": "Mac specific command configuration",
			"JsonSchema.linux": "Linux specific command configuration",
			"JsonSchema.shell": "Specifies whether the command is a shell command or an external program. Defaults to false if omitted."
		},
		"vs/workbench/parts/tasks/electron-browser/jsonSchema_v2": {
			"JsonSchema.shell": "Specifies whether the command is a shell command or an external program. Defaults to false if omitted.",
			"JsonSchema.tasks.isShellCommand.deprecated": "The property isShellCommand is deprecated. Use the type property of the task and the shell property in the options instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.dependsOn.string": "Another task this task depends on.",
			"JsonSchema.tasks.dependsOn.array": "The other tasks this task depends on.",
			"JsonSchema.tasks.presentation": "Configures the panel that is used to present the task's ouput and reads its input.",
			"JsonSchema.tasks.presentation.echo": "Controls whether the executed command is echoed to the panel. Default is true.",
			"JsonSchema.tasks.presentation.focus": "Controls whether the panel takes focus. Default is false. If set to true the panel is revealed as well.",
			"JsonSchema.tasks.presentation.reveal.always": "Always reveals the terminal when this task is executed.",
			"JsonSchema.tasks.presentation.reveal.silent": "Only reveals the terminal if no problem matcher is associated with the task and an errors occurs executing it.",
			"JsonSchema.tasks.presentation.reveal.never": "Never reveals the terminal when this task is executed.",
			"JsonSchema.tasks.terminal": "The terminal property is deprecated. Use presentation instead",
			"JsonSchema.tasks.group.kind": "The task's execution group.",
			"JsonSchema.tasks.group.isDefault": "Defines if this task is the default task in the group.",
			"JsonSchema.tasks.group.defaultBuild": "Marks the task as the default build task.",
			"JsonSchema.tasks.group.defaultTest": "Marks the task as the default test task.",
			"JsonSchema.tasks.group.build": "Marks the task as a build task accesible through the 'Run Build Task' command.",
			"JsonSchema.tasks.group.test": "Marks the task as a test task accesible through the 'Run Test Task' command.",
			"JsonSchema.tasks.group.none": "Assigns the task to no group",
			"JsonSchema.tasks.type": "Defines whether the task is run as a process or as a command inside a shell.",
			"JsonSchema.commandArray": "The shell command to be executed. Array items will be joined using a space character",
			"JsonSchema.command.quotedString.value": "The actual command value",
			"JsonSchema.tasks.quoting.weak": "Quotes the argument using the shell's weak quote character (e.g. ' under PowerShell and bash).",
			"JsonSchema.command.quotesString.quote": "How the command value should be quoted.",
			"JsonSchema.command": "The command to be executed. Can be an external program or a shell command.",
			"JsonSchema.args.quotedString.value": "The actual argument value",
			"JsonSchema.args.quotesString.quote": "How the argument value should be quoted.",
			"JsonSchema.tasks.args": "Arguments passed to the command when this task is invoked.",
			"JsonSchema.tasks.label": "The task's user interface label",
			"JsonSchema.version": "The config's version number.",
			"JsonSchema.tasks.identifier": "A user defined identifier to reference the task in launch.json or a dependsOn clause.",
			"JsonSchema.tasks.taskLabel": "The task's label",
			"JsonSchema.tasks.taskName": "The task's name",
			"JsonSchema.tasks.taskName.deprecated": "The task's name property is deprecated. Use the label property instead.",
			"JsonSchema.tasks.background": "Whether the executed task is kept alive and is running in the background.",
			"JsonSchema.tasks.promptOnClose": "Whether the user is prompted when VS Code closes with a running task.",
			"JsonSchema.tasks.matchers": "The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.",
			"JsonSchema.tasks.showOputput.deprecated": "The property showOutput is deprecated. Use the reveal property inside the presentation property instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.echoCommand.deprecated": "The property echoCommand is deprecated. Use the echo property inside the presentation property instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.suppressTaskName.deprecated": "The property suppressTaskName is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.isBuildCommand.deprecated": "The property isBuildCommand is deprecated. Use the group property instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.isTestCommand.deprecated": "The property isTestCommand is deprecated. Use the group property instead. See also the 1.14 release notes.",
			"JsonSchema.tasks.taskSelector.deprecated": "The property taskSelector is deprecated. Inline the command with its arguments into the task instead. See also the 1.14 release notes.",
			"JsonSchema.windows": "Windows specific command configuration",
			"JsonSchema.mac": "Mac specific command configuration",
			"JsonSchema.linux": "Linux specific command configuration"
		},
		"vs/workbench/parts/tasks/electron-browser/jsonSchemaCommon": {
			"JsonSchema.options": "Additional command options",
			"JsonSchema.options.cwd": "The current working directory of the executed program or script. If omitted Code's current workspace root is used.",
			"JsonSchema.options.env": "The environment of the executed program or shell. If omitted the parent process' environment is used.",
			"JsonSchema.shellConfiguration": "Configures the shell to be used.",
			"JsonSchema.shell.executable": "The shell to be used.",
			"JsonSchema.shell.args": "The shell arguments.",
			"JsonSchema.command": "The command to be executed. Can be an external program or a shell command.",
			"JsonSchema.tasks.args": "Arguments passed to the command when this task is invoked.",
			"JsonSchema.tasks.taskName": "The task's name",
			"JsonSchema.tasks.windows": "Windows specific command configuration",
			"JsonSchema.tasks.mac": "Mac specific command configuration",
			"JsonSchema.tasks.linux": "Linux specific command configuration",
			"JsonSchema.tasks.suppressTaskName": "Controls whether the task name is added as an argument to the command. If omitted the globally defined value is used.",
			"JsonSchema.tasks.showOutput": "Controls whether the output of the running task is shown or not. If omitted the globally defined value is used.",
			"JsonSchema.echoCommand": "Controls whether the executed command is echoed to the output. Default is false.",
			"JsonSchema.tasks.watching.deprecation": "Deprecated. Use isBackground instead.",
			"JsonSchema.tasks.watching": "Whether the executed task is kept alive and is watching the file system.",
			"JsonSchema.tasks.background": "Whether the executed task is kept alive and is running in the background.",
			"JsonSchema.tasks.promptOnClose": "Whether the user is prompted when VS Code closes with a running task.",
			"JsonSchema.tasks.build": "Maps this task to Code's default build command.",
			"JsonSchema.tasks.test": "Maps this task to Code's default test command.",
			"JsonSchema.tasks.matchers": "The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.",
			"JsonSchema.args": "Additional arguments passed to the command.",
			"JsonSchema.showOutput": "Controls whether the output of the running task is shown or not. If omitted 'always' is used.",
			"JsonSchema.watching.deprecation": "Deprecated. Use isBackground instead.",
			"JsonSchema.watching": "Whether the executed task is kept alive and is watching the file system.",
			"JsonSchema.background": "Whether the executed task is kept alive and is running in the background.",
			"JsonSchema.promptOnClose": "Whether the user is prompted when VS Code closes with a running background task.",
			"JsonSchema.suppressTaskName": "Controls whether the task name is added as an argument to the command. Default is false.",
			"JsonSchema.taskSelector": "Prefix to indicate that an argument is task.",
			"JsonSchema.matchers": "The problem matcher(s) to use. Can either be a string or a problem matcher definition or an array of strings and problem matchers.",
			"JsonSchema.tasks": "The task configurations. Usually these are enrichments of task already defined in the external task runner."
		},
		"vs/workbench/parts/outline/electron-browser/outline.contribution": {
			"outline.problem.colors": "Use colours for Errors & Warnings."
		},
		"vs/workbench/parts/outline/electron-browser/outlinePanel": {
			"find.placeholder": "Find",
			"collapse": "Collapse All",
			"sortByName": "Sort By: Name",
			"find": "Find"
		},
		"vs/workbench/parts/welcome/walkThrough/electron-browser/walkThrough.contribution": {
			"walkThrough.editor.label": "Interactive Playground",
			"help": "Help"
		},
		"vs/workbench/parts/welcome/page/electron-browser/welcomePage.contribution": {
			"workbenchConfigurationTitle": "Workbench",
			"workbench.startupEditor.none": "Start without an editor.",
			"workbench.startupEditor.welcomePage": "Open the Welcome page (default).",
			"help": "Help"
		},
		"vs/workbench/parts/welcome/overlay/browser/welcomeOverlay": {
			"welcomeOverlay.explorer": "File explorer",
			"welcomeOverlay.search": "Search across files",
			"welcomeOverlay.git": "Source code management",
			"welcomeOverlay.debug": "Launch and debug",
			"welcomeOverlay.extensions": "Manage extensions",
			"welcomeOverlay.problems": "View errors and warnings",
			"welcomeOverlay.commandPalette": "Find and run all commands",
			"welcomeOverlay.notifications": "Show notifications",
			"welcomeOverlay": "User Interface Overview",
			"hideWelcomeOverlay": "Hide Interface Overview",
			"help": "Help"
		},
		"vs/workbench/parts/welcome/walkThrough/electron-browser/walkThroughPart": {
			"walkThrough.unboundCommand": "unbound",
			"walkThrough.gitNotFound": "It looks like Git is not installed on your system."
		},
		"vs/workbench/parts/welcome/walkThrough/electron-browser/editor/editorWalkThrough": {
			"editorWalkThrough.title": "Interactive Playground",
			"editorWalkThrough": "Interactive Playground"
		},
		"vs/workbench/parts/welcome/page/electron-browser/welcomePage": {
			"welcomePage": "Welcome",
			"welcomePage.javaScript": "JavaScript",
			"welcomePage.typeScript": "TypeScript",
			"welcomePage.python": "Python",
			"welcomePage.php": "PHP",
			"welcomePage.azure": "Azure",
			"welcomePage.showAzureExtensions": "Show Azure extensions",
			"welcomePage.docker": "Docker",
			"welcomePage.vim": "Vim",
			"welcomePage.sublime": "Sublime",
			"welcomePage.atom": "Atom",
			"welcomePage.extensionPackAlreadyInstalled": "Support for {0} is already installed.",
			"welcomePage.willReloadAfterInstallingExtensionPack": "The window will reload after installing additional support for {0}.",
			"welcomePage.installingExtensionPack": "Installing additional support for {0}...",
			"welcomePage.extensionPackNotFound": "Support for {0} with id {1} could not be found.",
			"welcomePage.keymapAlreadyInstalled": "The {0} keyboard shortcuts are already installed.",
			"welcomePage.willReloadAfterInstallingKeymap": "The window will reload after installing the {0} keyboard shortcuts.",
			"welcomePage.installingKeymap": "Installing the {0} keyboard shortcuts...",
			"welcomePage.keymapNotFound": "The {0} keyboard shortcuts with id {1} could not be found.",
			"welcome.title": "Welcome",
			"welcomePage.openFolderWithPath": "Open folder {0} with path {1}",
			"welcomePage.installKeymap": "Install {0} keymap",
			"welcomePage.installExtensionPack": "Install additional support for {0}",
			"welcomePage.installedKeymap": "{0} keymap is already installed",
			"welcomePage.installedExtensionPack": "{0} support is already installed",
			"ok": "OK",
			"details": "Details"
		},
		"vs/workbench/parts/welcome/gettingStarted/electron-browser/telemetryOptOut": {
			"telemetryOptOut.optOutNotice": "Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt out]({1}).",
			"telemetryOptOut.optInNotice": "Help improve VS Code by allowing Microsoft to collect usage data. Read our [privacy statement]({0}) and learn how to [opt in]({1}).",
			"telemetryOptOut.readMore": "Read More"
		},
		"vs/workbench/parts/welcome/page/electron-browser/vs_code_welcome_page": {
			"welcomePage.vscode": "Visual Studio Code",
			"welcomePage.editingEvolved": "Editing evolved",
			"welcomePage.start": "Start",
			"welcomePage.newFile": "New file",
			"welcomePage.openFolder": "Open folder...",
			"welcomePage.addWorkspaceFolder": "Add workspace folder...",
			"welcomePage.recent": "Recent",
			"welcomePage.moreRecent": "More...",
			"welcomePage.noRecentFolders": "No recent folders",
			"welcomePage.help": "Help",
			"welcomePage.keybindingsCheatsheet": "Printable keyboard cheatsheet",
			"welcomePage.introductoryVideos": "Introductory videos",
			"welcomePage.tipsAndTricks": "Tips and Tricks",
			"welcomePage.productDocumentation": "Product documentation",
			"welcomePage.gitHubRepository": "GitHub repository",
			"welcomePage.stackOverflow": "Stack Overflow",
			"welcomePage.showOnStartup": "Show welcome page on startup",
			"welcomePage.installExtensionPacks": "Tools and languages",
			"welcomePage.installExtensionPacksDescription": "Install support for {0} and {1}",
			"welcomePage.moreExtensions": "more",
			"welcomePage.installKeymapDescription": "Settings and keybindings",
			"welcomePage.installKeymapExtension": "Install the settings and keyboard shortcuts of {0} and {1}",
			"welcomePage.others": "others",
			"welcomePage.colorThemeDescription": "Make the editor and your code look the way you love",
			"welcomePage.learn": "Learn",
			"welcomePage.showCommands": "Find and run all commands",
			"welcomePage.showCommandsDescription": "Rapidly access and search commands from the Command Palette ({0})",
			"welcomePage.interfaceOverview": "Interface overview",
			"welcomePage.interfaceOverviewDescription": "Get a visual overlay highlighting the major components of the UI",
			"welcomePage.interactivePlayground": "Interactive playground",
			"welcomePage.interactivePlaygroundDescription": "Try essential editor features out in a short walkthrough"
		},
		"vs/workbench/services/actions/electron-browser/menusExtensionPoint": {
			"requirearray": "menu items must be an array",
			"requirestring": "property `{0}` is mandatory and must be of type `string`",
			"optstring": "property `{0}` can be omitted or must be of type `string`",
			"vscode.extension.contributes.menuItem.command": "Identifier of the command to execute. The command must be declared in the 'commands'-section",
			"vscode.extension.contributes.menuItem.alt": "Identifier of an alternative command to execute. The command must be declared in the 'commands'-section",
			"vscode.extension.contributes.menuItem.when": "Condition which must be true to show this item",
			"vscode.extension.contributes.menuItem.group": "Group into which this command belongs",
			"vscode.extension.contributes.menus": "Contributes menu items to the editor",
			"menus.commandPalette": "The Command Palette",
			"menus.touchBar": "The touch bar (macOS only)",
			"menus.editorTitle": "The editor title menu",
			"menus.editorContext": "The editor context menu",
			"menus.explorerContext": "The file explorer context menu",
			"menus.editorTabContext": "The editor tabs context menu",
			"menus.debugCallstackContext": "The debug callstack context menu",
			"menus.scmTitle": "The Source Control title menu",
			"menus.scmSourceControl": "The Source Control menu",
			"menus.resourceGroupContext": "The Source Control resource group context menu",
			"menus.resourceStateContext": "The Source Control resource state context menu",
			"view.viewTitle": "The contributed view title menu",
			"view.itemContext": "The contributed view item context menu",
			"nonempty": "expected non-empty value.",
			"opticon": "property `icon` can be omitted or must be either a string or a literal like `{dark, light}`",
			"requireStringOrObject": "property `{0}` is mandatory and must be of type `string` or `object`",
			"requirestrings": "properties `{0}` and `{1}` are mandatory and must be of type `string`",
			"vscode.extension.contributes.commandType.command": "Identifier of the command to execute",
			"vscode.extension.contributes.commandType.title": "Title by which the command is represented in the UI",
			"vscode.extension.contributes.commandType.category": "(Optional) Category string by the command is grouped in the UI",
			"vscode.extension.contributes.commandType.icon": "(Optional) Icon which is used to represent the command in the UI. Either a file path or a themable configuration",
			"vscode.extension.contributes.commandType.icon.light": "Icon path when a light theme is used",
			"vscode.extension.contributes.commandType.icon.dark": "Icon path when a dark theme is used",
			"vscode.extension.contributes.commands": "Contributes commands to the command palette.",
			"dup": "Command `{0}` appears multiple times in the `commands` section.",
			"menuId.invalid": "`{0}` is not a valid menu identifier",
			"missing.command": "Menu item references a command `{0}` which is not defined in the 'commands' section.",
			"missing.altCommand": "Menu item references an alt-command `{0}` which is not defined in the 'commands' section.",
			"dupe.command": "Menu item references the same command as default and alt-command"
		},
		"vs/workbench/services/bulkEdit/electron-browser/bulkEditService": {},
		"vs/workbench/services/commands/common/commandService": {},
		"vs/workbench/services/configuration/common/configurationExtensionPoint": {
			"vscode.extension.contributes.configuration.title": "A summary of the settings. This label will be used in the settings file as separating comment.",
			"vscode.extension.contributes.configuration.properties": "Description of the configuration properties.",
			"scope.description": "Scope in which the configuration is applicable. Available scopes are `window` and `resource`.",
			"vscode.extension.contributes.defaultConfiguration": "Contributes default editor configuration settings by language.",
			"vscode.extension.contributes.configuration": "Contributes configuration settings.",
			"invalid.title": "'configuration.title' must be a string",
			"invalid.properties": "'configuration.properties' must be an object",
			"invalid.property": "'configuration.property' must be an object",
			"workspaceConfig.folders.description": "List of folders to be loaded in the workspace.",
			"workspaceConfig.path.description": "A file path. e.g. `/root/folderA` or `./folderA` for a relative path that will be resolved against the location of the workspace file.",
			"workspaceConfig.name.description": "An optional name for the folder. ",
			"workspaceConfig.uri.description": "URI of the folder",
			"workspaceConfig.settings.description": "Workspace settings",
			"workspaceConfig.launch.description": "Workspace launch configurations",
			"workspaceConfig.extensions.description": "Workspace extensions",
			"unknownWorkspaceProperty": "Unknown workspace configuration property"
		},
		"vs/workbench/services/configuration/node/configurationService": {
			"unsupportedApplicationSetting": "This setting can be applied only in User Settings",
			"unsupportedWindowSetting": "This setting cannot be applied now. It will be applied when you open this folder directly."
		},
		"vs/workbench/services/configuration/node/jsonEditingService": {
			"errorInvalidFile": "Unable to write into the file. Please open the file to correct errors/warnings in the file and try again.",
			"errorFileDirty": "Unable to write into the file because the file is dirty. Please save the file and try again."
		},
		"vs/workbench/services/configuration/node/configurationEditingService": {
			"openTasksConfiguration": "Open Tasks Configuration",
			"openLaunchConfiguration": "Open Launch Configuration",
			"open": "Open Settings",
			"saveAndRetry": "Save and Retry",
			"errorUnknownKey": "Unable to write to {0} because {1} is not a registered configuration.",
			"errorInvalidWorkspaceConfigurationApplication": "Unable to write {0} to Workspace Settings. This setting can be written only into User settings.",
			"errorInvalidFolderConfiguration": "Unable to write to Folder Settings because {0} does not support the folder resource scope.",
			"errorInvalidUserTarget": "Unable to write to User Settings because {0} does not support for global scope.",
			"errorInvalidWorkspaceTarget": "Unable to write to Workspace Settings because {0} does not support for workspace scope in a multi folder workspace.",
			"errorInvalidFolderTarget": "Unable to write to Folder Settings because no resource is provided.",
			"errorNoWorkspaceOpened": "Unable to write to {0} because no workspace is opened. Please open a workspace first and try again.",
			"errorInvalidTaskConfiguration": "Unable to write into the tasks configuration file. Please open it to correct errors/warnings in it and try again.",
			"errorInvalidLaunchConfiguration": "Unable to write into the launch configuration file. Please open it to correct errors/warnings in it and try again.",
			"errorInvalidConfiguration": "Unable to write into user settings. Please open the user settings to correct errors/warnings in it and try again.",
			"errorInvalidConfigurationWorkspace": "Unable to write into workspace settings. Please open the workspace settings to correct errors/warnings in the file and try again.",
			"errorInvalidConfigurationFolder": "Unable to write into folder settings. Please open the '{0}' folder settings to correct errors/warnings in it and try again.",
			"errorTasksConfigurationFileDirty": "Unable to write into tasks configuration file because the file is dirty. Please save it first and then try again.",
			"errorLaunchConfigurationFileDirty": "Unable to write into launch configuration file because the file is dirty. Please save it first and then try again.",
			"errorConfigurationFileDirty": "Unable to write into user settings because the file is dirty. Please save the user settings file first and then try again.",
			"errorConfigurationFileDirtyWorkspace": "Unable to write into workspace settings because the file is dirty. Please save the workspace settings file first and then try again.",
			"errorConfigurationFileDirtyFolder": "Unable to write into folder settings because the file is dirty. Please save the '{0}' folder settings file first and then try again.",
			"userTarget": "User Settings",
			"workspaceTarget": "Workspace Settings",
			"folderTarget": "Folder Settings"
		},
		"vs/workbench/services/configurationResolver/electron-browser/configurationResolverService": {
			"stringsOnlySupported": "Command '{0}' did not return a string result. Only strings are supported as results for commands used for variable substitution."
		},
		"vs/workbench/services/configurationResolver/node/variableResolver": {
			"missingEnvVarName": "'{0}' can not be resolved because no environment variable name is given.",
			"configNotFound": "'{0}' can not be resolved because setting '{1}' not found.",
			"configNoString": "'{0}' can not be resolved because '{1}' is a structured value.",
			"missingConfigName": "'{0}' can not be resolved because no settings name is given.",
			"noValueForCommand": "'{0}' can not be resolved because the command has no value.",
			"canNotFindFolder": "'{0}' can not be resolved. No such folder '{1}'.",
			"canNotResolveWorkspaceFolderMultiRoot": "'{0}' can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.",
			"canNotResolveWorkspaceFolder": "'{0}' can not be resolved. Please open a folder.",
			"canNotResolveFile": "'{0}' can not be resolved. Please open an editor.",
			"canNotResolveLineNumber": "'{0}' can not be resolved. Make sure to have a line selected in the active editor.",
			"canNotResolveSelectedText": "'{0}' can not be resolved. Make sure to have some text selected in the active editor."
		},
		"vs/workbench/services/crashReporter/electron-browser/crashReporterService": {
			"telemetryConfigurationTitle": "Telemetry"
		},
		"vs/workbench/services/dialogs/electron-browser/dialogService": {
			"yesButton": "&&Yes",
			"cancelButton": "Cancel"
		},
		"vs/workbench/services/editor/browser/editorService": {
			"compareLabels": "{0} ↔ {1}"
		},
		"vs/workbench/services/jsonschemas/common/jsonValidationExtensionPoint": {
			"contributes.jsonValidation": "Contributes json schema configuration.",
			"invalid.jsonValidation": "'configuration.jsonValidation' must be a array",
			"invalid.fileMatch": "'configuration.jsonValidation.fileMatch' must be defined",
			"invalid.url": "'configuration.jsonValidation.url' must be a URL or relative path",
			"invalid.url.fileschema": "'configuration.jsonValidation.url' is an invalid relative URL: {0}"
		},
		"vs/workbench/services/extensions/common/extensionsRegistry": {
			"vscode.extension.engines": "Engine compatibility.",
			"vscode.extension.publisher": "The publisher of the VS Code extension.",
			"vscode.extension.displayName": "The display name for the extension used in the VS Code gallery.",
			"vscode.extension.category.languages.deprecated": "Use 'Programming  Languages' instead",
			"vscode.extension.galleryBanner": "Banner used in the VS Code marketplace.",
			"vscode.extension.galleryBanner.color": "The banner colour on the VS Code marketplace page header.",
			"vscode.extension.galleryBanner.theme": "The colour theme for the font used in the banner.",
			"vscode.extension.contributes": "All contributions of the VS Code extension represented by this package.",
			"vscode.extension.preview": "Sets the extension to be flagged as a Preview in the Marketplace.",
			"vscode.extension.activationEvents": "Activation events for the VS Code extension.",
			"vscode.extension.activationEvents.onLanguage": "An activation event emitted whenever a file that resolves to the specified language gets opened.",
			"vscode.extension.activationEvents.onCommand": "An activation event emitted whenever the specified command gets invoked.",
			"vscode.extension.activationEvents.onDebug": "An activation event emitted whenever a user is about to start debugging or about to setup debug configurations.",
			"vscode.extension.activationEvents.onDebugResolve": "An activation event emitted whenever a debug session with the specific type is about to be launched (and a corresponding resolveDebugConfiguration method needs to be called).",
			"vscode.extension.activationEvents.workspaceContains": "An activation event emitted whenever a folder is opened that contains at least a file matching the specified glob pattern.",
			"vscode.extension.activationEvents.onView": "An activation event emitted whenever the specified view is expanded.",
			"vscode.extension.activationEvents.onUri": "An activation event emitted whenever a system-wide Uri directed towards this extension is open.",
			"vscode.extension.badges": "Array of badges to display in the sidebar of the Marketplace's extension page.",
			"vscode.extension.badges.url": "Badge image URL.",
			"vscode.extension.badges.href": "Badge link.",
			"vscode.extension.badges.description": "Badge description.",
			"vscode.extension.markdown": "Controls the Markdown rendering engine used in the Marketplace. Either github (default) or standard.",
			"vscode.extension.extensionDependencies": "Dependencies to other extensions. The identifier of an extension is always ${publisher}.${name}. For example: vscode.csharp.",
			"vscode.extension.scripts.prepublish": "Script executed before the package is published as a VS Code extension.",
			"vscode.extension.scripts.uninstall": "Uninstall hook for VS Code extension. Script that gets executed when the extension is completely uninstalled from VS Code which is when VS Code is restarted (shutdown and start) after the extension is uninstalled. Only Node scripts are supported.",
			"vscode.extension.icon": "The path to a 128x128 pixel icon."
		},
		"vs/workbench/services/extensions/electron-browser/runtimeExtensionsInput": {
			"extensionsInputName": "Running Extensions"
		},
		"vs/workbench/services/extensions/node/extensionManagementServerService": {},
		"vs/workbench/services/extensions/electron-browser/inactiveExtensionUrlHandler": {
			"confirmUrl": "Allow an extension to open this URL?"
		},
		"vs/workbench/services/extensions/electron-browser/extensionService": {
			"Reload": "Reload",
			"extensionHostProcess.crash": "Extension host terminated unexpectedly.",
			"extensionHostProcess.unresponsiveCrash": "Extension host terminated because it was not responsive.",
			"devTools": "Open Developer Tools",
			"restart": "Restart Extension Host",
			"extensionHostProcess.unresponsive.restart": "Restart Extension Host",
			"overwritingExtension": "Overwriting extension {0} with {1}.",
			"extensionUnderDevelopment": "Loading development extension at {0}",
			"extensionCache.invalid": "Extensions have been modified on disk. Please reload the window.",
			"reloadWindow": "Reload Window"
		},
		"vs/workbench/services/extensions/electron-browser/extensionHost": {
			"reloadWindow": "Reload Window",
			"extensionHostProcess.error": "Error from the extension host: {0}"
		},
		"vs/workbench/services/extensions/node/extensionPoints": {
			"jsonParseFail": "Failed to parse {0}: {1}.",
			"fileReadFail": "Cannot read file {0}: {1}.",
			"jsonsParseReportErrors": "Failed to parse {0}: {1}.",
			"missingNLSKey": "Couldn't find message for key {0}.",
			"notSemver": "Extension version is not semver compatible.",
			"extensionDescription.empty": "Got empty extension description",
			"extensionDescription.name": "property `{0}` is mandatory and must be of type `string`",
			"extensionDescription.version": "property `{0}` is mandatory and must be of type `string`",
			"extensionDescription.engines": "property `{0}` is mandatory and must be of type `object`",
			"extensionDescription.engines.vscode": "property `{0}` is mandatory and must be of type `string`",
			"extensionDescription.extensionDependencies": "property `{0}` can be omitted or must be of type `string[]`",
			"extensionDescription.activationEvents1": "property `{0}` can be omitted or must be of type `string[]`",
			"extensionDescription.activationEvents2": "properties `{0}` and `{1}` must both be specified or must both be omitted",
			"extensionDescription.main1": "property `{0}` can be omitted or must be of type `string`",
			"extensionDescription.main2": "Expected `main` ({0}) to be included inside extension's folder ({1}). This might make the extension non-portable.",
			"extensionDescription.main3": "properties `{0}` and `{1}` must both be specified or must both be omitted"
		},
		"vs/workbench/services/files/electron-browser/remoteFileService": {
			"invalidPath": "The path of resource '{0}' must be absolute",
			"fileNotFoundError": "File not found ({0})",
			"fileIsDirectoryError": "File is directory",
			"fileNotModifiedError": "File not modified since",
			"fileBinaryError": "File seems to be binary and cannot be opened as text",
			"err.create": "Failed to create file {0}",
			"fileMoveConflict": "Unable to move/copy. File already exists at destination."
		},
		"vs/workbench/services/files/electron-browser/fileService": {
			"netVersionError": "The Microsoft .NET Framework 4.5 is required. Please follow the link to install it.",
			"installNet": "Download .NET Framework 4.5",
			"neverShowAgain": "Don't Show Again",
			"enospcError": "{0} is unable to watch for file changes in this large workspace. Please follow the instructions link to resolve this issue.",
			"learnMore": "Instructions",
			"fileInvalidPath": "Invalid file resource ({0})",
			"fileIsDirectoryError": "File is directory",
			"fileNotModifiedError": "File not modified since",
			"fileTooLargeError": "File too large to open",
			"fileNotFoundError": "File not found ({0})",
			"fileBinaryError": "File seems to be binary and cannot be opened as text",
			"filePermission": "Permission denied writing to file ({0})",
			"fileExists": "File to create already exists ({0})",
			"fileModifiedError": "File Modified Since",
			"fileReadOnlyError": "File is Read Only",
			"fileMoveConflict": "Unable to move/copy. File already exists at destination.",
			"unableToMoveCopyError": "Unable to move/copy. File would replace folder it is contained in.",
			"binFailed": "Failed to move '{0}' to the recycle bin",
			"trashFailed": "Failed to move '{0}' to the trash"
		},
		"vs/workbench/services/keybinding/electron-browser/keybindingService": {
			"nonempty": "expected non-empty value.",
			"requirestring": "property `{0}` is mandatory and must be of type `string`",
			"optstring": "property `{0}` can be omitted or must be of type `string`",
			"vscode.extension.contributes.keybindings.command": "Identifier of the command to run when keybinding is triggered.",
			"vscode.extension.contributes.keybindings.mac": "Mac specific key or key sequence.",
			"vscode.extension.contributes.keybindings.linux": "Linux specific key or key sequence.",
			"vscode.extension.contributes.keybindings.win": "Windows specific key or key sequence.",
			"vscode.extension.contributes.keybindings.when": "Condition when the key is active.",
			"vscode.extension.contributes.keybindings": "Contributes keybindings.",
			"invalid.keybindings": "Invalid `contributes.{0}`: {1}",
			"unboundCommands": "Here are other available commands: ",
			"keybindings.json.title": "Keybindings configuration",
			"keybindings.json.key": "Key or key sequence (separated by space)",
			"keybindings.json.command": "Name of the command to execute",
			"keybindings.json.when": "Condition when the key is active.",
			"keybindings.json.args": "Arguments to pass to the command to execute.",
			"keyboardConfigurationTitle": "Keyboard",
			"dispatch": "Controls the dispatching logic for key presses to use either `code` (recommended) or `keyCode`.",
			"touchbar.enabled": "Enables the macOS touchbar buttons on the keyboard if available."
		},
		"vs/workbench/services/keybinding/common/keybindingEditing": {
			"errorKeybindingsFileDirty": "Unable to write because the keybindings configuration file is dirty. Please save it first and then try again.",
			"parseErrors": "Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.",
			"errorInvalidConfiguration": "Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.",
			"emptyKeybindingsHeader": "Place your key bindings in this file to overwrite the defaults"
		},
		"vs/workbench/services/mode/common/workbenchModeService": {
			"vscode.extension.contributes.languages": "Contributes language declarations.",
			"vscode.extension.contributes.languages.id": "ID of the language.",
			"vscode.extension.contributes.languages.aliases": "Name aliases for the language.",
			"vscode.extension.contributes.languages.extensions": "File extensions associated to the language.",
			"vscode.extension.contributes.languages.filenames": "File names associated to the language.",
			"vscode.extension.contributes.languages.filenamePatterns": "File name glob patterns associated to the language.",
			"vscode.extension.contributes.languages.mimetypes": "Mime types associated to the language.",
			"vscode.extension.contributes.languages.firstLine": "A regular expression matching the first line of a file of the language.",
			"vscode.extension.contributes.languages.configuration": "A relative path to a file containing configuration options for the language.",
			"invalid": "Invalid `contributes.{0}`. Expected an array.",
			"invalid.empty": "Empty value for `contributes.{0}`",
			"require.id": "property `{0}` is mandatory and must be of type `string`",
			"opt.extensions": "property `{0}` can be omitted and must be of type `string[]`",
			"opt.filenames": "property `{0}` can be omitted and must be of type `string[]`",
			"opt.firstLine": "property `{0}` can be omitted and must be of type `string`",
			"opt.configuration": "property `{0}` can be omitted and must be of type `string`",
			"opt.aliases": "property `{0}` can be omitted and must be of type `string[]`",
			"opt.mimetypes": "property `{0}` can be omitted and must be of type `string[]`"
		},
		"vs/workbench/services/progress/browser/progressService2": {
			"progress.text2": "{0}: {1}",
			"cancel": "Cancel"
		},
		"vs/workbench/services/textfile/electron-browser/textFileService": {
			"saveChangesMessage": "Do you want to save the changes you made to {0}?",
			"saveChangesMessages": "Do you want to save the changes to the following {0} files?",
			"saveAll": "&&Save All",
			"save": "&&Save",
			"dontSave": "Do&&n't Save",
			"cancel": "Cancel",
			"saveChangesDetail": "Your changes will be lost if you don't save them.",
			"allFiles": "All Files",
			"noExt": "No Extension"
		},
		"vs/workbench/services/textfile/common/textFileEditorModel": {
			"saveFileFirst": "The file is dirty. Please save it first before reopening it with another encoding.",
			"genericSaveError": "Failed to save '{0}': {1}"
		},
		"vs/workbench/services/textfile/common/textFileService": {
			"files.backup.failSave": "Files that are dirty could not be written to the backup location (Error: {0}). Try saving your files first and then exit."
		},
		"vs/workbench/services/themes/common/colorThemeSchema": {
			"schema.token.settings": "Colours and styles for the token.",
			"schema.token.foreground": "Foreground colour for the token.",
			"schema.token.background.warning": "Token background colours are currently not supported.",
			"schema.token.fontStyle.none": "None (clear inherited style)",
			"schema.properties.name": "Description of the rule.",
			"schema.properties.scope": "Scope selector against which this rule matches.",
			"schema.tokenColors.path": "Path to a tmTheme file (relative to the current file).",
			"schema.colors": "Colours for syntax highlighting"
		},
		"vs/workbench/services/themes/common/colorExtensionPoint": {
			"contributes.color": "Contributes extension defined themable colours",
			"contributes.color.id": "The identifier of the themable colour",
			"contributes.color.id.format": "Identifiers should be in the form aa[.bb]*",
			"contributes.color.description": "The description of the themable colour",
			"contributes.defaults.light": "The default colour for light themes. Either a colour value in hex (#RRGGBB[AA]) or the identifier of a themable colour which provides the default.",
			"contributes.defaults.dark": "The default colour for dark themes. Either a colour value in hex (#RRGGBB[AA]) or the identifier of a themable colour which provides the default.",
			"contributes.defaults.highContrast": "The default colour for high contrast themes. Either a colour value in hex (#RRGGBB[AA]) or the identifier of a themable colour which provides the default.",
			"invalid.colorConfiguration": "'configuration.colors' must be a array",
			"invalid.default.colorType": "{0} must be either a colour value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable colour which provides the default.",
			"invalid.id": "'configuration.colors.id' must be defined and can not be empty",
			"invalid.id.format": "'configuration.colors.id' must follow the word[.word]*",
			"invalid.description": "'configuration.colors.description' must be defined and can not be empty",
			"invalid.defaults": "'configuration.colors.defaults' must be defined and must contain 'light', 'dark' and 'highContrast'"
		},
		"vs/workbench/services/themes/electron-browser/workbenchThemeService": {
			"error.cannotloadtheme": "Unable to load {0}: {1}",
			"colorTheme": "Specifies the colour theme used in the workbench.",
			"colorThemeError": "Theme is unknown or not installed.",
			"iconTheme": "Specifies the icon theme used in the workbench or 'null' to not show any file icons.",
			"noIconThemeDesc": "No file icons",
			"iconThemeError": "File icon theme is unknown or not installed.",
			"workbenchColors": "Overrides colours from the currently selected colour theme.",
			"editorColors.comments": "Sets the colours and styles for comments",
			"editorColors.strings": "Sets the colours and styles for strings literals.",
			"editorColors.keywords": "Sets the colours and styles for keywords.",
			"editorColors.numbers": "Sets the colours and styles for number literals.",
			"editorColors.types": "Sets the colours and styles for type declarations and references.",
			"editorColors.functions": "Sets the colours and styles for functions declarations and references.",
			"editorColors.variables": "Sets the colours and styles for variables declarations and references.",
			"editorColors.textMateRules": "Sets colours and styles using textmate theming rules (advanced).",
			"editorColors": "Overrides editor colours and font style from the currently selected colour theme."
		},
		"vs/workbench/services/themes/electron-browser/colorThemeData": {
			"error.cannotparsejson": "Problems parsing JSON theme file: {0}",
			"error.invalidformat.colors": "Problem parsing colour theme file: {0}. Property 'colors' is not of type 'object'.",
			"error.invalidformat.tokenColors": "Problem parsing colour theme file: {0}. Property 'tokenColors' should be either an array specifying colours or a path to a TextMate theme file",
			"error.plist.invalidformat": "Problem parsing tmTheme file: {0}. 'settings' is not array.",
			"error.cannotparse": "Problems parsing tmTheme file: {0}",
			"error.cannotload": "Problems loading tmTheme file {0}: {1}"
		},
		"vs/workbench/services/themes/common/fileIconThemeSchema": {
			"schema.folderName": "The ID of the icon definition for the association.",
			"schema.folderNameExpanded": "The ID of the icon definition for the association.",
			"schema.fileExtension": "The ID of the icon definition for the association.",
			"schema.fileName": "The ID of the icon definition for the association.",
			"schema.languageIds": "Associates languages to icons. The object key is the language id as defined in the language contribution point.",
			"schema.languageId": "The ID of the icon definition for the association.",
			"schema.fonts": "Fonts that are used in the icon definitions.",
			"schema.id": "The ID of the font.",
			"schema.src": "The location of the font.",
			"schema.font-format": "The format of the font.",
			"schema.font-weight": "The weight of the font.",
			"schema.font-sstyle": "The style of the font.",
			"schema.font-size": "The default size of the font.",
			"schema.iconDefinitions": "Description of all icons that can be used when associating files to icons.",
			"schema.iconDefinition": "An icon definition. The object key is the ID of the definition.",
			"schema.iconPath": "When using a SVG or PNG: The path to the image. The path is relative to the icon set file.",
			"schema.fontCharacter": "When using a glyph font: The character in the font to use.",
			"schema.fontColor": "When using a glyph font: The colour to use.",
			"schema.light": "Optional associations for file icons in light colour themes.",
			"schema.highContrast": "Optional associations for file icons in high contrast colour themes.",
			"schema.hidesExplorerArrows": "Configures whether the file explorer's arrows should be hidden when this theme is active."
		},
		"vs/workbench/services/themes/electron-browser/colorThemeStore": {
			"vscode.extension.contributes.themes": "Contributes textmate colour themes.",
			"vscode.extension.contributes.themes.id": "Id of the icon theme as used in the user settings.",
			"vscode.extension.contributes.themes.label": "Label of the colour theme as shown in the UI.",
			"vscode.extension.contributes.themes.uiTheme": "Base theme defining the colours around the editor: 'vs' is the light colour theme, 'vs-dark' is the dark colour theme. 'hc-black' is the dark high contrast theme.",
			"vscode.extension.contributes.themes.path": "Path of the tmTheme file. The path is relative to the extension folder and is typically './themes/themeFile.tmTheme'.",
			"reqarray": "Extension point `{0}` must be an array.",
			"reqpath": "Expected string in `contributes.{0}.path`. Provided value: {1}",
			"invalid.path.1": "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable."
		},
		"vs/workbench/services/themes/electron-browser/fileIconThemeStore": {
			"vscode.extension.contributes.iconThemes": "Contributes file icon themes.",
			"vscode.extension.contributes.iconThemes.id": "Id of the icon theme as used in the user settings.",
			"vscode.extension.contributes.iconThemes.label": "Label of the icon theme as shown in the UI.",
			"vscode.extension.contributes.iconThemes.path": "Path of the icon theme definition file. The path is relative to the extension folder and is typically './icons/awesome-icon-theme.json'.",
			"reqarray": "Extension point `{0}` must be an array.",
			"reqpath": "Expected string in `contributes.{0}.path`. Provided value: {1}",
			"reqid": "Expected string in `contributes.{0}.id`. Provided value: {1}",
			"invalid.path.1": "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable."
		},
		"vs/workbench/services/themes/electron-browser/fileIconThemeData": {
			"error.cannotparseicontheme": "Problems parsing file icons file: {0}"
		},
		"vs/workbench/services/workspace/node/workspaceEditingService": {
			"errorInvalidTaskConfiguration": "Unable to write into workspace configuration file. Please open the file to correct errors/warnings in it and try again.",
			"errorWorkspaceConfigurationFileDirty": "Unable to write into workspace configuration file because the file is dirty. Please save it and try again.",
			"openWorkspaceConfigurationFile": "Open Workspace Configuration"
		},
		"vs/workbench/services/textMate/electron-browser/TMSyntax": {
			"invalid.language": "Unknown language in `contributes.{0}.language`. Provided value: {1}",
			"invalid.scopeName": "Expected string in `contributes.{0}.scopeName`. Provided value: {1}",
			"invalid.path.0": "Expected string in `contributes.{0}.path`. Provided value: {1}",
			"invalid.injectTo": "Invalid value in `contributes.{0}.injectTo`. Must be an array of language scope names. Provided value: {1}",
			"invalid.embeddedLanguages": "Invalid value in `contributes.{0}.embeddedLanguages`. Must be an object map from scope name to language. Provided value: {1}",
			"invalid.tokenTypes": "Invalid value in `contributes.{0}.tokenTypes`. Must be an object map from scope name to token type. Provided value: {1}",
			"invalid.path.1": "Expected `contributes.{0}.path` ({1}) to be included inside extension's folder ({2}). This might make the extension non-portable.",
			"no-tm-grammar": "No TM Grammar registered for this language."
		},
		"vs/workbench/services/textMate/electron-browser/TMGrammars": {
			"vscode.extension.contributes.grammars": "Contributes textmate tokenisers.",
			"vscode.extension.contributes.grammars.language": "Language identifier for which this syntax is contributed to.",
			"vscode.extension.contributes.grammars.scopeName": "Textmate scope name used by the tmLanguage file.",
			"vscode.extension.contributes.grammars.path": "Path of the tmLanguage file. The path is relative to the extension folder and typically starts with './syntaxes/'.",
			"vscode.extension.contributes.grammars.embeddedLanguages": "A map of scope name to language id if this grammar contains embedded languages.",
			"vscode.extension.contributes.grammars.tokenTypes": "A map of scope name to token types.",
			"vscode.extension.contributes.grammars.injectTo": "List of language scope names to which this grammar is injected to."
		},
		"vs/workbench/services/decorations/browser/decorationsService": {
			"bubbleTitle": "Contains emphasised items"
		}
	}
}