{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git SCM Integration",
			"command.clone": "Clone",
			"command.openRepository": "Open Repository",
			"command.close": "Close Repository",
			"command.refresh": "Refresh",
			"command.openChange": "Open Changes",
			"command.openFile": "Open File",
			"command.openHEADFile": "Open File (HEAD)",
			"command.stage": "Stage Changes",
			"command.stageAll": "Stage All Changes",
			"command.stageSelectedRanges": "Stage Selected Ranges",
			"command.revertSelectedRanges": "Revert Selected Ranges",
			"command.stageChange": "Stage Change",
			"command.revertChange": "Revert Change",
			"command.unstage": "Unstage Changes",
			"command.unstageAll": "Unstage All Changes",
			"command.unstageSelectedRanges": "Unstage Selected Ranges",
			"command.clean": "Discard Changes",
			"command.cleanAll": "Discard All Changes",
			"command.commit": "Commit",
			"command.commitStaged": "Commit Staged",
			"command.commitStagedSigned": "Commit Staged (Signed Off)",
			"command.commitStagedAmend": "Commit Staged (Amend)",
			"command.commitAll": "Commit All",
			"command.commitAllSigned": "Commit All (Signed Off)",
			"command.commitAllAmend": "Commit All (Amend)",
			"command.undoCommit": "Undo Last Commit",
			"command.checkout": "Checkout to...",
			"command.branch": "Create Branch...",
			"command.deleteBranch": "Delete Branch...",
			"command.renameBranch": "Rename Branch...",
			"command.merge": "Merge Branch...",
			"command.createTag": "Create Tag",
			"command.fetch": "Fetch",
			"command.pull": "Pull",
			"command.pullRebase": "Pull (Rebase)",
			"command.pullFrom": "Pull from...",
			"command.push": "Push",
			"command.pushTo": "Push to...",
			"command.pushWithTags": "Push With Tags",
			"command.sync": "Sync",
			"command.syncRebase": "Sync (Rebase)",
			"command.publish": "Publish Branch",
			"command.showOutput": "Show Git Output",
			"command.ignore": "Add File to .gitignore",
			"command.stashIncludeUntracked": "Stash (Include Untracked)",
			"command.stash": "Stash",
			"command.stashPop": "Pop Stash...",
			"command.stashPopLatest": "Pop Latest Stash",
			"config.enableSmartCommit": "Commit all changes when there are no staged changes.",
			"config.enableCommitSigning": "Enables commit signing with GPG.",
			"config.discardAllScope": "Controls what changes are discarded by the `Discard all changes` command. `all` discards all changes. `tracked` discards only tracked files. `prompt` shows a prompt dialog every time the action is run.",
			"config.promptToSaveFilesBeforeCommit": "Controls whether Git should check for unsaved files before committing.",
			"config.showInlineOpenFileAction": "Controls whether to show an inline Open File action in the Git changes view.",
			"config.inputValidation": "Controls when to show commit message input validation.",
			"config.detectSubmodules": "Controls whether to automatically detect git submodules.",
			"config.detectSubmodulesLimit": "Controls the limit of git submodules detected.",
			"colors.added": "Colour for added resources."
		},
		"out/statusbar": {
			"checkout": "Checkout...",
			"publish changes": "Publish Changes",
			"syncing changes": "Synchronizing Changes..."
		},
		"out/repository": {
			"open": "Open",
			"index modified": "Index Modified",
			"modified": "Modified",
			"index added": "Index Added",
			"index deleted": "Index Deleted",
			"deleted": "Deleted",
			"index renamed": "Index Renamed",
			"index copied": "Index Copied",
			"untracked": "Untracked",
			"ignored": "Ignored",
			"both deleted": "Both Deleted",
			"added by us": "Added By Us",
			"deleted by them": "Deleted By Them",
			"added by them": "Added By Them",
			"deleted by us": "Deleted By Us",
			"both added": "Both Added",
			"both modified": "Both Modified",
			"commitMessage": "Message (press {0} to commit)",
			"commit": "Commit",
			"merge changes": "Merge Changes",
			"staged changes": "Staged Changes",
			"changes": "Changes",
			"commitMessageCountdown": "{0} characters left in current line",
			"commitMessageWarning": "{0} characters over {1} in current line",
			"neveragain": "Don't Show Again"
		},
		"out/model": {
			"too many submodules": "The '{0}' repository has {1} submodules which won't be opened automatically. You can still open each one individually by opening a file within.",
			"no repositories": "There are no available repositories",
			"pick repo": "Choose a repository"
		},
		"out/main": {
			"looking": "Looking for git in: {0}",
			"using git": "Using git {0} from {1}",
			"downloadgit": "Download Git",
			"neverShowAgain": "Don't Show Again",
			"notfound": "Git not found. Install it or configure it using the 'git.path' setting.",
			"updateGit": "Update Git",
			"git20": "You seem to have git {0} installed. Code works best with git >= 2"
		},
		"out/commands": {
			"tag at": "Tag at {0}",
			"remote branch at": "Remote branch at {0}",
			"create branch": "$(plus) Create new branch",
			"repourl": "Repository URL",
			"selectFolder": "Select Repository Location",
			"cloning": "Cloning git repository '{0}'...",
			"proposeopen": "Would you like to open the cloned repository?",
			"openrepo": "Open Repository",
			"add": "Add to Workspace",
			"are you sure": "This will create a Git repository in '{0}'. Are you sure you want to continue?",
			"open repo": "Open Repository",
			"HEAD not available": "HEAD version of '{0}' is not available.",
			"confirm stage files with merge conflicts": "Are you sure you want to stage {0} files with merge conflicts?",
			"confirm stage file with merge conflicts": "Are you sure you want to stage {0} with merge conflicts?",
			"yes": "Yes",
			"discard": "Discard Changes",
			"confirm delete": "Are you sure you want to DELETE {0}?",
			"delete file": "Delete file",
			"confirm discard": "Are you sure you want to discard changes in {0}?",
			"confirm discard multiple": "Are you sure you want to discard changes in {0} files?",
			"warn untracked": "This will DELETE {0} untracked files!",
			"confirm discard all single": "Are you sure you want to discard changes in {0}?",
			"discardAll multiple": "Discard 1 File",
			"discardAll": "Discard All {0} Files",
			"confirm delete multiple": "Are you sure you want to DELETE {0} files?",
			"delete files": "Delete Files",
			"there are untracked files single": "The following untracked file will be DELETED FROM DISK if discarded: {0}.",
			"there are untracked files": "There are {0} untracked files which will be DELETED FROM DISK if discarded.",
			"yes discard tracked": "Discard 1 Tracked File",
			"yes discard tracked multiple": "Discard {0} Tracked Files",
			"save and commit": "Save All & Commit",
			"commit": "Commit Anyway",
			"always": "Always",
			"no changes": "There are no changes to commit.",
			"commit message": "Commit message",
			"provide commit message": "Please provide a commit message",
			"select a ref to checkout": "Select a ref to checkout",
			"branch name": "Branch name",
			"provide branch name": "Please provide a branch name",
			"select branch to delete": "Select a branch to delete",
			"confirm force delete branch": "The branch '{0}' is not fully merged. Delete anyway?",
			"delete branch": "Delete Branch",
			"invalid branch name": "Invalid branch name",
			"branch already exists": "A branch named '{0}' already exists",
			"select a branch to merge from": "Select a branch to merge from",
			"tag name": "Tag name",
			"provide tag name": "Please provide a tag name",
			"tag message": "Message",
			"provide tag message": "Please provide a message to annotate the tag",
			"no remotes to fetch": "This repository has no remotes configured to fetch from.",
			"no remotes to pull": "Your repository has no remotes configured to pull from.",
			"pick remote pull repo": "Pick a remote to pull the branch from",
			"no remotes to push": "Your repository has no remotes configured to push to.",
			"ok": "OK",
			"push with tags success": "Successfully pushed with tags.",
			"nobranch": "Please check out a branch to push to a remote.",
			"confirm publish branch": "The branch '{0}' has no upstream branch. Would you like to publish this branch?",
			"pick remote": "Pick a remote to publish the branch '{0}' to:",
			"sync is unpredictable": "This action will push and pull commits to and from '{0}/{1}'.",
			"no remotes to publish": "Your repository has no remotes configured to publish to.",
			"no changes stash": "There are no changes to stash.",
			"provide stash message": "Optionally provide a stash message",
			"stash message": "Stash message",
			"pick stash to pop": "Pick a stash to pop",
			"open git log": "Open Git Log",
			"clean repo": "Please clean your repository working tree before checkout.",
			"cant push": "Can't push refs to remote. Try running 'Pull' first to integrate your changes.",
			"merge conflicts": "There are merge conflicts. Resolve them before committing.",
			"learn more": "Learn More",
			"git error details": "Git: {0}",
			"git error": "Git error"
		},
		"out/autofetch": {
			"yes": "Yes",
			"no": "No",
			"not now": "Ask Me Later",
			"suggest auto fetch": "Would you like Code to [periodically run 'git fetch']({0})?"
		},
		"out/askpass-main": {
			"missOrInvalid": "Missing or invalid credentials."
		}
	}
}