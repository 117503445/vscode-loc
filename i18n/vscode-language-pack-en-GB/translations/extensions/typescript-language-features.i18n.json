{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "TypeScript and JavaScript Language Features",
			"description": "Provides rich language support for JavaScript and TypeScript.",
			"reloadProjects.title": "Reload Project",
			"configuration.typescript": "TypeScript",
			"configuration.suggest.completeFunctionCalls": "Complete functions with their parameter signature.",
			"typescript.tsdk.desc": "Specifies the folder path containing the tsserver and lib*.d.ts files to use.",
			"typescript.tsserver.pluginPaths.item": "Either an absolute or relative path. Relative path will be resolved against workspace folder(s).",
			"typescript.validate.enable": "Enable/disable TypeScript validation.",
			"typescript.format.enable": "Enable/disable default TypeScript formatter.",
			"javascript.format.enable": "Enable/disable default JavaScript formatter.",
			"format.insertSpaceAfterCommaDelimiter": "Defines space handling after a comma delimiter.",
			"format.insertSpaceBeforeAndAfterBinaryOperators": "Defines space handling after a binary operator.",
			"format.insertSpaceAfterKeywordsInControlFlowStatements": "Defines space handling after keywords in a control flow statement.",
			"format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": "Defines space handling after function keyword for anonymous functions.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": "Defines space handling after opening and before closing non-empty parenthesis.",
			"format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": "Defines space handling after opening and before closing non-empty brackets.",
			"format.placeOpenBraceOnNewLineForFunctions": "Defines whether an open brace is put onto a new line for functions or not.",
			"format.placeOpenBraceOnNewLineForControlBlocks": "Defines whether an open brace is put onto a new line for control blocks or not.",
			"javascript.validate.enable": "Enable/disable JavaScript validation.",
			"goToProjectConfig.title": "Go to Project Configuration",
			"javascript.referencesCodeLens.enabled": "Enable/disable references CodeLens in JavaScript files.",
			"typescript.check.npmIsInstalled": "Check if NPM is installed for Automatic Type Acquisition.",
			"typescript.problemMatchers.tsc.label": "TypeScript problems",
			"typescript.problemMatchers.tscWatch.label": "TypeScript problems (watch mode)",
			"taskDefinition.tsconfig.description": "The tsconfig file that defines the TS build."
		},
		"out/utils/versionProvider": {
			"couldNotLoadTsVersion": "Could not load the TypeScript version at this path",
			"noBundledServerFound": "VS Code's tsserver was deleted by another application such as a misbehaving virus detection tool. Please reinstall VS Code."
		},
		"out/utils/versionPicker": {
			"useVSCodeVersionOption": "Use VS Code's Version",
			"useWorkspaceVersionOption": "Use Workspace Version",
			"learnMore": "Learn More",
			"selectTsVersion": "Select the TypeScript version used for JavaScript and TypeScript language features"
		},
		"out/utils/typingsStatus": {
			"installingPackages": "Fetching data for better TypeScript IntelliSense",
			"typesInstallerInitializationFailed.title": "Could not install typings files for JavaScript language features. Please ensure that NPM is installed or configure 'typescript.npm' in your user settings. Click [here]({0}) to learn more.",
			"typesInstallerInitializationFailed.doNotCheckAgain": "Don't Show Again"
		},
		"out/utils/surveyor": {
			"survey.checkJs.prompt": "Help improve VS Code's support for [checkJs](https://code.visualstudio.com/Docs/languages/javascript#_type-checking) in JavaScript! Since you have been using this feature, would you consider taking a short survey about your experience?",
			"takeShortSurvey": "Take Short Survey"
		},
		"out/utils/projectStatus": {
			"large.label": "Configure Excludes"
		},
		"out/utils/logger": {
			"channelName": "TypeScript"
		},
		"out/utils/api": {
			"invalidVersion": "invalid version"
		},
		"out/features/updatePathsOnRename": {
			"reject.title": "No",
			"accept.title": "Yes"
		},
		"out/features/task": {
			"buildTscLabel": "build - {0}",
			"buildAndWatchTscLabel": "watch - {0}"
		},
		"out/features/rename": {},
		"out/features/referencesCodeLens": {
			"oneReferenceLabel": "1 reference",
			"manyReferenceLabel": "{0} references"
		},
		"out/features/quickFix": {
			"fixAllInFileLabel": "{0} (Fix all in file)"
		},
		"out/features/organizeImports": {
			"oraganizeImportsAction.title": "Organise Imports"
		},
		"out/features/jsDocCompletions": {
			"typescript.jsDocCompletionItem.documentation": "JSDoc comment"
		},
		"out/features/implementationsCodeLens": {
			"oneImplementationLabel": "1 implementation",
			"manyImplementationLabel": "{0} implementations"
		},
		"out/features/directiveCommentCompletions": {
			"ts-check": "Enables semantic checking in a JavaScript file. Must be at the top of a file.",
			"ts-nocheck": "Disables semantic checking in a JavaScript file. Must be at the top of a file.",
			"ts-ignore": "Suppresses @ts-check errors on the next line of a file."
		},
		"out/features/completions": {
			"selectCodeAction": "Select code action to apply",
			"acquiringTypingsLabel": "Acquiring typings...",
			"acquiringTypingsDetail": "Acquiring typings definitions for IntelliSense.",
			"autoImportLabel": "Auto import from {0}"
		},
		"out/features/baseCodeLensProvider": {
			"referenceErrorLabel": "Could not determine references"
		},
		"out/commands/goToProjectConfiguration": {
			"typescript.projectConfigNoWorkspace": "Please open a folder in VS Code to use a TypeScript or JavaScript project",
			"typescript.projectConfigUnsupportedFile": "Could not determine TypeScript or JavaScript project. Unsupported file type",
			"typescript.projectConfigCouldNotGetInfo": "Could not determine TypeScript or JavaScript project",
			"typescript.noTypeScriptProjectConfig": "File is not part of a TypeScript project. Click [here]({0}) to learn more.",
			"typescript.noJavaScriptProjectConfig": "File is not part of a JavaScript project Click [here]({0}) to learn more.",
			"typescript.configureTsconfigQuickPick": "Configure tsconfig.json",
			"typescript.configureJsconfigQuickPick": "Configure jsconfig.json"
		},
		"out/typescriptServiceClient": {
			"noServerFound": "The path {0} doesn't point to a valid tsserver install. Falling back to bundled TypeScript version.",
			"typescript.openTsServerLog.notSupported": "TS Server logging requires TS 2.2.2+",
			"typescript.openTsServerLog.loggingNotEnabled": "TS Server logging is off. Please set `typescript.tsserver.log` and restart the TS server to enable logging",
			"typescript.openTsServerLog.enableAndReloadOption": "Enable logging and restart TS server",
			"typescript.openTsServerLog.noLogFile": "TS Server has not started logging.",
			"openTsServerLog.openFileFailedFailed": "Could not open TS Server log file",
			"serverDiedAfterStart": "The TypeScript language service died 5 times right after it got started. The service will not be restarted.",
			"serverDiedReportIssue": "Report Issue",
			"serverDied": "The TypeScript language service died unexpectedly 5 times in the last 5 Minutes."
		}
	}
}