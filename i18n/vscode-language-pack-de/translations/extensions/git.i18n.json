{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git SCM-Integration",
			"command.clone": "Klonen",
			"command.init": "Repository initialisieren",
			"command.openRepository": "Repository öffnen",
			"command.close": "Repository schließen",
			"command.refresh": "Aktualisieren",
			"command.openChange": "Änderungen öffnen",
			"command.openFile": "Datei öffnen",
			"command.openHEADFile": "Datei öffnen (HEAD)",
			"command.stage": "Änderungen bereitstellen",
			"command.stageAll": "Alle Änderungen bereitstellen",
			"command.stageSelectedRanges": "Gewählte Bereiche staffeln",
			"command.revertSelectedRanges": "Ausgewählte Bereiche zurücksetzen",
			"command.stageChange": "Änderung bereitstellen",
			"command.revertChange": "Änderung zurücksetzen",
			"command.unstage": "Bereitstellung der Änderungen aufheben",
			"command.unstageAll": "Bereitstellung aller Änderungen aufheben",
			"command.unstageSelectedRanges": "Bereitstellung gewählter Bereiche aufheben",
			"command.clean": "Änderungen verwerfen",
			"command.cleanAll": "Alle Änderungen verwerfen",
			"command.commit": "Commit",
			"command.commitStaged": "Gestaffelt committen",
			"command.commitEmpty": "Leer committen",
			"command.commitStagedSigned": "Bereitgestelltes committen (unterzeichnet)",
			"command.commitStagedAmend": "Gestaffelt committen (Ändern)",
			"command.commitAll": "Commit für alle ausführen",
			"command.commitAllSigned": "Alle committen (unterzeichnet)",
			"command.commitAllAmend": "Commit für alle ausführen (Ändern)",
			"command.restoreCommitTemplate": "Commitvorlage wiederherstellen",
			"command.undoCommit": "Letzten Commit rückgängig machen",
			"command.checkout": "Auschecken an...",
			"command.branch": "Branch wird erstellt...",
			"command.branchFrom": "Branch erstellen aus ...",
			"command.deleteBranch": "Branch löschen...",
			"command.renameBranch": "Branch umbenennen...",
			"command.merge": "Branch zusammenführen...",
			"command.createTag": "Tag erstellen",
			"command.fetch": "Abrufen",
			"command.fetchPrune": "Abrufen (Prune)",
			"command.fetchAll": "Von allen Remotes holen",
			"command.pull": "Pull",
			"command.pullRebase": "Pull (Rebase)",
			"command.pullFrom": "Pullen von...",
			"command.push": "Push",
			"command.pushForce": "Push (Erzwingen)",
			"command.pushTo": "Push zu...",
			"command.pushToForce": "Push zu... (Erzwingen)",
			"command.pushFollowTags": "Push (Tags folgen)",
			"command.pushFollowTagsForce": "Push (Tags folgen, Erzwingen)",
			"command.addRemote": "Remote hinzufügen",
			"command.removeRemote": "Remote entfernen",
			"command.sync": "Synchronisierung",
			"command.syncRebase": "Sync (Rebase)",
			"command.publish": "Branch veröffentlichen",
			"command.showOutput": "Git-Ausgabe anzeigen",
			"command.ignore": "Datei zu .gitignore hinzufügen",
			"command.stashIncludeUntracked": "Stash (einschließlich nicht verfolgt)",
			"command.stash": "Stash ausführen",
			"command.stashPop": "Pop für Stash ausführen...",
			"command.stashPopLatest": "Pop für letzten Stash ausführen",
			"command.stashApply": "Stash anwenden...",
			"command.stashApplyLatest": "Neuesten Stash anwenden",
			"config.enabled": "Legt fest, ob Git aktiviert ist.",
			"config.path": "Pfad und Dateiname der ausführbaren Git-Datei , z.B. `C:\\Programme\\Git\\bin\\git.exe` (Windows).",
			"config.autoRepositoryDetection": "Legt fest, in welchen Fällen Repositorys automatisch erkannt werden sollen.",
			"config.autoRepositoryDetection.true": "Sowohl nach Unterordnern des aktuell geöffneten Ordners als auch nach übergeordneten Ordnern von geöffneten Dateien suchen.",
			"config.autoRepositoryDetection.false": "Automatisches Durchsuchen von Repositorys deaktiveren.",
			"config.autoRepositoryDetection.subFolders": "Nach Unterordnern des aktuell geöffneten Ordners suchen.",
			"config.autoRepositoryDetection.openEditors": "Nach übergeordneten Ordnern von geöffneten Dateien suchen.",
			"config.autorefresh": "Gibt an, ob die automatische Aktualisierung aktiviert ist.",
			"config.autofetch": "Wenn diese Option aktiviert ist, werden Commits automatisch vom Standardremoterepository des aktuellen Git-Repositorys abgerufen.",
			"config.autofetchPeriod": "Dauer in Sekunden zwischen jeder automatischen Git-Abrufung, wenn 'git.autofetch' aktiviert ist.",
			"config.confirmSync": "Vor dem Synchronisieren von Git-Repositorys bestätigen.",
			"config.countBadge": "Steuert die Git-Badgeanzahl.",
			"config.countBadge.all": "Alle Änderungen zählen.",
			"config.countBadge.tracked": "Nur nachverfolgte Änderungen zählen.",
			"config.countBadge.off": "Zähler deaktivieren.",
			"config.checkoutType": "Legt fest, welche Branchtypen aufgelistet werden, wenn `Auschecken an...` ausgeführt wird.",
			"config.checkoutType.all": "Alle Verweise anzeigen.",
			"config.checkoutType.local": "Nur lokale Branches anzeigen.",
			"config.checkoutType.tags": "Nur Tags anzeigen.",
			"config.checkoutType.remote": "Nur Remote-Branches anzeigen.",
			"config.branchValidationRegex": "Regulärer Ausdruck zum Validieren neuer Branch-Namen.",
			"config.branchWhitespaceChar": "Zeichen, mit dem Leerzeichen im Namen neuer Branches ersetzt werden sollen.",
			"config.ignoreLegacyWarning": "Ignoriert die Legacy-Git-Warnung.",
			"config.ignoreMissingGitWarning": "Ignoriert die Warnung, wenn Git nicht vorhanden ist.",
			"config.ignoreLimitWarning": "Ignoriert die Warnung bei zu hoher Anzahl von Änderungen in einem Repository.",
			"config.defaultCloneDirectory": "Das Standardspeicherort für einen Klon eines Git-Repositorys.",
			"config.enableSmartCommit": "Alle Änderungen committen, wenn keine bereitgestellten Änderungen vorhanden sind.",
			"config.enableCommitSigning": "Aktiviert das Signieren von Commits per GPG.",
			"config.discardAllScope": "Legt fest, welche Änderungen vom Befehl \"Alle Änderungen verwerfen\" verworfen werden. \"all\" verwirft alle Änderungen. \"tracked\" verwirft nur verfolgte Dateien. \"prompt\" zeigt immer eine Eingabeaufforderung an, wenn die Aktion ausgeführt wird.",
			"config.decorations.enabled": "Legt fest, ob Git Farben und Badges für die Explorer-Ansicht und die Ansicht \"Geöffnete Editoren\" bereitstellt.",
			"config.promptToSaveFilesBeforeCommit": "Legt fest, ob Git vor dem einchecken nach nicht gespeicherten Dateien suchen soll.",
			"config.postCommitCommand": "Führt einen Git-Befehl nach erfolgreichem Commit aus.",
			"config.postCommitCommand.none": "Führen Sie keinen Befehl nach einem Commit aus.",
			"config.postCommitCommand.push": "Führen Sie \"Git Push\" nach einem erfolgreichen Commit aus.",
			"config.postCommitCommand.sync": "Führen Sie \"Git Sync\" nach einem erfolgreichen Commit aus.",
			"config.showInlineOpenFileAction": "Steuert, ob eine Inlineaktion zum Öffnen der Datei in der Ansicht \"Git-Änderungen\" angezeigt wird.",
			"config.showPushSuccessNotification": "Legt fest, ob bei einem erfolgreichen Push eine Benachrichtigung angezeigt werden soll.",
			"config.inputValidation": "Steuert, wann die Commit-Meldung der Eingabevalidierung angezeigt wird.",
			"config.inputValidationLength": "Steuert, ab welcher Länge für Commit-Nachrichten eine Warnung eingeblendet werden soll.",
			"config.inputValidationSubjectLength": "Legt den Grenzwert der Länge des Betreffs der Commitmeldung beim Anzeigen einer Warnung fest. Heben Sie die Festlegung auf, um den Wert von \"config.inputValidationLength\" zu erben.",
			"config.detectSubmodules": "Steuert, ob Git-Submodule automatisch erkannt werden.",
			"config.detectSubmodulesLimit": "Steuert die Begrenzung der Git-Submodule.",
			"config.alwaysShowStagedChangesResourceGroup": "Ressourcengruppe für bereitgestellte Änderungen immer anzeigen.",
			"config.alwaysSignOff": "Legt das signoff-Flag für alle Commits fest.",
			"config.ignoredRepositories": "Liste der zu ignorierenden Git-Repositorys.",
			"config.scanRepositories": "Liste mit Pfaden, an denen nach Git-Repositorys gesucht wird.",
			"config.showProgress": "Steuert, ob für Git-Aktionen der Fortschritt zu sehen ist.",
			"config.rebaseWhenSync": "Erzwingen, dass Git \"rebase\" verwendet, wenn der Synchronisierungsbefehl ausgeführt wird.",
			"config.confirmEmptyCommits": "Erstellen leerer Commits immer bestätigen.",
			"config.fetchOnPull": "Beim Pull alle Branches holen oder nur den aktuellen.",
			"config.pullTags": "Hiermit werden alle Tags beim Pullvorgang abgerufen.",
			"config.autoStash": "Führen Sie für Änderungen einen Stash aus, bevor Sie sie pullen, und stellen Sie sie nach einem erfolgreichen Pull wieder her.",
			"config.allowForcePush": "Steuert, ob erzwungene Pushes (mit oder ohne Lease) aktiviert sind.",
			"config.useForcePushWithLease": "Steuert, ob erzwungene Pushes die sicherere Variante mit Leases verwenden.",
			"config.confirmForcePush": "Steuert, ob der Benutzer vor einem erzwungenen Push zur Bestätigung aufgefordert wird.",
			"config.openDiffOnClick": "Steuert, ob der Diff-Editor geöffnet werden soll, wenn Sie auf eine Änderung klicken. Ansonsten wird der normale Editor geöffnet.",
			"colors.added": "Farbe für hinzugefügte Ressourcen.",
			"colors.modified": "Farbe für geänderte Ressourcen.",
			"colors.deleted": "Farbe für gelöschte Ressourcen.",
			"colors.untracked": "Farbe für nicht verfolgte Ressourcen.",
			"colors.ignored": "Farbe für ignorierte Ressourcen.",
			"colors.conflict": "Farbe für Ressourcen mit Konflikten.",
			"colors.submodule": "Farbe für Submodul-Ressourcen."
		}
	}
}