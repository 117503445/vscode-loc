{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git SCM 통합",
			"command.clone": "복제",
			"command.init": "리포지토리 초기화",
			"command.openRepository": "리포지토리 열기",
			"command.close": "리포지토리 닫기",
			"command.refresh": "새로 고침",
			"command.openChange": "변경 내용 열기",
			"command.openFile": "파일 열기",
			"command.openHEADFile": "파일 열기(HEAD)",
			"command.stage": "변경 내용 스테이징",
			"command.stageAll": "모든 변경 내용 스테이징",
			"command.stageSelectedRanges": "선택한 범위 스테이징",
			"command.revertSelectedRanges": "선택한 범위 되돌리기",
			"command.stageChange": "변경 내용 스테이징",
			"command.revertChange": "변경 내용 되돌리기",
			"command.unstage": "변경 내용 스테이징 취소",
			"command.unstageAll": "모든 변경 내용 스테이징 취소",
			"command.unstageSelectedRanges": "선택한 범위 스테이징 취소",
			"command.clean": "변경 내용 취소",
			"command.cleanAll": "모든 변경 내용 취소",
			"command.commit": "커밋",
			"command.commitStaged": "스테이징된 항목 커밋",
			"command.commitEmpty": "빈 내용을 커밋합니다.",
			"command.commitStagedSigned": "스테이징된 항목 커밋(로그오프됨)",
			"command.commitStagedAmend": "스테이징된 항목 커밋(수정)",
			"command.commitAll": "모두 커밋",
			"command.commitAllSigned": "모두 커밋(로그오프됨)",
			"command.commitAllAmend": "모두 커밋 (수정)",
			"command.restoreCommitTemplate": "커밋 템플릿 복원",
			"command.undoCommit": "마지막 커밋 실행 취소",
			"command.checkout": "다음으로 체크 아웃...",
			"command.branch": "분기 만들기...",
			"command.branchFrom": "분기를 만듭니다...",
			"command.deleteBranch": "분기 삭제...",
			"command.renameBranch": "분기 이름 바꾸기...",
			"command.merge": "분기 병합...",
			"command.createTag": "태그 만들기",
			"command.fetch": "페치",
			"command.fetchPrune": "페치(정리)",
			"command.fetchAll": "모든 원격에서 페치",
			"command.pull": "풀",
			"command.pullRebase": "풀(다시 지정)",
			"command.pullFrom": "가져올 위치...",
			"command.push": "푸시",
			"command.pushForce": "푸시(강제)",
			"command.pushTo": "다음으로 푸시...",
			"command.pushToForce": "...로 푸시 (강제)",
			"command.pushFollowTags": "푸시(태그 팔로우)",
			"command.pushFollowTagsForce": "푸시(태그 팔로우, 강제 적용)",
			"command.addRemote": "원격 추가",
			"command.removeRemote": "원격 제거",
			"command.sync": "동기화",
			"command.syncRebase": "동기화(다시 지정)",
			"command.publish": "분기 게시",
			"command.showOutput": "Git 출력 표시",
			"command.ignore": ".gitignore에 파일 추가",
			"command.stashIncludeUntracked": "스태시(미추적 포함)",
			"command.stash": "스태시",
			"command.stashPop": "스태시 표시...",
			"command.stashPopLatest": "최신 슬래시 표시",
			"command.stashApply": "스태시 적용하기",
			"command.stashApplyLatest": "최신 스태시 적용하기",
			"config.enabled": "Git을 사용하도록 설정했는지 여부입니다.",
			"config.path": "Git 실행 파일의 경로 및 파일 이름(예: `C:\\Program Files\\Git\\bin\\git.exe`(Windows)입니다.",
			"config.autoRepositoryDetection": "리포지토리가 자동으로 감지되어야 하는 경우를 구성합니다.",
			"config.autoRepositoryDetection.true": "현재 열려 있는 폴더의 하위 폴더와 열려 있는 파일의 부모 폴더를 모두 검사합니다.",
			"config.autoRepositoryDetection.false": "자동 리포지토리 검사를 사용하지 않습니다.",
			"config.autoRepositoryDetection.subFolders": "현재 열려 있는 폴더의 하위 폴더를 검사합니다.",
			"config.autoRepositoryDetection.openEditors": "열려 있는 파일의 부모 폴더를 검사합니다.",
			"config.autorefresh": "자동 새로 고침을 사용할지 여부입니다.",
			"config.autofetch": "사용하도록 설정하는 경우 현재 Git 리포지토리의 기본 원격에서 커밋을 자동으로 가져옵니다.",
			"config.autofetchPeriod": "`git.autofetch`가 사용되는 경우 각 자동 git fetch 사이의 시간(초)입니다.",
			"config.confirmSync": "Git 리포지토리를 동기화하기 전에 확인합니다.",
			"config.countBadge": "Git 배지 카운터를 제어합니다.",
			"config.countBadge.all": "모든 변경 내용을 계산합니다.",
			"config.countBadge.tracked": "추적된 변경 내용만 계산합니다.",
			"config.countBadge.off": "카운터를 끕니다.",
			"config.checkoutType": "'다음으로 체크 아웃...'을 실행할 때 나열되는 분기 유형을 제어합니다.",
			"config.checkoutType.all": "모든 참조를 표시합니다.",
			"config.checkoutType.local": "로컬 분기만 표시합니다.",
			"config.checkoutType.tags": "태그만 표시합니다.",
			"config.checkoutType.remote": "원격 분기만 표시합니다.",
			"config.branchValidationRegex": "새 분기 이름의 유효성을 검사하는 정규식입니다.",
			"config.branchWhitespaceChar": "새 브랜치 이름에서 공백을 대체하는 문자.",
			"config.ignoreLegacyWarning": "레거시 Git 경고를 무시합니다.",
			"config.ignoreMissingGitWarning": "Git이 없으면 경고를 무시합니다.",
			"config.ignoreLimitWarning": "리포지토리에 변경 내용이 너무 많으면 경고를 무시합니다.",
			"config.defaultCloneDirectory": "Git 리포지토리를 복제할 기본 위치입니다.",
			"config.enableSmartCommit": "단계적 변경 사항이 없는 경우 모든 변경 사항을 저장합니다.",
			"config.enableCommitSigning": "GPG를 사용한 커밋 서명을 사용하도록 설정합니다.",
			"config.discardAllScope": "`모든 변경 내용 취소` 명령으로 취소되는 변경 내용을 제어합니다. `all`이면 모든 변경 내용을 취소합니다. `tracked`이면 추적된 파일만 취소합니다. `prompt`이면 작업을 실행할 때마다 프롬프트 대화 상자를 표시합니다.",
			"config.decorations.enabled": "Git에서 색과 배지를 탐색기와 열려 있는 편집기 뷰에 적용하는지 여부를 제어합니다.",
			"config.promptToSaveFilesBeforeCommit": "Git가 제출(commit)하기 전에 저장되지 않은 파일을 검사할지를 제어합니다. ",
			"config.postCommitCommand": "커밋 후 git 명령을 실행합니다.",
			"config.postCommitCommand.none": "커밋 후 명령을 실행하지 않습니다.",
			"config.postCommitCommand.push": "성공적인 커밋 후 'Git Push'를 실행합니다.",
			"config.postCommitCommand.sync": "성공적인 커밋 후 'Git Sync'를 실행합니다.",
			"config.showInlineOpenFileAction": "Git 변경점 보기에서 파일 열기 동작 줄을 표시할지의 여부를 제어합니다.",
			"config.showPushSuccessNotification": "푸시가 성공했을 때 알림을 표시할지 여부를 제어합니다.",
			"config.inputValidation": "커밋 메시지 입력 유효성 검사를 언제 표시할지 제어합니다.",
			"config.inputValidationLength": "경고 표시를 위한 커밋 메시지 길이 임계값을 제어합니다.",
			"config.inputValidationSubjectLength": "경고 표시를 위한 커밋 메시지 제목 길이 임계값을 제어합니다. `config.inputValidationLength` 값을 상속하려면 이 임계값 설정을 해제하세요.",
			"config.detectSubmodules": "Git 하위 모듈을 자동으로 검색할지 여부를 제어합니다.",
			"config.detectSubmodulesLimit": "Git submodules 검출 개수의 제한을 제어합니다.",
			"config.alwaysShowStagedChangesResourceGroup": "스테이징된 변경 내용 리소스 그룹을 항상 표시합니다.",
			"config.alwaysSignOff": "모든 커밋에 대한 확인 플래그를 제어합니다.",
			"config.ignoredRepositories": "무시할 Git 리포지토리의 목록입니다.",
			"config.scanRepositories": "Git 리포지토리를 검색할 경로의 목록입니다.",
			"config.showProgress": "Git 작업에서 진행률을 표시할지 여부를 제어합니다.",
			"config.rebaseWhenSync": "동기화 명령을 실행할 때 Git에서 다시 지정을 사용하게 합니다.",
			"config.confirmEmptyCommits": "빈 커밋의 생성을 항상 확인합니다.",
			"config.fetchOnPull": "풀링할 때 모든 분기를 페치하거나 현재 분기만 페치합니다.",
			"config.pullTags": "풀할 때 모든 태그를 페치합니다.",
			"config.autoStash": "풀하기 전에 변경 내용을 스태시하고 풀하는 데 성공한 후 변경 내용을 복원합니다.",
			"config.allowForcePush": "강제 푸시(임대 사용 또는 사용 안 함)가 가능한지 여부를 제어합니다.",
			"config.useForcePushWithLease": "강제 푸시가 좀 더 안전한 force-with-lease 변형을 사용하는지 여부를 제어합니다.",
			"config.confirmForcePush": "강제 푸시하기 전에 확인을 요청할지 여부를 제어합니다.",
			"config.openDiffOnClick": "변경을 클릭할 때 Diff 편집기가 열릴지 여부를 제어합니다. 그렇지 않으면 일반 편집기가 열립니다.",
			"colors.added": "추가된 리소스의 색입니다.",
			"colors.modified": "수정된 리소스의 색상입니다.",
			"colors.deleted": "삭제된 리소스의 색상입니다.",
			"colors.untracked": "추적되지 않은 리소스의 색상입니다.",
			"colors.ignored": "무시된 리소스의 색상입니다.",
			"colors.conflict": "충돌이 발생한 리소스의 색상입니다.",
			"colors.submodule": "서브모듈 자원의 색상"
		}
	}
}