{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git Entegrasyonu",
			"command.clone": "Kopyala",
			"command.init": "Depo Oluştur",
			"command.openRepository": "Depoyu Aç",
			"command.close": "Depoyu Kapat",
			"command.refresh": "Yenile",
			"command.openChange": "Değişiklikleri Aç",
			"command.openFile": "Dosyayı Aç",
			"command.openHEADFile": "Dosya Aç (HEAD)",
			"command.stage": "Değişiklikleri Hazırla",
			"command.stageAll": "Tüm Değişiklikleri Hazırla",
			"command.stageSelectedRanges": "Seçili Aralığı Hazırla",
			"command.revertSelectedRanges": "Seçili Aralığı Geri Al",
			"command.stageChange": "Değişikliği Hazırla",
			"command.revertChange": "Değişikliği Geri Al",
			"command.unstage": "Değişiklikleri Hazırlık Alanından Geri Al",
			"command.unstageAll": "Tüm Değişiklikleri Hazırlık Alanından Geri Al",
			"command.unstageSelectedRanges": "Seçili Alanı Hazırlık Alanından Geri Al",
			"command.clean": "Değişiklikleri Göz Ardı Et",
			"command.cleanAll": "Tüm Değişiklikleri Göz Ardı Et",
			"command.commit": "Commit'le",
			"command.commitStaged": "Hazırlananları Yürüt",
			"command.commitEmpty": "Commit Empty",
			"command.commitStagedSigned": "Hazırlananları Commit'le (İmzalı)",
			"command.commitStagedAmend": "Hazırlananları Commit'le (Değiştir)",
			"command.commitAll": "Tümünü Commit'le",
			"command.commitAllSigned": "Tümünü Commit'le (İmzalı)",
			"command.commitAllAmend": "Tümünü Commit'le (Değiştir)",
			"command.restoreCommitTemplate": "Restore Commit Template",
			"command.undoCommit": "Son Commit'i Geri Al",
			"command.checkout": "Geçiş yap...",
			"command.branch": "Dal Oluştur...",
			"command.branchFrom": "Create Branch From...",
			"command.deleteBranch": "Dalı Sil...",
			"command.renameBranch": "Dalı Yeniden Adlandır...",
			"command.merge": "Dalı Birleştir...",
			"command.createTag": "Etiket Oluştur",
			"command.fetch": "Al",
			"command.fetchPrune": "Fetch (Prune)",
			"command.fetchAll": "Fetch From All Remotes",
			"command.pull": "Çek",
			"command.pullRebase": "Çek (Yeniden Adresle)",
			"command.pullFrom": "Şuradan Çek...",
			"command.push": "İt",
			"command.pushForce": "Push (Force)",
			"command.pushTo": "Gönder...",
			"command.pushToForce": "Push to... (Force)",
			"command.pushFollowTags": "Push (Follow Tags)",
			"command.pushFollowTagsForce": "Push (Follow Tags, Force)",
			"command.addRemote": "Add Remote",
			"command.removeRemote": "Remove Remote",
			"command.sync": "Eşitle",
			"command.syncRebase": "Eşitle (Yeniden Adresle)",
			"command.publish": "Dalı Yayınla",
			"command.showOutput": "Git Çıktısını Göster",
			"command.ignore": ".gitignore'a Dosya Ekle",
			"command.stashIncludeUntracked": "Geçici Olarak Sakla(İzlenmeyenleri Dahil Et)",
			"command.stash": "Geçici Olarak Sakla",
			"command.stashPop": "Geçici Olarak Saklananı Geri Yükle...",
			"command.stashPopLatest": "En Son Geçici Olarak Saklananı Geri Yükle",
			"command.stashApply": "Apply Stash...",
			"command.stashApplyLatest": "Apply Latest Stash",
			"config.enabled": "Whether git is enabled.",
			"config.path": "Path and filename of the git executable, e.g. `C:\\Program Files\\Git\\bin\\git.exe` (Windows).",
			"config.autoRepositoryDetection": "Configures when repositories should be automatically detected.",
			"config.autoRepositoryDetection.true": "Scan for both subfolders of the current opened folder and parent folders of open files.",
			"config.autoRepositoryDetection.false": "Disable automatic repository scanning.",
			"config.autoRepositoryDetection.subFolders": "Scan for subfolders of the currently opened folder.",
			"config.autoRepositoryDetection.openEditors": "Scan for parent folders of open files.",
			"config.autorefresh": "Whether auto refreshing is enabled.",
			"config.autofetch": "When enabled, commits will automatically be fetched from the default remote of the current Git repository.",
			"config.autofetchPeriod": "Duration in seconds between each automatic git fetch, when `git.autofetch` is enabled.",
			"config.confirmSync": "Git depolarını senkronize etmeden önce onaylayın.",
			"config.countBadge": "Git rozet sayacını denetler.",
			"config.countBadge.all": "Count all changes.",
			"config.countBadge.tracked": "Count only tracked changes.",
			"config.countBadge.off": "Turn off counter.",
			"config.checkoutType": "Controls what type of branches are listed when running `Checkout to...`.",
			"config.checkoutType.all": "Show all references.",
			"config.checkoutType.local": "Show only local branches.",
			"config.checkoutType.tags": "Show only tags.",
			"config.checkoutType.remote": "Show only remote branches.",
			"config.branchValidationRegex": "A regular expression to validate new branch names.",
			"config.branchWhitespaceChar": "The character to replace whitespace in new branch names.",
			"config.ignoreLegacyWarning": "Ignores the legacy Git warning.",
			"config.ignoreMissingGitWarning": "Ignores the warning when Git is missing.",
			"config.ignoreLimitWarning": "Ignores the warning when there are too many changes in a repository.",
			"config.defaultCloneDirectory": "The default location to clone a git repository.",
			"config.enableSmartCommit": "Hazırlanan değişiklik yoksa tüm değişiklikleri commit'le.",
			"config.enableCommitSigning": "GPG ile commit imzalamayı etkinleştirir.",
			"config.discardAllScope": "`Tüm Değişiklikleri Göz Ardı Et` komutuyla hangi değişikliklerin göz ardı edileceğini denetler. `all` tüm değişiklikleri göz ardı eder. `tracked` sadece izlenen dosyaları göz ardı eder. `prompt` eylem her çalıştığında bir onay penceresi gösterir.",
			"config.decorations.enabled": "Controls whether Git contributes colors and badges to the explorer and the open editors view.",
			"config.promptToSaveFilesBeforeCommit": "Commit'lemeden önce Git'in kaydedilmemiş dosyaları kontrol edip etmeyeceğini denetler.",
			"config.postCommitCommand": "Runs a git command after a successful commit.",
			"config.postCommitCommand.none": "Don't run any command after a commit.",
			"config.postCommitCommand.push": "Run 'Git Push' after a successful commit.",
			"config.postCommitCommand.sync": "Run 'Git Sync' after a successful commit.",
			"config.showInlineOpenFileAction": "Git değişiklikleri görünümünde satır içi Dosyayı Aç eyleminin gösterilip gösterilmeyeceğini denetler.",
			"config.showPushSuccessNotification": "Controls whether to show a notification when a push is successful.",
			"config.inputValidation": "Commit mesajı doğrulamasının ne zaman gösterileceğini kontrol eder.",
			"config.inputValidationLength": "Controls the commit message length threshold for showing a warning.",
			"config.inputValidationSubjectLength": "Controls the commit message subject length threshold for showing a warning. Unset it to inherit the value of `config.inputValidationLength`.",
			"config.detectSubmodules": "Git alt modüllerin otomatik olarak tespit edilip edilmeyeceğini denetler.",
			"config.detectSubmodulesLimit": "Algılanan git alt modüllerinin limitini denetler.",
			"config.alwaysShowStagedChangesResourceGroup": "Always show the Staged Changes resource group.",
			"config.alwaysSignOff": "Controls the signoff flag for all commits.",
			"config.ignoredRepositories": "List of git repositories to ignore.",
			"config.scanRepositories": "List of paths to search for git repositories in.",
			"config.showProgress": "Controls whether git actions should show progress.",
			"config.rebaseWhenSync": "Force git to use rebase when running the sync command.",
			"config.confirmEmptyCommits": "Always confirm the creation of empty commits.",
			"config.fetchOnPull": "Fetch all branches when pulling or just the current one.",
			"config.pullTags": "Fetch all tags when pulling.",
			"config.autoStash": "Stash any changes before pulling and restore them after successful pull.",
			"config.allowForcePush": "Controls whether force push (with or without lease) is enabled.",
			"config.useForcePushWithLease": "Controls whether force pushing uses the safer force-with-lease variant.",
			"config.confirmForcePush": "Controls whether to ask for confirmation before force-pushing.",
			"config.openDiffOnClick": "Controls whether the diff editor should be opened when clicking a change. Otherwise the regular editor will be opened.",
			"colors.added": "Color for added resources.",
			"colors.modified": "Değiştirilen kaynakların rengi.",
			"colors.deleted": "Silinen kaynakların rengi.",
			"colors.untracked": "İzlenmeyen kaynakların rengi.",
			"colors.ignored": "Yok sayılan kaynakların rengi.",
			"colors.conflict": "Çakışma içeren kaynakların rengi.",
			"colors.submodule": "Alt modül kaynaklarının rengi."
		}
	}
}