{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"add.browser.breakpoint": "Add Browser Breakpoint",
			"attach.node.process": "Attach to Node Process (preview)",
			"chrome.address.description": "调试端口的 TCP/IP 地址。",
			"chrome.attach.description": "Attach to an instance of Chrome already in debug mode",
			"chrome.attach.label": "Chrome: Attach",
			"chrome.baseUrl.description": "Base URL to resolve paths baseUrl. baseURL is trimmed when mapping URLs to the files on disk. Defaults to the launch URL domain.",
			"chrome.cwd.description": "运行时程序的工作目录(可选)。",
			"chrome.disableNetworkCache.description": "控制每次请求是否跳过网络缓存",
			"chrome.env.description": "Optional dictionary of environment key/value pairs for the browser.",
			"chrome.file.description": "由浏览器打开的本地 html 文件",
			"chrome.label": "Chrome (preview)",
			"chrome.launch.description": "Launch Chrome to debug a URL",
			"chrome.launch.label": "Chrome: Launch",
			"chrome.pathMapping.description": "URL 或路径到本地文件夹的映射，用于在 Chrome 中将脚本解析为本地脚本",
			"chrome.port.description": "用于 Chrome 远程调试的端口。",
			"chrome.runtimeArgs.description": "传递给运行时可执行文件的可选参数。",
			"chrome.runtimeExecutable.description": "Either 'canary', 'stable', 'custom' or path to the browser executable. Custom means a custom wrapper, custom build or CHROME_PATH environment variable.",
			"chrome.server.description": "Configures a web server to start up. Takes the same configuration as the 'node' launch task.",
			"chrome.showAsyncStacks.description": "显示导致当前调用堆栈的异步调用",
			"chrome.skipFiles.description": "将在调试时跳过的一组文件名、文件夹名或路径的 glob 模式。",
			"chrome.smartStep.description": "自动跳过源代码映射文件中未映射代码行。例如，TypeScript 在编译 async/await 或其他功能时自动生成的代码。",
			"chrome.sourceMapPathOverrides.description": "用于根据源映射所述重写源文件位置的一组映射，其将映射到磁盘上所处位置。请参阅自述文件了解详细信息。",
			"chrome.sourceMaps.description": "使用 JavaScript 源映射(如果存在)。",
			"chrome.timeout.description": "尝试连接到 Chrome 的等待时间 (单位: 毫秒)。默认值为 10000 ms。",
			"chrome.url.description": "Will search for a tab with this exact url and attach to it, if found",
			"chrome.urlFilter.description": "将搜索 URL 为此的页面，若找到则附加于其之上。可以包含 * 通配符。",
			"chrome.userDataDir.description": "默认时，将使用位于临时文件夹的单独用户配置文件启动 Chrome。请使用此选项进行覆盖。当设置为 \"false\" 时，将使用您的默认用户配置文件启动。",
			"chrome.webRoot.description": "指定网络服务器根目录的工作区绝对路径。用于将类似 \"/app.js\" 的路径解析到磁盘。隐含为 \"/\" 的 pathMapping 路径",
			"configuration.npmScriptLensLocation": "Where a \"Run\" and \"Debug\" code lens should be shown in your npm scripts. It may be on \"all\", scripts, on \"top\" of the script section, or \"never\".",
			"configuration.terminalOptions": "Default launch options for the JavaScript debug terminal and npm scripts.",
			"configuration.usePreview": "Use the new in-preview JavaScript debugger for Node.js and Chrome.",
			"configuration.warnOnLongPrediction": "Whether a loading prompt should be shown if breakpoint prediction takes a while.",
			"debug.npm.edit": "Edit package.json",
			"debug.npm.noScripts": "No npm scripts found in your package.json",
			"debug.npm.noWorkspaceFolder": "You need to open a workspace folder to debug npm scripts.",
			"debug.npm.parseError": "Could not read {0}: {1}",
			"debug.npm.script": "Debug NPM Script",
			"debug.terminal.label": "Create JavaScript Debug Terminal",
			"debug.terminal.program.description": "Command to run in the launched terminal. If not provided, the terminal will open without launching a program.",
			"debug.terminal.snippet.label": "Run \"npm start\" in a debug terminal",
			"errors.timeout": "{0}: timeout after {1}ms",
			"extension.description": "An extension for debugging Node.js programs and Chrome.",
			"extensionHost.label": "VS Code Extension Development (preview)",
			"extensionHost.launch.config.name": "启动扩展",
			"extensionHost.launch.env.description": "传递到扩展主机的环境变量。",
			"extensionHost.launch.runtimeExecutable.description": "VS Code 的绝对路径。",
			"extensionHost.launch.stopOnEntry.description": "启动后自动停止扩展主机。",
			"extensionHost.snippet.launch.description": "在调试模式下启动 VS Code 扩展",
			"extensionHost.snippet.launch.label": "VS Code 扩展开发",
			"longPredictionWarning.disable": "不再显示",
			"longPredictionWarning.message": "It's taking a while to configure your breakpoints. You can speed this up by updating the 'outFiles' in your launch.json.",
			"longPredictionWarning.noFolder": "No workspace folder open.",
			"longPredictionWarning.open": "Open launch.json",
			"node.address.description": "TCP/IP address of process to be debugged. Default is 'localhost'.",
			"node.attach.attachExistingChildren.description": "Whether to attempt to attach to already-spawned child processes.",
			"node.attach.attachSpawnedProcesses.description": "Whether to set environment variables in the attached process to track spawned children.",
			"node.attach.config.name": "附加",
			"node.attach.processId.description": "要附加到的进程的 id。",
			"node.attach.restart.description": "Try to reconnect to the program if we lose connection.",
			"node.console.title": "Node 调试控制台",
			"node.disableOptimisticBPs.description": "在为文件加载 sourcemap 之前，请不要在该文件中设置断点。",
			"node.label": "Node.js (preview)",
			"node.launch.args.description": "传递给程序的命令行参数。",
			"node.launch.autoAttachChildProcesses.description": "自动将调试器附加到新的子进程。",
			"node.launch.config.name": "启动",
			"node.launch.console.description": "启动调试目标的位置。",
			"node.launch.console.externalTerminal.description": "可通过用户设置来配置的外部终端",
			"node.launch.console.integratedTerminal.description": "VS Code 的集成终端",
			"node.launch.console.internalConsole.description": "VS Code 调试控制台(不支持从程序读取输入)",
			"node.launch.cwd.description": "正在进行调试的程序的工作目录的绝对路径。",
			"node.launch.env.description": "传递给程序的环境变量。若值为 \"null\"，将从环境中移除变量。",
			"node.launch.envFile.description": "包含环境变量定义的文件的绝对路径。",
			"node.launch.logging": "Logging configuration",
			"node.launch.logging.cdp": "Path to the log file for Chrome DevTools Protocol messages",
			"node.launch.logging.dap": "Path to the log file for Debug Adapter Protocol messages",
			"node.launch.outputCapture.description": "捕获输出信息的位置: 调试 API 或者 stdout/stderr 流。",
			"node.launch.program.description": "程序的绝对路径。通过查看 package.json 和打开的文件猜测所生成的值。编辑此属性。",
			"node.launch.restart.description": "Try to restart the program if it exits with a non-zero exit code.",
			"node.launch.runtimeArgs.description": "传递给运行时可执行文件的可选参数。",
			"node.launch.runtimeExecutable.description": "要使用的运行时。应为绝对路径或在 PATH 上可用的运行时名称。默认值为 \"node\"。",
			"node.launch.runtimeVersion.description": "要使用的 \"node\" 运行时版本。需要 \"nvm\"。",
			"node.launch.useWSL.deprecation": "已弃用 \"useWSL\" 并将停止对它的支持。请改用 \"Remote - WSL\" 扩展。",
			"node.launch.useWSL.description": "使用 Windows 的 Linux 子系统 (WSL)。",
			"node.localRoot.description": "包含该程序的本地目录的路径。",
			"node.pauseForSourceMap.description": "Whether to wait for source maps to load for each incoming script. This has a performance overhead, and might be safely disabled when running off of disk, so long as `rootPath` is not disabled.",
			"node.port.description": "调试要附加的端口。默认端口是 5858。",
			"node.processattach.config.name": "附加到进程",
			"node.remoteRoot.description": "包含该程序的远程目录的绝对路径。",
			"node.resolveSourceMapLocations.description": "A list of minimatch patterns for locations (folders and URLs) in which source maps can be used to resolve local files. This can be used to avoid incorrectly breaking in external source mapped code. Patterns can be prefixed with \"!\" to exclude them. May be set to an empty array or null to avoid restriction.",
			"node.showAsyncStacks.description": "显示引导至当前调用堆栈的异步调用。",
			"node.snippet.attach.description": "附加到正在运行的 node 程序",
			"node.snippet.attach.label": "Node.js：附加",
			"node.snippet.attachProcess.description": "打开进程选取器并选择附加到的 node 进程",
			"node.snippet.attachProcess.label": "Node.js: 附加到进程",
			"node.snippet.electron.description": "调试 Electron 主进程",
			"node.snippet.electron.label": "Node.js: Electron 主进程",
			"node.snippet.gulp.description": "调试 Gulp 任务(确保项目中已安装本地 Gulp)",
			"node.snippet.gulp.label": "Node.js: Gulp 任务",
			"node.snippet.launch.description": "在调试模式下启动节点计划",
			"node.snippet.launch.label": "Node.js: 启动程序",
			"node.snippet.mocha.description": "调试 mocha 测试",
			"node.snippet.mocha.label": "Node.js: Mocha 测试",
			"node.snippet.nodemon.description": "使用 nodemon 以在源更改时重新启动调试会话",
			"node.snippet.nodemon.label": "Node.js: Nodemon 安装程序",
			"node.snippet.npm.description": "通过 npm \"debug\" 脚本启动 node 程序",
			"node.snippet.npm.label": "Node.js: 通过 NPM 启动",
			"node.snippet.remoteattach.description": "附加到远程节点计划的调试端口",
			"node.snippet.remoteattach.label": "Node.js: 附加到远程程序",
			"node.snippet.yo.description": "调试 yeoman 生成器 (通过在项目文件夹中运行 \"npm link\" 进行安装)",
			"node.snippet.yo.label": "Node.js: Yeoman 生成器",
			"node.sourceMapPathOverrides.description": "一组重写源映射中源文件的位置为磁盘上所处位置的映射。",
			"node.sourceMaps.description": "使用 JavaScript 源映射(如果存在)。",
			"node.stopOnEntry.description": "启动后自动停止程序。",
			"node.timeout.description": "重试连接到 Node.js 的此毫秒数。默认值为 10000 ms。",
			"open.loaded.script": "打开加载脚本",
			"outFiles.description": "如果启用了源映射，这些 glob 模式将指定生成的 JavaScript 文件。如果模式以 \"!\" 开始，则排除这些文件。如果未指定，则生成的代码应与其源代码位于同一目录。",
			"pretty.print.script": "Pretty print for debugging",
			"remove.browser.breakpoint": "Remove Browser Breakpoint",
			"remove.browser.breakpoint.all": "Remove All Browser Breakpoints",
			"skipFiles.description": "调试时要跳过的文件的 glob 模式数组。模式 \"<node_internals>/**\" 与所有内部 Node.js 模块相匹配。",
			"smartStep.description": "自动单步执行无法映射回原始源的生成代码。",
			"start.with.stop.on.entry": "开始调试并在输入时停止",
			"toggle.skipping.this.file": "切换是否跳过此文件",
			"trace.boolean.description": "Trace may be set to 'true' to write diagnostic logs to the disk.",
			"trace.console.description": "Configures whether logs are also returned to the debug console.",
			"trace.description": "Configures what diagnostic output is produced.",
			"trace.level.description": "Configures the level of logs recorded.",
			"trace.logFile.description": "Configures where on disk logs are written.",
			"trace.tags.description": "Configures what types of logs are recorded."
		}
	}
}