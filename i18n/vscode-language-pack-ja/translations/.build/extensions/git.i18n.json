{
	"": [
		"--------------------------------------------------------------------------------------------",
		"Copyright (c) Microsoft Corporation. All rights reserved.",
		"Licensed under the MIT License. See License.txt in the project root for license information.",
		"--------------------------------------------------------------------------------------------",
		"Do not edit this file. It is machine generated."
	],
	"version": "1.0.0",
	"contents": {
		"package": {
			"displayName": "Git",
			"description": "Git SCM統合",
			"command.clone": "クローン",
			"command.init": "リポジトリの初期化",
			"command.openRepository": "リポジトリを開く",
			"command.close": "リポジトリを閉じる",
			"command.refresh": "最新の情報に更新",
			"command.openChange": "変更を開く",
			"command.openFile": "ファイルを開く",
			"command.openHEADFile": "ファイル (HEAD) を開く",
			"command.stage": "変更をステージ",
			"command.stageAll": "すべての変更をステージ",
			"command.stageSelectedRanges": "選択した範囲をステージする",
			"command.revertSelectedRanges": "選択範囲を元に戻す",
			"command.stageChange": "変更のステージング",
			"command.revertChange": "変更を元に戻す",
			"command.unstage": "変更のステージング解除",
			"command.unstageAll": "すべての変更のステージング解除",
			"command.unstageSelectedRanges": "選択した範囲のステージを解除",
			"command.clean": "変更を破棄",
			"command.cleanAll": "すべての変更を破棄",
			"command.commit": "コミット",
			"command.commitStaged": "ステージング済みをコミット",
			"command.commitEmpty": "空のコミット",
			"command.commitStagedSigned": "コミットしてステージング (サインオフ)",
			"command.commitStagedAmend": "ステージング済をコミット (修正)",
			"command.commitAll": "すべてコミット",
			"command.commitAllSigned": "すべてコミット (Signed Off)",
			"command.commitAllAmend": "すべてコミット (修正)",
			"command.restoreCommitTemplate": "コミット テンプレートを復元する",
			"command.undoCommit": "前回のコミットを元に戻す",
			"command.checkout": "チェックアウト先...",
			"command.branch": "分岐の作成...",
			"command.branchFrom": "ブランチの作成元...",
			"command.deleteBranch": "ブランチの削除...",
			"command.renameBranch": "ブランチ名の変更...",
			"command.merge": "ブランチをマージ...",
			"command.createTag": "タグを作成",
			"command.fetch": "フェッチ",
			"command.fetchPrune": "フェッチ (Prune)",
			"command.fetchAll": "すべてのリモートからフェッチ",
			"command.pull": "プル",
			"command.pullRebase": "プル (リベース)",
			"command.pullFrom": "指定元からプル...",
			"command.push": "プッシュ",
			"command.pushForce": "プッシュ (強制)",
			"command.pushTo": "プッシュ先...",
			"command.pushToForce": "プッシュ先... (強制)",
			"command.pushFollowTags": "プッシュ (タグをフォロー)",
			"command.pushFollowTagsForce": "プッシュ (タグをフォロー、強制)",
			"command.addRemote": "リモートの追加",
			"command.removeRemote": "リモートの削除",
			"command.sync": "同期",
			"command.syncRebase": "同期 (Rebase)",
			"command.publish": "ブランチを公開",
			"command.showOutput": "Git 出力の表示",
			"command.ignore": "ファイルを .gitignore に追加",
			"command.stashIncludeUntracked": "スタッシュ (未追跡ファイルを含む)",
			"command.stash": "Stash",
			"command.stashPop": "スタッシュを適用して削除...",
			"command.stashPopLatest": "最新のスタッシュを適用して削除",
			"command.stashApply": "スタッシュを適用...",
			"command.stashApplyLatest": "最新のスタッシュを適用",
			"config.enabled": "Git が有効になっているかどうか。",
			"config.path": "Git の実行可能ファイルのパスやファイル名。例: `C:\\Program Files\\Git\\bin\\git.exe` (Windows)。",
			"config.autoRepositoryDetection": "レポジトリを自動的に検出するかどうかを構成します。",
			"config.autoRepositoryDetection.true": "現在開いているフォルダーのサブフォルダーと、開いているファイルの親フォルダーの両方をスキャンします。",
			"config.autoRepositoryDetection.false": "リポジトリの自動的なスキャンを無効にします。",
			"config.autoRepositoryDetection.subFolders": "現在開いているフォルダーのサブフォルダーをスキャンします。",
			"config.autoRepositoryDetection.openEditors": "開いているファイルの親フォルダーをスキャンします。",
			"config.autorefresh": "自動更新の有効/無効。",
			"config.autofetch": "有効にした場合、現在の Git リポジトリの既定のリモートから自動的にコミットがフェッチされます。",
			"config.autofetchPeriod": "`git.autofetch` が有効な場合の git の自動フェッチ間隔 (秒単位)。",
			"config.confirmSync": "Git リポジトリを同期する前に確認します。",
			"config.countBadge": "Git カウント バッジを制御します。",
			"config.countBadge.all": "すべての変更をカウントします。",
			"config.countBadge.tracked": "追跡済みの変更のみカウントします。",
			"config.countBadge.off": "カウンターをオフにします。",
			"config.checkoutType": "`チェックアウト先...` を実行するとき、どの種類のブランチを一覧表示するか制御します。",
			"config.checkoutType.all": "すべての参照を表示します。",
			"config.checkoutType.local": "ローカル ブランチのみを表示します。",
			"config.checkoutType.tags": "タグのみを表示します。",
			"config.checkoutType.remote": "リモート ブランチのみを表示します。",
			"config.branchValidationRegex": "新しいブランチ名を検証するための正規表現。",
			"config.branchWhitespaceChar": "新しいブランチ名で空白文字を置換する文字。",
			"config.ignoreLegacyWarning": "古い Git である警告を無視します。",
			"config.ignoreMissingGitWarning": "Git が見つからない場合の警告を無視します。",
			"config.ignoreLimitWarning": "リポジトリ内に変更が多い場合の警告を無視します。",
			"config.defaultCloneDirectory": "Git リポジトリをクローンする既定の場所。",
			"config.enableSmartCommit": "ステージされた変更がない場合はすべての変更をコミットします。",
			"config.smartCommitChanges": "スマート コミットで変更を自動的にステージングするかどうかを制御します。",
			"config.smartCommitChanges.all": "すべての変更を自動的にステージします。",
			"config.smartCommitChanges.tracked": "自動的にステージングされた変更箇所のみ。",
			"config.suggestSmartCommit": "スマート コミットを有効にすることを推奨します (ステージング済み変更がない場合、すべての変更をコミットします)。",
			"config.enableCommitSigning": "GPG によりデジタル署名されたコミットを有効にします。",
			"config.discardAllScope": "'すべての変更を破棄' コマンドによってどの変更が破棄されるかを制御します。'all' はすべての変更を破棄します。 'tracked' は追跡されているファイルだけを破棄します。 'prompt' は、アクションが実行されるたびにプロンプ​​ト ダイアログを表示します。",
			"config.decorations.enabled": "Git が配色とバッジをエクスプローラーと開いているエディターのビューに提供するかどうかを制御します。",
			"config.enableStatusBarSync": "ステータス バーに Git Sync コマンドを表示するかどうかを制御します。",
			"config.promptToSaveFilesBeforeCommit": "コミット前に Git が保存していないファイルを確認すべきかどうかを制御します。",
			"config.promptToSaveFilesBeforeCommit.always": "保存されていないファイルがないか確認します。",
			"config.promptToSaveFilesBeforeCommit.staged": "保存されていないステージング済みファイルのみを確認します。",
			"config.promptToSaveFilesBeforeCommit.never": "このチェックを無効にします。",
			"config.postCommitCommand": "コミットの成功後、git コマンドを実行します。",
			"config.postCommitCommand.none": "コミット後、任意のコマンドを実行しません。",
			"config.postCommitCommand.push": "コミットの成功後、'Git Push' を実行します。",
			"config.postCommitCommand.sync": "コミットの成功後、'Git Sync' を実行します。",
			"config.showInlineOpenFileAction": "Git 変更の表示内にインラインのファイルを開くアクションを表示するかどうかを制御します。",
			"config.showPushSuccessNotification": "プッシュが成功したときに通知を表示するかどうかを制御します。",
			"config.inputValidation": "コミット メッセージの入力検証をいつ表示するかを制御します。",
			"config.inputValidationLength": "警告を表示するコミット メッセージの長さのしきい値を制御します。",
			"config.inputValidationSubjectLength": "警告を表示するためのコミット メッセージの件名長のしきい値を制御します。'config.inputValidationLength' の値を継承する場合には設定解除します。",
			"config.detectSubmodules": "git サブモジュールを自動的に検出するかどうかを制御します。",
			"config.detectSubmodulesLimit": "検出する git サブモジュール数の制限を制御します。",
			"config.alwaysShowStagedChangesResourceGroup": "ステージ済み変更のリソース グループを常に表示します。",
			"config.alwaysSignOff": "すべてのコミットのサインオフ フラグを制御します。",
			"config.ignoredRepositories": "無視する git リポジトリの一覧。",
			"config.scanRepositories": "Git リポジトリを検索するパスのリスト。",
			"config.showProgress": "Git 操作の進行状況を表示するかどうかを制御します。",
			"config.rebaseWhenSync": "同期コマンドを実行するときに、Git リベースを強制します。",
			"config.confirmEmptyCommits": "常に空のコミットの生成について確認しますか?",
			"config.fetchOnPull": "プルするとき、すべてのブランチをフェッチするか、現在のものだけをフェッチするか。",
			"config.pullTags": "プルするときにすべてのタグをフェッチします。",
			"config.autoStash": "プルする前にすべての変更を一時退避し、プル成功後に復元します。",
			"config.allowForcePush": "強制的なプッシュ (--force-with-lease の有無にかかわらず) を有効にするかどうかを制御します。",
			"config.useForcePushWithLease": "force プッシュより安全な force-with-lease 方式を使用するかどうかを制御します。",
			"config.confirmForcePush": "強制的なプッシュの前に確認を求めるかどうかを制御します。",
			"config.openDiffOnClick": "変更をクリックすると差分エディターを開くかどうかを制御します。そうでなければ通常のエディターを開きます。",
			"config.supportCancellation": "ユーザーが操作を中止できる同期アクションの実行時に通知が表示されるかどうかを制御します。",
			"config.branchSortOrder": "ブランチの並べ替え順序を制御します。",
			"colors.added": "追加したリソースの配色。",
			"colors.modified": "リソースを改変した場合の配色",
			"colors.deleted": "リソースを検出した場合の配色",
			"colors.untracked": "リソースを追跡しない場合の配色",
			"colors.ignored": "リソースを無視する場合の配色",
			"colors.conflict": "リソースが競合する場合の配色",
			"colors.submodule": "サブモジュールの配色。"
		}
	}
}